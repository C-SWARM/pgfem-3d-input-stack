%!PS-Adobe-1.0
%%Title: ./doc/toolbox.mss
%%DocumentFonts: (atend)
%%Creator: Stephen Chou and Scribe 5(1501)
%%CreationDate: 28 June 1988 14:13
%%Pages: (atend)
%%EndComments
% PostScript Prelude for Scribe.
/BS {/SV save def 0.0 792.0 translate .01 -.01 scale} bind def
/ES {showpage SV restore} bind def
/SC {setrgbcolor} bind def
/FMTX matrix def
/RDF {WFT SLT 0.0 eq
  {SSZ 0.0 0.0 SSZ neg 0.0 0.0 FMTX astore}
  {SSZ 0.0 SLT sin SLT cos div SSZ mul SSZ neg 0.0 0.0 FMTX astore}
  ifelse makefont setfont} bind def
/SLT 0.0 def
/SI { /SLT exch cvr def RDF} bind def
/WFT /Adobe findfont def
/SF { /WFT exch findfont def RDF} bind def
/SSZ 1000.0 def
/SS { /SSZ exch 100.0 mul def RDF} bind def
/AF { /WFT exch findfont def /SSZ exch 100.0 mul def RDF} bind def
/MT /moveto load def
/XM {currentpoint exch pop moveto} bind def
/UL {gsave newpath moveto dup 2.0 div 0.0 exch rmoveto
   setlinewidth 0.0 rlineto stroke grestore} bind def
/LH {gsave newpath moveto setlinewidth
   0.0 rlineto
   gsave stroke grestore} bind def
/LV {gsave newpath moveto setlinewidth
   0.0 exch rlineto
   gsave stroke grestore} bind def
/BX {gsave newpath moveto setlinewidth
   exch
   dup 0.0 rlineto
   exch 0.0 exch neg rlineto
   neg 0.0 rlineto
   closepath
   gsave stroke grestore} bind def
/BX1 {grestore} bind def
/BX2 {setlinewidth 1 setgray stroke grestore} bind def
/PB {/PV save def translate 100.0 -100.0 scale pop} bind def
/PE {PV restore} bind def
/SH /show load def
/MX {exch show 0.0 rmoveto} bind def
/W {0 32 4 -1 roll widthshow} bind def
/WX {0 32 5 -1 roll widthshow 0.0 rmoveto} bind def
%%EndProlog
%%Page: 0 1 
BS
0 SI
15 /Helvetica-Bold AF
21132 14054 MT
(The C-Programmer's Toolbox)SH
17005 15963 MT
(A Set of Useful Packages for C Programs)SH
10 /Helvetica AF
26623 24413 MT
(Robert A Zimmermann)SH
25401 29653 MT
(Carnegie - Mellon University)SH
28650 31079 MT
(28 June 1988)SH
13 /Helvetica-Bold AF
29043 39828 MT
(Abstract)SH
10 /Helvetica AF
8280 42361 MT
(This document presents)34 W
/Helvetica-Oblique SF
19331 XM
(alistPack)SH
/Helvetica SF
(,)SH
/Helvetica-Oblique SF
23922 XM
(hashPack)SH
/Helvetica SF
(,)SH
/Helvetica-Oblique SF
28903 XM
(listPack)SH
/Helvetica SF
(,)SH
/Helvetica-Oblique SF
32938 XM
(mallocPack)SH
/Helvetica SF
(,)SH
/Helvetica-Oblique SF
38640 XM
(memoryPack)SH
/Helvetica SF
(, and)34 W
/Helvetica-Oblique SF
47044 XM
(treePack)SH
/Helvetica SF
(; libraries)34 W
8280 43504 MT
(of)SH
/Helvetica-Oblique SF
9406 XM
(C)SH
/Helvetica SF
10420 XM
(language subroutines which provide abstract data types, and complete sets of primitives for handling)15 W
8280 44647 MT
(them. Included)
598 W( are a description of the design and the rationale for each package, details about)
160 W( the)159 W
8280 45790 MT
(calling sequence and operation of the individual functions, and sample programs to illustrate their use.)SH
13283 50068 MT
(The research described in this document was made possible by the Semiconductor)SH
25123 51494 MT
(Research Corporation \050SRC\051.)SH
21337 58400 MT
(Copyright)SH
/Symbol SF
25894 XM
(\343)SH
/Helvetica SF
26962 XM
(1988 Carnegie-Mellon)
278 W( University)SH
ES
%%Page: 1 2 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
28763 XM
(Introduction)SH
54524 XM
(1)SH
16 SS 
8280 8366 MT
(1. Introduction)445 W
10 /Helvetica AF
9392 9792 MT
(This document describes)284 W
/Helvetica-Oblique SF
21637 XM
(alistPack)SH
/Helvetica SF
(,)SH
/Helvetica-Oblique SF
26479 XM
(hashPack)SH
/Helvetica SF
(,)SH
/Helvetica-Oblique SF
31711 XM
(listPack)SH
/Helvetica SF
(,)SH
/Helvetica-Oblique SF
35997 XM
(mallocPack)SH
/Helvetica SF
(,)SH
/Helvetica-Oblique SF
41950 XM
(memoryPack)SH
/Helvetica SF
(, and)285 W
/Helvetica-Oblique SF
50856 XM
(treePack)SH
/Helvetica SF
(;)SH
8280 11218 MT
(libraries which provide a set of)39 W
/Helvetica-Oblique SF
22241 XM
(C)SH
/Helvetica SF
23280 XM
(language functions for manipulating array lists, hash tables, linked lists,)38 W
8280 12644 MT
(and binary trees in a generic fashion.  In addition, a fast, efficient memory management module)
49 W( which is)50 W
8280 14070 MT
(customizable for most)
38 W( applications is provided.  The functions have been thoroughly exercised in at least)37 W
8280 15496 MT
(three major software projects, and have been found to be both useful and \050more importantly\051 bug-free.)SH
9392 18063 MT
(The utility of a generic list processing library has begun to interest the)
43 W( local producers of software.  As)44 W
8280 19489 MT
(the popularity of these libraries has spread)
275 W( rapidly, so too has the need for documentation.  This)274 W
8280 20915 MT
(document, then, is the response to that outcry.)SH
9392 23482 MT
(The document is organized as follows:)SH
9392 26049 MT
(Chapter 2 describes the rationale behind the creation of these)
121 W( packages well as the reasons to use)122 W
8280 27475 MT
(them.)SH
9392 30042 MT
(Chapter 3 details the functions)
38 W( which comprise the linked-list package.)37 W
/Helvetica-Oblique SF
41483 XM
(listPack)SH
/Helvetica SF
45243 XM
(provides the user with)37 W
8280 31468 MT
(doubly-linked lists, and a full set of functions to manipulate them.)SH
9392 34035 MT
(Chapter 4 details the functions which comprise the)147 W
/Helvetica-Oblique SF
33189 XM
(alistPack)SH
/Helvetica SF
37615 XM
(variant of)147 W
/Helvetica-Oblique SF
42300 XM
(listPack)SH
/Helvetica SF
(.)SH
/Helvetica-Oblique SF
46874 XM
(alistPack)SH
/Helvetica SF
51301 XM
(provides)SH
8280 35461 MT
(identical functionality to)18 W
/Helvetica-Oblique SF
18950 XM
(listPack)SH
/Helvetica SF
(, but uses a)
18 W( different underlying data structure.  Also, a comparison of the)17 W
8280 36887 MT
(two packages is made.)SH
9392 39454 MT
(Chapter 5 describes the binary tree package,)SH
/Helvetica-Oblique SF
29624 XM
(treePack)SH
/Helvetica SF
(.)SH
9392 42021 MT
(Chapter 6 describes the hash table package)SH
/Helvetica-Oblique SF
29236 XM
(hashPack)SH
/Helvetica SF
(.)SH
9392 44588 MT
(Chapter 7 describes)
25 W( the memory management functions provided by)26 W
/Helvetica-Oblique SF
40248 XM
(mallocPack)SH
/Helvetica SF
(. These)
330 W( functions are)26 W
8280 46014 MT
(a superset of the standard UNIX\050tm\051 utilities.  An additional package,)244 W
/Helvetica-Oblique SF
41589 XM
(memoryPack)SH
/Helvetica SF
(, which provides)244 W
8280 47440 MT
(independence from dependency upon)SH
/Helvetica-Oblique SF
25346 XM
(mallocPack)SH
/Helvetica SF
30736 XM
(for the other packages is also presented.)SH
9392 50007 MT
(Chapter 8 presents the details necessary to install these packages.)
211 W( It)
701 W( also lists the compile-time)212 W
8280 51433 MT
(options available to users of these packages, their advantages, and their drawbacks.)SH
ES
%%Page: 2 3 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(2)SH
26603 XM
(Introduction)SH
46694 XM
(28 June 1988)SH
14 SS 
6120 8221 MT
(1.1. Document)
389 W( Style)SH
10 /Helvetica AF
6120 9904 MT
(Data types are shown in)SH
/Courier SF
17125 XM
(typewriter font)SH
/Helvetica SF
(.)SH
6120 12190 MT
(Variables are shown as \050)SH
/Courier SF
(data-type)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
23135 XM
(boldface-name)SH
/Helvetica SF
(:)SH
16791 13333 MT
(\050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
23135 XM
(my_list)SH
/Helvetica SF
16791 14476 MT
(\050)SH
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
23135 XM
(count)SH
/Helvetica SF
6120 16762 MT
(Functions are shown as \050)SH
/Courier SF
(return-data-type)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
27502 XM
(function_name)SH
/Helvetica SF
(\050)SH
/Helvetica-Oblique SF
35225 XM
(parameter list)SH
/Helvetica SF
41560 XM
(\051:)SH
16958 17905 MT
(\050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
30056 XM
(make_list)SH
/Helvetica SF
(\050 \051)SH
16958 19048 MT
(\050)SH
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
29613 XM
(list_length)SH
/Helvetica SF
(\050 \050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
38569 XM
(my_list)SH
/Helvetica SF
42293 XM
(\051)SH
16958 20191 MT
(\050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
29057 XM
(append_list)SH
/Helvetica SF
(\050 \050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
38569 XM
(list_1)SH
/Helvetica SF
(, \050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
45026 XM
(list_2)SH
/Helvetica SF
47861 XM
(\051)SH
7232 21874 MT
(Defined constants are shown in)5 W
8 SS 
21486 XM
(SMALL CAPITALS)5 W
10 SS 
(. These)
288 W( include external constants \050e.g.)5 W
8 SS 
46251 XM
(NULL)SH
10 SS 
(\051 and local)5 W
6120 23300 MT
(constants \050e.g.)18 W
8 SS 
12993 XM
(HASH_SIZE)SH
10 SS 
(\051. All)
314 W( constants exported by the toolbox)
18 W( are in uppercase, with words separated)19 W
6120 24726 MT
(by underscores.)SH
7232 27293 MT
(Because discussion of function syntax)
108 W( is greatly eased by providing examples, there are many short)107 W
6120 28719 MT
(program fragments scattered throughout this document.  They are shown as:)SH
/Courier-Bold SF
8520 30524 MT
(main\050\051 /*)
19800 W( name of the function */)SH
10920 31655 MT
({)SH
10920 32786 MT
(printf\050 "Hello World\134n" \051;)
SH( /*)
5400 W( Do something simple */)SH
10920 33917 MT
(})SH
/Helvetica SF
7232 36484 MT
(Finally, one of)
192 W( the important features of the toolbox libraries is their ability to use the)193 W
/Helvetica-Oblique SF
47613 XM
(C)SH
/Helvetica SF
48806 XM
(language)SH
6120 37910 MT
(capability to pass functions as parameters.  Each function)
19 W( which expects another function as a parameter)18 W
6120 39336 MT
(will detail that function's parameters and expected return values.  The proper syntax for this)
62 W( data type is)63 W
/Courier SF
6120 40762 MT
(int \050*)134 W
/Helvetica-Bold SF
10588 XM
(function_name)SH
/Courier SF
(\051\050\051)SH
/Helvetica SF
(. However,)
546 W( since that is fairly verbose, the libraries export the)
134 W( data type)133 W
6120 42188 MT
(\050)SH
/Courier SF
(PFI)SH
/Helvetica SF
(\051 which stands for)SH
/Helvetica-Oblique SF
16367 XM
(Pointer to Function returning Integer)SH
/Helvetica SF
(.)SH
667 50 16367 42388 UL
611 50 20925 42388 UL
278 50 29262 42388 UL
14 /Helvetica-Bold AF
6120 46089 MT
(1.2. Acknowledgements)389 W
10 /Helvetica AF
7232 47515 MT
(I'd like to thank just about everyone who has ever used any of the packages included)
151 W( here.  Their)152 W
6120 48941 MT
(comments, gripes, and suggestions for improvement have only served to strengthen the quality of)
143 W( the)142 W
6120 50367 MT
(code. Their)
278 W( continued use of the packages merely serves to strengthen my ego.)SH
7232 52934 MT
(In particular I'd like to thank Kevin Nolish for deep philosophical discussions on technical matters, and)52 W
6120 54360 MT
(for inspiration in general; Karl Hauth for taking the time)
155 W( to unravel some of the problems in the initial)154 W
6120 55786 MT
(macro implementation; and the VT group for requesting needed extensions.)SH
ES
%%Page: 3 4 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
24677 XM
(Why Use a Generic Package?)SH
54524 XM
(3)SH
16 SS 
8280 8366 MT
(2. Why)
445 W( Use a Generic Package?)SH
10 /Helvetica AF
9392 9792 MT
(There are many times in the)
55 W( construction of any piece of software that classic data structure solutions)56 W
8280 11218 MT
(become useful.  One particular)
27 W( class of problems occurs when one needs to maintain of group of records)26 W
8280 12644 MT
(of some type.  There are many variants on this problem, depending on whether the data)
43 W( must be sorted;)44 W
8280 14070 MT
(how often records)
33 W( are to be added or deleted to the collection; where in the collection are new records to)32 W
8280 15496 MT
(be added; frequency of access to common records within the collection, etc.)SH
9392 18063 MT
(There are several ways in which one can logically group)
154 W( such a series of objects.  In practice, the)155 W
8280 19489 MT
(structure which we impose)
27 W( upon the collection of objects will affect the speed of the program, the amount)26 W
8280 20915 MT
(of memory it requires for code and data, and the efficiency of any given operation upon the data structure.)SH
14 /Helvetica-Bold AF
8280 24816 MT
(2.1. Creating)
389 W( A Generic Data Structure)SH
10 /Helvetica AF
9392 26242 MT
(Suppose that a program needs to maintain many)
18 W( records, each of which has several component fields.)19 W
8280 27668 MT
(Additionally, assume that the total number of records is not known when the program is written.)
95 W( Some)467 W
8280 29094 MT
(method of storing all of the records while the program is running must be used.)SH
9392 31661 MT
(The simplest method is to)
215 W( allocate space for an)216 W
/Helvetica-Oblique SF
32508 XM
(array)SH
/Helvetica SF
35280 XM
(which will hold some maximum number of)216 W
8280 33087 MT
(records. If,)
646 W( in fact, there turns out to be)
184 W( more objects than the array can hold the program will fail.)183 W
8280 34513 MT
(Alternatively, storage for a new larger array must be)
83 W( allocated, and the existing records must be copied)84 W
8280 35939 MT
(into the new array.)SH
/Courier-Bold SF
10680 37744 MT
(struct my_struct {)SH
12480 38875 MT
(int x,)
1800 W( y, z;)
SH( /*)
12600 W( information for the data ty)SH
12480 40006 MT
(float scale;)600 W
12480 41137 MT
(};)SH
10680 43399 MT
(struct my_struct my_array[ MAX_SIZE ];  /* can have up to MAX_SIZE obj)SH
/Helvetica SF
9392 45966 MT
(A second method is to maintain the records in a more dynamic)
43 W( data structure which assumes no fixed)42 W
8280 47392 MT
(maximum size.  The)9 W
/Helvetica-Oblique SF
17540 XM
(linked-list)SH
/Helvetica SF
21994 XM
(is a simple example of this.  Typically, linked lists are created)
9 W( by adding an)10 W
8280 48818 MT
(addition field to the record's data type which will)
30 W( contain the information necessary to find the next record)29 W
8280 50244 MT
(in the list.  When a new object needs to be added to)
43 W( the list, only the fields which will)44 W
/Helvetica-Oblique SF
46722 XM
(link)SH
/Helvetica SF
48544 XM
(the new object)44 W
8280 51670 MT
(into the list need to be changed.)SH
/Courier-Bold SF
10680 53475 MT
(struct my_struct {)SH
12480 54606 MT
(int x,)
10200 W( y, z;)
SH( /*)
4200 W( information for the data ty)SH
12480 55737 MT
(float scale;)9000 W
12480 56868 MT
(struct my_struct *)
SH( next_struct;)
1200 W( /*)
1800 W( pointer to next element)SH
12480 57999 MT
(};)SH
10680 60261 MT
(struct my_struct * my_list;)
SH( /*)
7200 W( pointer to start of the lis)SH
/Helvetica SF
9392 62828 MT
(Of course, rather than allocating one large space for an array of objects, the user must allocate space)49 W
8280 64254 MT
(for each individual object.)
45 W( This)
369 W( method adds an overhead cost of the memory required for the additional)46 W
8280 65680 MT
(field, as well as that required for the memory management of the objects themselves.)
56 W( However,)
388 W( when it)55 W
8280 67106 MT
(is assumed that in the)
91 W( average case less memory will be wasted through linked lists of structures, they)92 W
8280 68532 MT
(can become the prefered data type.)SH
9392 71099 MT
(It has become the current practice for most programmers to create)
84 W( linked lists in exactly this fashion.)83 W
ES
%%Page: 4 5 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(4)SH
22517 XM
(Why Use a Generic Package?)SH
46694 XM
(28 June 1988)SH
/Helvetica SF
6120 7929 MT
(Each data structure has its link to)
41 W( the next object in its list.  This requires, however, that either each data)42 W
6120 9355 MT
(type have its own set of routines to manipulate its list, or that the program assume that the location of)
25 W( the)24 W
6120 10781 MT
(next field is always in the same place in)
86 W( several data structures.  The first approach suffers because of)87 W
6120 12207 MT
(the number of routines needed.  The second leads to code which is particularly sensitive to both data type)3 W
6120 13633 MT
(changes and hardware changes which cause data types to change alignment.  It is also considered to be)26 W
6120 15059 MT
(particularly bad style.)SH
7232 17626 MT
(There is a third approach.  Rather than changing the data field within each object, a new)37 W
/Helvetica-Oblique SF
47103 XM
(abstract data)36 W
6120 19052 MT
(type)SH
/Helvetica SF
8501 XM
(is created.  Objects of the)213 W
/Helvetica-Oblique SF
21396 XM
(ADT)SH
/Helvetica SF
23887 XM
(can contain pointers to the user's original data structure.)
213 W( For)706 W
6120 20478 MT
(instance, a)126 W
/Helvetica-Oblique SF
11486 XM
(list ADT)126 W
/Helvetica SF
15516 XM
(can be built which provides all of the facilities of linked lists upon the)
126 W( user's data.)125 W
6120 21904 MT
(Since the representation of the)120 W
/Helvetica-Oblique SF
20617 XM
(ADT)SH
/Helvetica SF
23015 XM
(is completely independent of the user's data,)
120 W( it may be used in a)121 W
/Helvetica-Oblique SF
6120 23330 MT
(generic)SH
/Helvetica SF
9677 XM
(fashion.)SH
14 /Helvetica-Bold AF
6120 27231 MT
(2.2. Generic)
389 W( Functions for Generic Structures)SH
10 /Helvetica AF
7232 28657 MT
(Creating generic data structures provides several advantages.  Most of these are)
171 W( derived from the)170 W
6120 30083 MT
(ability to use a single set of functions to manipulate the single data structure.  This collection)
40 W( of functions)41 W
6120 31509 MT
(is called a)SH
/Helvetica-Oblique SF
10844 XM
(module)SH
/Helvetica SF
(.)SH
7232 34076 MT
(Each module which provides a generic data structure must also provide a)
49 W( complete set of functions to)48 W
6120 35502 MT
(manipulate the structure in every way that the user would manipulate a custom-made structure.  If it does)23 W
6120 36928 MT
(not, the user will abandon the generic data type or be forced to write additional functions to manipulate it.)SH
7232 39495 MT
(The module also must insulate)
53 W( itself from any reliance on specific data structures created by the user.)52 W
6120 40921 MT
(This can be accomplished by using pointers to the user's data.)SH
7232 43488 MT
(As an example, consider a function which will add an)
42 W( additional user object to a generic data structue.)43 W
6120 44914 MT
(That function,)127 W
/Helvetica-Bold SF
12711 XM
(add_object\050structure,user_object\051)SH
/Helvetica SF
(, can take as parameters the)127 W
/Helvetica-Bold SF
42594 XM
(structure)SH
/Helvetica SF
47332 XM
(to which the)126 W
6120 46340 MT
(user object is to be added and a pointer to the location of a)SH
/Helvetica-Bold SF
32414 XM
(user_object)SH
/Helvetica SF
38305 XM
(in memory.)SH
7232 48907 MT
(To further enhance the independence of the)
140 W( generic structure from that of user structures, the data)141 W
8 SS 
23258 49982 MT
(1)SH
10 SS 
6120 50333 MT
(type)SH
/Courier SF
8379 XM
(NODE)SH
/Helvetica SF
11148 XM
(is provided by)91 W
/Helvetica-Oblique SF
17868 XM
(mallocPack)SH
/Helvetica SF
(.)SH
24442 XM
(A)SH
/Courier SF
25479 XM
(NODE)SH
/Helvetica SF
28249 XM
(is simply a generic pointer.  The generic functions can)92 W
6120 51759 MT
(take)SH
/Courier SF
8373 XM
(NODE)SH
/Helvetica SF
(s as parameters, and return them as values.)
85 W( The)
446 W( user may cast these returned pointers into)84 W
6120 53185 MT
(the appropriate data type, and may pass a pointer of any data type where a)SH
/Courier SF
39695 XM
(NODE)SH
/Helvetica SF
42373 XM
(is expected.)SH
14 /Helvetica-Bold AF
6120 57086 MT
(2.3. Advantages)
389 W( of Generic Functions)SH
10 /Helvetica AF
7232 58512 MT
(The primary usefulness of generic structures is their robustness.  Since users are)
89 W( calling functions in)90 W
6120 59938 MT
(public libraries which have been fully exercised, bugs will not be found in)
56 W( code which has been rewritten)55 W
6120 61364 MT
(each time a new user structure was created.  This, and the time saved in rewriting such)
139 W( code means)140 W
6120 62790 MT
(programs may be written and debugged faster.)SH
7232 65357 MT
(Also, only one set of routines needs to be written to)
96 W( manipulate each)95 W
/Helvetica-Oblique SF
39049 XM
(ADT)SH
/Helvetica SF
41422 XM
(because that data type is)95 W
6120 66783 MT
(independent of the objects within it.  Thus)
46 W( the same routines can be used with different data types in the)47 W
10800 50 6120 69338 UL
6 SS 
7010 70733 MT
(1)SH
8 SS 
7344 71046 MT
(The toolbox contains an extended set of memory)
92 W( magement functions called)91 W
/Helvetica-Oblique SF
35609 XM
(mallocPack)SH
/Helvetica SF
(. A)
404 W( description of these functions is)91 W
6120 72000 MT
(found on page 63.)SH
ES
%%Page: 5 6 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
24677 XM
(Why Use a Generic Package?)SH
54524 XM
(5)SH
/Helvetica SF
8280 7929 MT
(same program, reducing the size of the code needed.)SH
9392 10496 MT
(Finally, it allows the user to change the)
160 W( way such structures are accessed \050for instance alternating)159 W
8280 11922 MT
(between lists and arrays\051 to determine their effects on speed efficiency, and memory size.)SH
ES
%%Page: 6 7 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(6)SH
22517 XM
(Why Use a Generic Package?)SH
46694 XM
(28 June 1988)SH
ES
%%Page: 7 8 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
22343 XM
(The listPack List Manipulation Package)SH
54524 XM
(7)SH
16 SS 
8280 8366 MT
(3. The listPack List Manipulation Package)SH
10 /Helvetica AF
9392 9792 MT
(The)SH
/Helvetica-Oblique SF
11451 XM
(listPack)SH
/Helvetica SF
15232 XM
(library provides an abstract data type called a)58 W
/Courier SF
36094 XM
(LIST)SH
/Helvetica SF
(, and a complete)
58 W( set of operations to)59 W
8280 11218 MT
(manipulate objects of that type.  In its simplest form, a)35 W
/Courier SF
32787 XM
(LIST)SH
/Helvetica SF
35500 XM
(is an ordered collection of objects which the)34 W
8280 12644 MT
(user creates.)8 W
/Helvetica-Oblique SF
14640 XM
(listPack)SH
/Helvetica SF
18371 XM
(functions allow the user to add objects at any point)
8 W( in a)9 W
/Courier SF
43039 XM
(LIST)SH
/Helvetica SF
(, retrieve objects from)9 W
/Courier SF
8280 14070 MT
(LIST)SH
/Helvetica SF
(s, delete objects from)5 W
/Courier SF
20482 XM
(LIST)SH
/Helvetica SF
(s, and apply user functions to)5 W
/Courier SF
36196 XM
(LIST)SH
/Helvetica SF
(s. Furthermore,)
286 W( there is a notion of a)4 W
8280 15496 MT
(current object,)
62 W( and each)63 W
/Courier SF
19537 XM
(LIST)SH
/Helvetica SF
22278 XM
(maintains the information necessary step forward and backward from the)63 W
8280 16922 MT
(current object.)SH
14 /Helvetica-Bold AF
8280 20823 MT
(3.1. The)
389 W( LIST data type)SH
10 /Helvetica-Oblique AF
9392 22249 MT
(listPack)SH
/Helvetica SF
13253 XM
(provides the single data type)138 W
/Courier SF
26950 XM
(LIST)SH
/Helvetica SF
(. No)
554 W( operations on variables)
138 W( of type)137 W
/Courier SF
46737 XM
(LIST)SH
/Helvetica SF
49552 XM
(are allowed,)137 W
8280 23675 MT
(except for assigning them the values returned by)63 W
/Helvetica-Oblique SF
30628 XM
(listPack)SH
/Helvetica SF
34414 XM
(functions and for passing them as)
63 W( parameters)64 W
8280 25101 MT
(to)SH
/Helvetica-Oblique SF
9427 XM
(listPack)SH
/Helvetica SF
13185 XM
(functions. It)
348 W( is also permitted \050and safe\051 to assign variables)
35 W( of type)34 W
/Courier SF
43484 XM
(LIST)SH
/Helvetica SF
46196 XM
(to other variables of)34 W
8280 26527 MT
(type)SH
/Courier SF
10448 XM
(LIST)SH
/Helvetica SF
(.)SH
/Helvetica-Bold SF
24371 58153 MT
(Figure 3-1:)SH
/Helvetica SF
30595 XM
(Structure of a LIST)SH
8280 59836 MT
(<==<list.can<)SH
9392 62403 MT
(A)SH
/Courier SF
10392 XM
(LIST)SH
/Helvetica SF
13125 XM
(is implemented)
55 W( as a pointer to a data type called)56 W
/Courier SF
35417 XM
(LISTNODE)SH
/Helvetica SF
(. Each)390 W
/Courier SF
43776 XM
(LISTNODE)SH
/Helvetica SF
48910 XM
(data structure)56 W
8280 63829 MT
(contains four fields:)SH
/Symbol SF
10322 65301 MT
(\267)SH
/Helvetica SF
11060 XM
(\050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
14404 XM
(next)SH
/Helvetica SF
16738 XM
(- a pointer to the next element in the list.)SH
/Symbol SF
10322 67116 MT
(\267)SH
/Helvetica SF
11060 XM
(\050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
14404 XM
(prev)SH
/Helvetica SF
16794 XM
(- a pointer to the previous element in the list.)SH
/Symbol SF
10322 68931 MT
(\267)SH
/Helvetica SF
11060 XM
(\050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
14404 XM
(node)SH
/Helvetica SF
17071 XM
(- a pointer to the user object which at that point in the list.)SH
/Symbol SF
10322 70746 MT
(\267)SH
/Helvetica SF
11060 XM
(\050)SH
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
13804 XM
(value)SH
/Helvetica SF
16639 XM
(- a field provided to make sorting and tagging objects in the list easier.)SH
ES
%%Page: 8 9 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(8)SH
20183 XM
(The listPack List Manipulation Package)SH
46694 XM
(28 June 1988)SH
/Helvetica SF
7232 7929 MT
(There is also one)242 W
/Courier SF
16148 XM
(LISTNODE)SH
/Helvetica SF
21468 XM
(which contains information about the)242 W
/Courier SF
39186 XM
(LISTNODE)SH
/Helvetica SF
44506 XM
(in each list.)
242 W( This)761 W
/Courier SF
6120 9355 MT
(LISTNODE)SH
/Helvetica SF
11304 XM
(endures for the lifetime of its list, and the)106 W
/Courier SF
30489 XM
(LIST)SH
/Helvetica SF
33273 XM
(variable returned)
106 W( to user programs is really)107 W
6120 10781 MT
(just a pointer to this data structure.  Therefore, the user need not worry about)23 W
/Helvetica-Oblique SF
40815 XM
(listPack)SH
/Helvetica SF
44560 XM
(functions changing)22 W
6120 12207 MT
(the location of a)SH
/Courier SF
13458 XM
(LIST)SH
/Helvetica SF
16136 XM
(in memory.)SH
7232 14774 MT
(The contents of the header)SH
/Courier SF
19462 XM
(LISTNODE)SH
/Helvetica SF
24540 XM
(are:)SH
/Symbol SF
8162 16246 MT
(\267)SH
/Helvetica SF
8900 XM
(\050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
12244 XM
(next)SH
/Helvetica SF
14578 XM
(- a pointer to the first)SH
/Courier SF
24027 XM
(LISTNODE)SH
/Helvetica SF
29105 XM
(element in the list.)SH
/Symbol SF
8162 18061 MT
(\267)SH
/Helvetica SF
8900 XM
(\050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
12244 XM
(prev)SH
/Helvetica SF
14634 XM
(- a pointer to the last)SH
/Courier SF
24028 XM
(LISTNODE)SH
/Helvetica SF
29106 XM
(element in the list.)SH
/Symbol SF
8162 19876 MT
(\267)SH
/Helvetica SF
8900 XM
(\050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
12269 XM
(node)SH
/Helvetica SF
14962 XM
(- a pointer to the)26 W
/Courier SF
22652 XM
(LISTNODE)SH
/Helvetica SF
27756 XM
(element which the user has marked as the)26 W
/Helvetica-Oblique SF
47028 XM
(current)SH
/Helvetica SF
8900 21019 MT
(node.)SH
/Symbol SF
8162 22834 MT
(\267)SH
/Helvetica SF
8900 XM
(\050)SH
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
11736 XM
(value)SH
/Helvetica SF
14663 XM
(- the number of elements in the)
92 W( list.  This reduces the cost of a common \050and)91 W
8900 23977 MT
(expensive\051 operation.)SH
7232 26544 MT
(This information is presented for the edification of users, and to assist in debugging user)
75 W( software.  It)76 W
6120 27970 MT
(should)SH
/Helvetica-Bold SF
9536 XM
(never)SH
/Helvetica SF
12674 XM
(be necessary for programs to access the internals of the)191 W
/Helvetica-Oblique SF
39762 XM
(listPack)SH
/Helvetica SF
43676 XM
(data structure.  The)191 W
6120 29396 MT
(package is designed to completely hide the data type itself and to minimize processing overhead.)
SH( Macros)279 W
6120 30822 MT
(are provided wherever it is possible to improve performance while maintaining modularity.)SH
14 /Helvetica-Bold AF
6120 34723 MT
(3.2. Creating)
389 W( Lists)SH
10 /Helvetica AF
7232 36149 MT
(Before the user may place objects)
91 W( in a)90 W
/Courier SF
25243 XM
(LIST)SH
/Helvetica SF
(, it must be created.  There are two functions which will)90 W
6120 37575 MT
(create a list -)SH
/Helvetica-Bold SF
12122 XM
(make_list\050\051)SH
/Helvetica SF
17624 XM
(and)SH
/Helvetica-Bold SF
19570 XM
(copy_list\050\051)SH
/Helvetica SF
(. Both)
278 W( routines return a pointer to newly created lists.)SH
12 /Helvetica-Bold AF
6120 41330 MT
(3.2.1. \050LIST\051)
334 W( make_list\050\051)SH
10 SS 
7232 42756 MT
(make_list)SH
/Helvetica SF
(\050\051 simply creates a new list and returns a pointer to it.)
111 W( The)
501 W( value returned by)112 W
/Helvetica-Bold SF
47696 XM
(make_list)SH
/Helvetica SF
(\050\051)SH
/Helvetica-Bold SF
6120 44182 MT
(must)SH
/Helvetica SF
8787 XM
(be saved by the caller in order to use that)SH
/Courier SF
27408 XM
(LIST)SH
/Helvetica SF
30086 XM
(with subsequent)SH
/Helvetica-Oblique SF
37590 XM
(listPack)SH
/Helvetica SF
41313 XM
(functions.)SH
12 /Helvetica-Bold AF
6120 47937 MT
(3.2.2. \050LIST\051)
334 W( copy_list\050 \050LIST\051 list, \050int\051 flag \051)SH
10 SS 
7232 49363 MT
(copy_list)SH
/Helvetica SF
(\050\051 takes an existing)46 W
/Courier SF
20421 XM
(LIST)SH
/Helvetica SF
23145 XM
(and makes an exact duplicate of it.  A)
46 W( pointer to the newly created)45 W
/Courier SF
6120 50789 MT
(LIST)SH
/Helvetica SF
8830 XM
(is returned to the caller.  The value returned by)33 W
/Helvetica-Bold SF
30170 XM
(copy_list)SH
/Helvetica SF
(\050\051)SH
/Helvetica-Bold SF
35482 XM
(must)SH
/Helvetica SF
38182 XM
(be saved by the caller in order to)33 W
6120 52215 MT
(use that)SH
/Courier SF
9956 XM
(LIST)SH
/Helvetica SF
12634 XM
(in subsequent)SH
/Helvetica-Oblique SF
19138 XM
(listPack)SH
/Helvetica SF
22861 XM
(functions.)SH
8 SS 
45432 54431 MT
(2)SH
10 SS 
7232 54782 MT
(\050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
10747 XM
(list)SH
/Helvetica SF
12641 XM
(is the list which is to be copied.  \050)171 W
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
31379 XM
(flag)SH
/Helvetica SF
33605 XM
(may be either)170 W
8 SS 
40451 XM
(AND_NODES)SH
10 SS 
46325 XM
(or)SH
8 SS 
47662 XM
(NOT_NODES)SH
10 SS 
(.)SH
8 SS 
6120 56208 MT
(AND_NODES)SH
10 SS 
11429 XM
(indicates that copying the elements themselves is requested, while)50 W
8 SS 
41670 XM
(NOT_NODES)SH
10 SS 
46978 XM
(indicates that)50 W
6120 57634 MT
(simply duplicating the pointer to the existing elements is satisfactory.  Warning:)47 W
8 SS 
42132 XM
(AND_NODES)SH
10 SS 
47437 XM
(may only be)46 W
4001 50 37483 57834 UL
6120 59060 MT
(used if the list elements were allocated with the)
7 W( extended functions provided by the memory management)8 W
6120 60486 MT
(package \050see page 63\051.)SH
10800 50 6120 70292 UL
6 SS 
7010 71687 MT
(2)SH
7344 72000 MT
(AND_NODES)SH
8 SS 
11299 XM
(and)SH
6 SS 
12856 XM
(NOT_NODES)SH
8 SS 
16812 XM
(are constants provided by and defined in)SH
/Helvetica-Oblique SF
31443 XM
(listPack.h)SH
/Helvetica SF
(.)SH
ES
%%Page: 9 10 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
22343 XM
(The listPack List Manipulation Package)SH
54524 XM
(9)SH
14 SS 
8280 8221 MT
(3.3. Destroying)
389 W( Lists)SH
10 /Helvetica AF
9392 9647 MT
(When the user no longer needs a)SH
/Courier SF
24456 XM
(LIST)SH
/Helvetica SF
(, it may be either destroyed or emptied.)SH
12 /Helvetica-Bold AF
8280 13402 MT
(3.3.1. free_list\050)
334 W( \050LIST\051 list, \050int\051 flag \051)SH
10 SS 
9392 14828 MT
(free_list)SH
/Helvetica SF
(\050\051 deallocates the storage needed for a)58 W
/Courier SF
31087 XM
(LIST)SH
/Helvetica SF
(. After)
394 W( a)57 W
/Courier SF
37775 XM
(LIST)SH
/Helvetica SF
40510 XM
(has been passed to)57 W
/Helvetica-Bold SF
49744 XM
(free_list)SH
/Helvetica SF
(\050\051 it)57 W
8280 16254 MT
(may not be used in any subsequent)SH
/Helvetica-Oblique SF
24345 XM
(listPack)SH
/Helvetica SF
28068 XM
(functions.)SH
9392 18821 MT
(\050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
12968 XM
(list)SH
/Helvetica SF
14923 XM
(is the list which is to be freed.)
232 W( \050)743 W
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
33606 XM
(flag)SH
/Helvetica SF
35895 XM
(may be either)233 W
8 SS 
42930 XM
(AND_NODES)SH
10 SS 
48422 XM
(or)SH
8 SS 
49822 XM
(NOT_NODES)SH
10 SS 
(.)SH
8 SS 
8280 20247 MT
(AND_NODES)SH
10 SS 
13798 XM
(indicates that)
259 W( freeing the storage used by the elements themselves is requested, while)258 W
8 SS 
8280 21673 MT
(NOT_NODES)SH
10 SS 
13543 XM
(indicates that should not be done.  Warning:)5 W
8 SS 
33655 XM
(AND_NODES)SH
10 SS 
38920 XM
(may only be used if the list elements)6 W
4001 50 29088 21873 UL
8280 23099 MT
(were allocated with the extended functions provided by the memory management package \050see page 63\051.)SH
12 /Helvetica-Bold AF
8280 26854 MT
(3.3.2. \050LIST\051)
334 W( flush_list\050 \050LIST\051 list, \050int\051 flag \051)SH
10 SS 
9392 28280 MT
(flush_list)SH
/Helvetica SF
(\050\051 deallocates the storage needed to hold)
100 W( the elements within the)99 W
/Courier SF
43837 XM
(LIST)SH
/Helvetica SF
(. After)
476 W( a)99 W
/Courier SF
50691 XM
(LIST)SH
/Helvetica SF
53468 XM
(has)SH
8280 29706 MT
(been passed to)5 W
/Helvetica-Bold SF
15412 XM
(flush_list)SH
/Helvetica SF
(\050\051 it will be empty, but it may be used in any subsequent)6 W
/Helvetica-Oblique SF
44780 XM
(listPack)SH
/Helvetica SF
48509 XM
(functions. The)290 W
8280 31132 MT
(emptied \050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
15459 XM
(list)SH
/Helvetica SF
17182 XM
(is returned to the caller for convenience.)SH
9392 33699 MT
(\050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
12916 XM
(list)SH
/Helvetica SF
14819 XM
(is the list which is to be flushed.  \050)180 W
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
33925 XM
(flag)SH
/Helvetica SF
36161 XM
(may be either)180 W
8 SS 
43037 XM
(AND_NODES)SH
10 SS 
48476 XM
(or)SH
8 SS 
49822 XM
(NOT_NODES)SH
10 SS 
(.)SH
8 SS 
8280 35125 MT
(AND_NODES)SH
10 SS 
13797 XM
(indicates that freeing the storage used by the elements themselves is)
258 W( requested, while)259 W
8 SS 
8280 36551 MT
(NOT_NODES)SH
10 SS 
13544 XM
(indicates that should not be done.  Warning:)6 W
8 SS 
33663 XM
(AND_NODES)SH
10 SS 
38927 XM
(may only be used if the list elements)5 W
4001 50 29096 36751 UL
8280 37977 MT
(were allocated with the extended functions provided by the memory management package \050see page 63\051.)SH
14 /Helvetica-Bold AF
8280 41878 MT
(3.4. Placing)
389 W( Elements in a List)SH
10 /Helvetica-Oblique AF
9392 43304 MT
(listPack)SH
/Helvetica SF
13204 XM
(provides many different ways of)
89 W( inserting elements into)90 W
/Courier SF
38541 XM
(LIST)SH
/Helvetica SF
(s. The)
458 W( one to use depends on)90 W
8280 44730 MT
(where in the list the user wishes to place the element.)SH
9392 47297 MT
(Conventionally, every list has two ends called the)145 W
/Helvetica-Oblique SF
32617 XM
(head)SH
/Helvetica SF
35264 XM
(and the)145 W
/Helvetica-Oblique SF
39168 XM
(tail)SH
/Helvetica SF
(. An)
568 W( element may be added at)145 W
8280 48723 MT
(either end, in which case it becomes the new head or tail.)SH
9392 51290 MT
(Alternately, each list may be though of as an)
2 W( array of elements.  The head is the first element, the tail is)3 W
8 SS 
17624 52365 MT
(th)SH
10 SS 
8280 52716 MT
(the)SH
/Helvetica-Bold SF
10025 XM
(list_length\050)SH
/Helvetica SF
15714 XM
(list)SH
/Helvetica-Bold SF
17291 XM
(\051)SH
/Helvetica SF
18291 XM
(. Elements)
430 W( may be added in the middle of a list by specifying the position before)76 W
8280 54142 MT
(which they are to be inserted.  Position, then, is simply the distance from the head of the list.)SH
12 /Helvetica-Bold AF
8280 57897 MT
(3.4.1. \050NODE\051)
334 W( add_to_head\050 \050LIST\051 list, \050NODE\051 element \051)SH
10 /Helvetica AF
9392 59323 MT
(The element is added before the head of the specified list, thus becoming the new)
271 W( head.  For)272 W
8280 60749 MT
(convenience,)SH
/Helvetica-Bold SF
14450 XM
(add_to_head)SH
/Helvetica SF
(\050\051 returns \050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
28296 XM
(element)SH
/Helvetica SF
(. This)
278 W( allows the user to perform operations like)SH
/Courier-Bold SF
10680 62554 MT
(save = add_to_head\050 list_1, read_next_element\050\051 \051;)SH
/Helvetica SF
9392 65121 MT
(or anything else the user desires.)SH
/Helvetica-Oblique SF
24677 XM
(listPack)SH
/Helvetica SF
28400 XM
(tries to impose no hidden restrictions on the use of lists.)SH
ES
%%Page: 10 11 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(10)SH
20183 XM
(The listPack List Manipulation Package)SH
46694 XM
(28 June 1988)SH
12 SS 
6120 8075 MT
(3.4.2. \050NODE\051)
334 W( add_to_tail\050 \050LIST\051 list, \050NODE\051 element \051)SH
10 /Helvetica AF
7232 9501 MT
(The element is added after the tail of the specified list, thus becoming the new)
65 W( tail.  For convenience,)64 W
/Helvetica-Bold SF
6120 10927 MT
(add_to_tail)SH
/Helvetica SF
(\050\051 returns \050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
19077 XM
(element)SH
/Helvetica SF
(.)SH
12 /Helvetica-Bold AF
6120 14682 MT
(3.4.3. \050NODE\051)
334 W( insert_list_node\050 \050LIST\051 list, \050NODE\051 element, \050NODE\051 node \051)SH
10 /Helvetica AF
7232 16108 MT
(\050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
10576 XM
(element)SH
/Helvetica SF
(, is inserted into \050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
24980 XM
(list)SH
/Helvetica SF
26703 XM
(before the first occurance of element \050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
46555 XM
(node)SH
/Helvetica SF
(.)SH
7232 18675 MT
(If)SH
/Helvetica-Bold SF
8066 XM
(node)SH
/Helvetica SF
10733 XM
(is not in)SH
/Helvetica-Bold SF
14457 XM
(list)SH
/Helvetica SF
(,)SH
/Helvetica-Bold SF
16458 XM
(element)SH
/Helvetica SF
20515 XM
(is added after the tail.)SH
7232 21242 MT
(For convenience,)SH
/Helvetica-Bold SF
15180 XM
(insert_list_node\050\051)SH
/Helvetica SF
23793 XM
(returns \050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
30527 XM
(element)SH
/Helvetica SF
(.)SH
12 /Helvetica-Bold AF
6120 24997 MT
(3.4.4. \050NODE\051)
334 W( insert_list_pos\050 \050LIST\051 list, \050NODE\051 element, \050int\051 pos \051)SH
10 /Helvetica AF
7232 26423 MT
(\050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
10712 XM
(element)SH
/Helvetica SF
14905 XM
(is inserted into \050)136 W
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
25518 XM
(list)SH
/Helvetica SF
27378 XM
(before element number \050)137 W
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
41286 XM
(pos)SH
/Helvetica SF
(. The)
552 W( positions of all)137 W
6120 27849 MT
(elements subsequent to the inserted element are thus incremented.)SH
7232 30416 MT
(If)SH
/Helvetica-Bold SF
8281 XM
(pos)SH
/Helvetica SF
10552 XM
(is less than or equal to one, it is inserted before the head)
215 W( of)214 W
/Helvetica-Bold SF
40075 XM
(list)SH
/Helvetica SF
(. If)706 W
/Helvetica-Bold SF
43830 XM
(pos)SH
/Helvetica SF
46100 XM
(is greater than)214 W
/Helvetica-Bold SF
6120 31842 MT
(list_length\050 list \051)SH
/Helvetica SF
(, it is added after the tail.)SH
7232 34409 MT
(For convenience,)SH
/Helvetica-Bold SF
15180 XM
(insert_list_pos\050\051)SH
/Helvetica SF
23182 XM
(returns \050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
29916 XM
(element)SH
/Helvetica SF
(.)SH
12 /Helvetica-Bold AF
6120 38164 MT
(3.4.5. \050int\051)
334 W( replace_list\050 \050LIST\051 list, \050NODE\051 old, \050NODE\051 new \051)SH
10 /Helvetica AF
7232 39590 MT
(The first appearance of \050)69 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
21482 XM
(old)SH
/Helvetica SF
23329 XM
(in the specified list is replaced with \050)69 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
42843 XM
(new)SH
/Helvetica SF
(. No)
418 W( other part of)70 W
6120 41016 MT
(\050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
9610 XM
(list)SH
/Helvetica SF
11479 XM
(is affected.)146 W
/Helvetica-Bold SF
17309 XM
(replace_list)SH
/Helvetica SF
(\050\051 will)
146 W( return a boolean TRUE if the replacement suceeded and a)145 W
6120 42442 MT
(boolean FALSE otherwise.  Thus, replacing all occurances of an element in a list may be done via)SH
/Courier-Bold SF
8520 44247 MT
(while \050 replace_list\050 list, old, new \051 \051)
SH( /*)
4200 W( null body */ ;)SH
12 /Helvetica-Bold AF
6120 48002 MT
(3.4.6. \050LIST\051)
334 W( append_list\050 \050LIST\051 first, \050LIST\051 second \051)SH
10 SS 
7232 49428 MT
(append_list)SH
/Helvetica SF
(\050\051 will add all of the elements of \050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
30194 XM
(second)SH
/Helvetica SF
33973 XM
(after the tail of \050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
43932 XM
(first)SH
/Helvetica SF
(.)SH
7232 51995 MT
(The algorithm used to append lists destroys the)
117 W( second list.  Therefore, \050)118 W
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
43840 XM
(second)SH
/Helvetica SF
47737 XM
(may not be)118 W
10802 50 23497 52195 UL
6120 53421 MT
(used in subsequent)SH
/Helvetica-Oblique SF
15070 XM
(listPack)SH
/Helvetica SF
18793 XM
(functions. Thus,)
278 W( it may be desirable to use)SH
/Helvetica-Bold SF
38080 XM
(append_list)SH
/Helvetica SF
(\050\051 as:)SH
/Courier-Bold SF
8520 55226 MT
(append_list\050 first, copy_list\050second,flag\051 \051;)
SH( /*)
1200 W( append a copy of li)SH
/Helvetica-Bold SF
7232 57793 MT
(append_list)SH
/Helvetica SF
(\050\051 returns \050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
20467 XM
(first)SH
/Helvetica SF
22634 XM
(to the caller.  This allows the following convenient operation:)SH
/Courier-Bold SF
8520 59598 MT
(new_list = append_list\050 copy_list\050first,flag\051, l2 \051;)
SH( /*)
1800 W( l2 is destr)SH
/Helvetica SF
7232 62165 MT
(Of course, these are also valid uses of)SH
/Helvetica-Bold SF
24518 XM
(append_list)SH
/Helvetica SF
(\050\051:)SH
/Courier-Bold SF
8520 63970 MT
(new_list = append_list\050 copy_list\050first,flag\051, copy_list\050second,flag\051)SH
8520 65101 MT
(append_list\050 first, second \051;)SH
8520 66232 MT
(append_list\050 first, append_list\050 second, third \051 \051;)SH
ES
%%Page: 11 12 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
22343 XM
(The listPack List Manipulation Package)SH
53968 XM
(11)SH
12 SS 
8280 8075 MT
(3.4.7. \050LIST\051)
334 W( insert_sublist_node\050 \050LIST\051 list1, \050LIST\051 list2, \050NODE\051 node \051)SH
10 /Helvetica AF
9392 9501 MT
(This function will take the second list, \050)18 W
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
29609 XM
(list2)SH
/Helvetica SF
(, and place it in)
18 W( the first list, \050)17 W
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
47450 XM
(list1)SH
/Helvetica SF
49746 XM
(immediately)SH
8280 10927 MT
(before the first occurance of the user element \050)58 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
32545 XM
(node)SH
/Helvetica SF
(.)SH
/Helvetica-Bold SF
35884 XM
(list1)SH
/Helvetica SF
38221 XM
(is returned for the convenience)
58 W( of the)59 W
8280 12353 MT
(user.)SH
9392 14920 MT
(If)SH
/Helvetica-Bold SF
10226 XM
(node)SH
/Helvetica SF
12893 XM
(is not present in)SH
/Helvetica-Bold SF
20230 XM
(list1)SH
/Helvetica SF
(,)SH
/Helvetica-Bold SF
22787 XM
(list2)SH
/Helvetica SF
25066 XM
(is appended to)SH
/Helvetica-Bold SF
31904 XM
(list1)SH
/Helvetica SF
(.)SH
9392 17487 MT
(The algorithm used causes)SH
/Helvetica-Bold SF
21675 XM
(list2)SH
/Helvetica SF
23954 XM
(to be destroyed, so it may be desirable to:)SH
/Courier-Bold SF
10680 19292 MT
(insert_sublist_node\050 destination, copy_list\050 source, NOT_NODES \051, targ)SH
12 /Helvetica-Bold AF
8280 23047 MT
(3.4.8. \050LIST\051)
334 W( insert_sublist_pos\050 \050LIST\051 list1, \050LIST\051 list2, \050int\051 pos \051)SH
10 /Helvetica AF
9392 24473 MT
(This function will take the second list, \050)18 W
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
29609 XM
(list2)SH
/Helvetica SF
(, and place it in)
18 W( the first list, \050)17 W
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
47450 XM
(list1)SH
/Helvetica SF
49746 XM
(immediately)SH
8 SS 
17583 25548 MT
(th)SH
10 SS 
8280 25899 MT
(before the \050)SH
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
15805 XM
(pos)SH
/Helvetica SF
18528 XM
(element.)SH
/Helvetica-Bold SF
22919 XM
(list1)SH
/Helvetica SF
25198 XM
(is returned for the convenience of the user.)SH
9392 28466 MT
(If)SH
/Helvetica-Bold SF
10306 XM
(pos)SH
/Helvetica SF
12442 XM
(is less than or equal to 1,)80 W
/Helvetica-Bold SF
24398 XM
(list2)SH
/Helvetica SF
26758 XM
(is prepended to)81 W
/Helvetica-Bold SF
34172 XM
(list1)SH
/Helvetica SF
(. If)440 W
/Helvetica-Bold SF
38084 XM
(pos)SH
/Helvetica SF
40221 XM
(is greater than)81 W
/Helvetica-Bold SF
47134 XM
(list_length\050list1\051)SH
/Helvetica SF
(,)SH
/Helvetica-Bold SF
8280 29892 MT
(list2)SH
/Helvetica SF
10559 XM
(is appended to)SH
/Helvetica-Bold SF
17397 XM
(list1)SH
/Helvetica SF
(.)SH
9392 32459 MT
(The algorithm used causes)SH
/Helvetica-Bold SF
21675 XM
(list2)SH
/Helvetica SF
23954 XM
(to be destroyed, so it may be desirable to:)SH
/Courier-Bold SF
10680 34264 MT
(insert_sublist_pos\050 destination, copy_list\050 source, NOT_NODES \051, 4 \051;)SH
14 /Helvetica-Bold AF
8280 38165 MT
(3.5. Examining)
389 W( the Elements of a List)SH
10 /Helvetica AF
9392 39591 MT
(Once elements have been placed in a)75 W
/Courier SF
26982 XM
(LIST)SH
/Helvetica SF
(, they are accessable to the user through any pointers to)74 W
8280 41017 MT
(them that the user)
2 W( has maintained.  Often, the user will not want to maintain his own pointers, and will rely)3 W
8280 42443 MT
(on)SH
/Helvetica-Oblique SF
9670 XM
(listPack)SH
/Helvetica SF
13393 XM
(functions to return pointers to the elements in a list.)SH
12 /Helvetica-Bold AF
8280 46198 MT
(3.5.1. \050NODE\051)
334 W( get_list_head\050 \050LIST\051 list \051)SH
10 SS 
9392 47624 MT
(get_list_head)SH
/Helvetica SF
(\050\051 returns)
7 W( a pointer to the first element in the specified list.  If the)6 W
/Courier SF
44387 XM
(LIST)SH
/Helvetica SF
47071 XM
(is empty,)6 W
8 SS 
51362 XM
(NULL)SH
10 SS 
53692 XM
(will)SH
8280 49050 MT
(be returned.)SH
12 /Helvetica-Bold AF
8280 52805 MT
(3.5.2. \050NODE\051)
334 W( get_list_tail\050 \050LIST\051 list \051)SH
10 SS 
9392 54231 MT
(get_list_tail)SH
/Helvetica SF
(\050\051 returns a pointer to the)
55 W( last element in the specified list.  If the)56 W
/Courier SF
44187 XM
(LIST)SH
/Helvetica SF
46921 XM
(is empty,)56 W
8 SS 
51312 XM
(NULL)SH
10 SS 
53692 XM
(will)SH
8280 55657 MT
(be returned.)SH
12 /Helvetica-Bold AF
8280 59412 MT
(3.5.3. \050NODE\051)
334 W( get_list_pos\050 \050LIST\051 list, \050int\051 pos \051)SH
8 /Helvetica AF
28534 60487 MT
(th)SH
10 /Helvetica-Bold AF
9392 60838 MT
(get_list_pos)SH
/Helvetica SF
(\050\051 returns a pointer to the)41 W
/Helvetica-Bold SF
26756 XM
(pos)SH
/Helvetica SF
29520 XM
(element in the specified list.)
41 W( If)
358 W( the)40 W
/Courier SF
45185 XM
(LIST)SH
/Helvetica SF
47903 XM
(is empty,)40 W
/Helvetica-Bold SF
52262 XM
(pos)SH
/Helvetica SF
54358 XM
(is)SH
8280 62264 MT
(less than one, or)SH
/Helvetica-Bold SF
15951 XM
(pos)SH
/Helvetica SF
18007 XM
(is greater than the length of the list,)SH
8 SS 
33905 XM
(NULL)SH
10 SS 
36229 XM
(will be returned.)SH
14 /Helvetica-Bold AF
8280 66165 MT
(3.6. Removing)
389 W( Elements from Lists)SH
10 /Helvetica AF
9392 67591 MT
(Elements may be removed from)29 W
/Courier SF
23986 XM
(LIST)SH
/Helvetica SF
(s with the appropriate)29 W
/Helvetica-Oblique SF
36340 XM
(listPack)SH
/Helvetica SF
40092 XM
(functions. These)
337 W( functions will all)30 W
8280 69017 MT
(return a pointer to the element removed from the list, so the)
201 W( user need not save the pointer before)200 W
8280 70443 MT
(removing the element.)SH
ES
%%Page: 12 13 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(12)SH
20183 XM
(The listPack List Manipulation Package)SH
46694 XM
(28 June 1988)SH
12 SS 
6120 8075 MT
(3.6.1. \050NODE\051)
334 W( get_from_head\050 \050LIST\051 list \051)SH
10 SS 
7232 9501 MT
(get_from_head)SH
/Helvetica SF
(\050\051 returns a pointer to the first element in the)
243 W( specified list.  The element will be)244 W
6120 10927 MT
(removed from the list, and the next element will become the new head.)
19 W( If)
315 W( the)18 W
/Courier SF
40771 XM
(LIST)SH
/Helvetica SF
43467 XM
(is empty,)18 W
8 SS 
47782 XM
(NULL)SH
10 SS 
50124 XM
(will be)18 W
6120 12353 MT
(returned.)SH
12 /Helvetica-Bold AF
6120 16108 MT
(3.6.2. \050NODE\051)
334 W( get_from_tail\050 \050LIST\051 list \051)SH
10 SS 
7232 17534 MT
(get_from_tail)SH
/Helvetica SF
(\050\051 returns a pointer to the last element in the)
39 W( specified list.  The element will be removed)40 W
6120 18960 MT
(from the list, and the previous element will become the new tail.  If the)181 W
/Courier SF
39960 XM
(LIST)SH
/Helvetica SF
42819 XM
(is empty,)180 W
8 SS 
47458 XM
(NULL)SH
10 SS 
49962 XM
(will be)180 W
6120 20386 MT
(returned.)SH
12 /Helvetica-Bold AF
6120 24141 MT
(3.6.3. \050NODE\051)
334 W( delete_list_pos\050 \050LIST\051 list, \050int\051 pos \051)SH
8 /Helvetica AF
28642 25216 MT
(th)SH
10 /Helvetica-Bold AF
7232 25567 MT
(delete_list_pos)SH
/Helvetica SF
(\050\051 returns a pointer to)
187 W( the)188 W
/Helvetica-Bold SF
26864 XM
(pos)SH
/Helvetica SF
29775 XM
(element in the specified list.  The element will be)188 W
6120 26993 MT
(removed from the list, and the positions of subsequent elements will be decremented.  If)
150 W( the)149 W
/Courier SF
49371 XM
(LIST)SH
/Helvetica SF
52198 XM
(is)SH
6120 28419 MT
(empty,)SH
/Helvetica-Bold SF
9399 XM
(pos)SH
/Helvetica SF
11455 XM
(is less than one, or)SH
/Helvetica-Bold SF
20126 XM
(pos)SH
/Helvetica SF
22182 XM
(is greater than the length of the list,)SH
8 SS 
38080 XM
(NULL)SH
10 SS 
40404 XM
(will be returned.)SH
12 /Helvetica-Bold AF
6120 32174 MT
(3.6.4. \050NODE\051)
334 W( delete_list_node\050 \050LIST\051 list, \050NODE\051 element \051)SH
10 /Helvetica AF
7232 33600 MT
(The first appearance of \050)131 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
21792 XM
(element)SH
/Helvetica SF
25980 XM
(in the specified)131 W
/Courier SF
33322 XM
(LIST)SH
/Helvetica SF
36132 XM
(is deleted.  For convenience, \050)132 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
6120 35026 MT
(element)SH
/Helvetica SF
10247 XM
(is returned to the caller, but if the list is empty or \050)70 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
36010 XM
(element)SH
/Helvetica SF
40136 XM
(was not present)69 W
8 SS 
47680 XM
(NULL)SH
10 SS 
50073 XM
(will be)69 W
6120 36452 MT
(returned.)SH
14 /Helvetica-Bold AF
6120 40353 MT
(3.7. Examining)
389 W( the Lists)SH
10 /Helvetica-Oblique AF
7232 41779 MT
(listPack)SH
/Helvetica SF
11139 XM
(provides several functions which will return boolean values based on inquiries being done)184 W
6120 43205 MT
(upon)SH
/Courier SF
8622 XM
(LIST)SH
/Helvetica SF
(s.)SH
12 /Helvetica-Bold AF
6120 46960 MT
(3.7.1. \050int\051)
334 W( list_length\050 \050LIST\051 list \051)SH
10 /Helvetica AF
7232 48386 MT
(This function returns the number of elements in the specified list.)SH
12 /Helvetica-Bold AF
6120 52141 MT
(3.7.2. \050int\051)
334 W( in_list\050 \050LIST\051 list, \050NODE\051 element \051)SH
10 /Helvetica AF
7232 53567 MT
(This function returns 0 \050boolean FALSE\051 if \050)125 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
30473 XM
(element)SH
/Helvetica SF
34655 XM
(does not appear)
125 W( in the specified \050)124 W
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
6120 54993 MT
(list)SH
/Helvetica SF
(. Otherwise,)
278 W( it returns the position of the element in the list \050in the range 1..)SH
/Helvetica-Bold SF
(list_length\050)SH
/Helvetica SF
46471 XM
(list)SH
/Helvetica-Bold SF
47971 XM
(\051)SH
/Helvetica SF
(\051.)SH
12 /Helvetica-Bold AF
6120 58748 MT
(3.7.3. \050int\051)
334 W( list_empty\050 \050LIST\051 list \051)SH
10 /Helvetica AF
7232 60174 MT
(This function returns boolean TRUE if the specified)273 W
/Courier SF
32259 XM
(LIST)SH
/Helvetica SF
35210 XM
(has no elements, otherwise it returns)274 W
6120 61600 MT
(boolean FALSE.)SH
12 /Helvetica-Bold AF
6120 65355 MT
(3.7.4. \050int\051)
334 W( first_in_list\050 \050LIST\051 list, \050NODE\051 element \051)SH
10 /Helvetica AF
7232 66781 MT
(Returns TRUE if the head of the)SH
/Courier SF
21739 XM
(LIST)SH
/Helvetica SF
24417 XM
(is the specified)SH
/Courier SF
31309 XM
(NODE)SH
/Helvetica-Bold SF
33987 XM
(element)SH
/Helvetica SF
(.)SH
ES
%%Page: 13 14 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
22343 XM
(The listPack List Manipulation Package)SH
53968 XM
(13)SH
12 SS 
8280 8075 MT
(3.7.5. \050int\051)
334 W( last_in_list\050 \050LIST\051 list, \050NODE\051 element \051)SH
10 /Helvetica AF
9392 9501 MT
(Returns TRUE if the tail of the)SH
/Courier SF
22953 XM
(LIST)SH
/Helvetica SF
25631 XM
(is the specified)SH
/Courier SF
32523 XM
(NODE)SH
/Helvetica-Bold SF
35201 XM
(element)SH
/Helvetica SF
(.)SH
14 /Helvetica-Bold AF
8280 13402 MT
(3.8. Tagging)
389 W( Elements in Lists)SH
10 /Helvetica-Oblique AF
9392 14828 MT
(listPack)SH
/Helvetica SF
13150 XM
(reserves a field in the)35 W
/Courier SF
23107 XM
(LISTNODE)SH
/Helvetica SF
28220 XM
(header structure for tagging elements.  This)
35 W( tag can then be)34 W
8280 16254 MT
(used for searching and)
22 W( sorting.  Elements may be inserted into)23 W
/Courier SF
36543 XM
(LIST)SH
/Helvetica SF
(s with the tag value set, or the value)23 W
8280 17680 MT
(may be set while it is in a)402 W
/Courier SF
22889 XM
(LIST)SH
/Helvetica SF
(. Unspecified)
1081 W( tag values are assigned the defined constant)401 W
8 SS 
8280 19106 MT
(LIST_DEFAULT_VALUE)SH
10 SS 
(.)SH
12 /Helvetica-Bold AF
8280 22861 MT
(3.8.1. \050NODE\051)
334 W( add_to_head_val\050 \050LIST\051 list, \050NODE\051 element, \050int\051 value \051)SH
10 /Helvetica AF
9392 24287 MT
(The)SH
/Helvetica-Bold SF
11638 XM
(element)SH
/Helvetica SF
15940 XM
(is added before the head of the specified)245 W
/Helvetica-Bold SF
36245 XM
(list)SH
/Helvetica SF
(, thus becoming the new head.  For)245 W
8280 25713 MT
(convenience,)SH
/Helvetica-Bold SF
14450 XM
(add_to_head_value)SH
/Helvetica SF
(\050\051 returns \050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
31409 XM
(element)SH
/Helvetica SF
(.)SH
12 /Helvetica-Bold AF
8280 29468 MT
(3.8.2. \050NODE\051)
334 W( add_to_tail_val\050 \050LIST\051 list, \050NODE\051 element, \050int\051 value \051)SH
10 /Helvetica AF
9392 30894 MT
(The)SH
/Helvetica-Bold SF
11434 XM
(element)SH
/Helvetica SF
15531 XM
(is added after the tail of the specified)40 W
/Helvetica-Bold SF
32416 XM
(list)SH
/Helvetica SF
(, thus becoming the new tail.  For convenience,)40 W
/Helvetica-Bold SF
8280 32320 MT
(add_to_tail_val)SH
/Helvetica SF
(\050\051 returns \050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
23183 XM
(element)SH
/Helvetica SF
(.)SH
12 /Helvetica-Bold AF
8280 36075 MT
(3.8.3. \050NODE\051)
334 W( insert_list_val\050 \050LIST\051 list, \050NODE\051 element, \050int\051 value \051)SH
10 /Helvetica AF
9392 37501 MT
(The tag value of the)159 W
/Helvetica-Bold SF
19304 XM
(element)SH
/Helvetica SF
23520 XM
(is assigned the \050)159 W
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
33848 XM
(value)SH
/Helvetica SF
(, and is)
159 W( inserted into the specified list in)160 W
778 50 54302 37701 UL
8280 38927 MT
(ascending order of tag values.  \050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
25576 XM
(element)SH
/Helvetica SF
29633 XM
(is returned to the user.)SH
7170 50 8280 39127 UL
9392 41494 MT
(This function assumes that the elements in \050)128 W
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
32991 XM
(list)SH
/Helvetica SF
34842 XM
(are already sorted in ascending order of)
128 W( tag)127 W
8280 42920 MT
(values. Otherwise,)
278 W( the resulting position of the added)SH
/Helvetica-Bold SF
32348 XM
(element)SH
/Helvetica SF
36405 XM
(is undefined.)SH
12 /Helvetica-Bold AF
8280 46675 MT
(3.8.4. \050NODE\051)
334 W( get_list_val\050 \050LIST\051 list, \050int\051 value \051)SH
10 /Helvetica AF
9392 48101 MT
(The first element in the)39 W
/Helvetica-Bold SF
20036 XM
(list)SH
/Helvetica SF
21798 XM
(with the specified)
39 W( tag value is returned to the caller.  If no element had the)40 W
8280 49527 MT
(proper tag value,)SH
8 SS 
16062 XM
(NULL)SH
10 SS 
18386 XM
(is returned.)SH
12 /Helvetica-Bold AF
8280 53282 MT
(3.8.5. \050NODE\051)
334 W( delete_list_val\050 \050LIST\051 list, \050int\051 value \051)SH
10 /Helvetica AF
9392 54708 MT
(The first element in the)31 W
/Helvetica-Bold SF
19996 XM
(list)SH
/Helvetica SF
21750 XM
(with the specified tag value is returned to)
31 W( the caller, and it is removed from)30 W
8280 56134 MT
(the)SH
/Helvetica-Bold SF
9948 XM
(list)SH
/Helvetica SF
(. If)
278 W( no element had the proper tag value,)SH
8 SS 
29682 XM
(NULL)SH
10 SS 
32006 XM
(is returned.)SH
12 /Helvetica-Bold AF
8280 59889 MT
(3.8.6. \050int\051)
334 W( get_head_val\050 \050LIST\051 list \051)SH
10 /Helvetica AF
9392 61315 MT
(The tag value of the head of the)12 W
/Helvetica-Bold SF
23887 XM
(list)SH
/Helvetica SF
25622 XM
(is returned)
12 W( to the caller.  If the)13 W
/Courier SF
39232 XM
(LIST)SH
/Helvetica SF
41923 XM
(is empty,)13 W
8 SS 
46228 XM
(LIST_DEFAULT_VALUE)SH
10 SS 
8280 62741 MT
(is returned.)SH
12 /Helvetica-Bold AF
8280 66496 MT
(3.8.7. \050int\051)
334 W( get_tail_val\050 \050LIST\051 list \051)SH
10 /Helvetica AF
9392 67922 MT
(The tag value of the)157 W
/Helvetica-Bold SF
19294 XM
(list)SH
/Helvetica SF
21174 XM
(tail is returned to the caller.)
157 W( If)
591 W( the)156 W
/Courier SF
37647 XM
(LIST)SH
/Helvetica SF
40481 XM
(is empty,)156 W
8 SS 
45072 XM
(LIST_DEFAULT_VALUE)SH
10 SS 
54358 XM
(is)SH
8280 69348 MT
(returned.)SH
ES
%%Page: 14 15 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(14)SH
20183 XM
(The listPack List Manipulation Package)SH
46694 XM
(28 June 1988)SH
12 SS 
6120 8075 MT
(3.8.8. \050int\051)
334 W( get_node_val\050 \050LIST\051 list, \050NODE\051 element \051)SH
10 /Helvetica AF
7232 9501 MT
(The tag value of the first element in the)27 W
/Helvetica-Bold SF
25040 XM
(list)SH
/Helvetica SF
26790 XM
(which matches \050)27 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
37106 XM
(element)SH
/Helvetica SF
41191 XM
(is returned to the caller.  If)28 W
6120 10927 MT
(the)SH
/Courier SF
7788 XM
(LIST)SH
/Helvetica SF
10466 XM
(is empty or there was no match,)SH
8 SS 
24916 XM
(LIST_DEFAULT_VALUE)SH
10 SS 
34046 XM
(is returned.)SH
12 /Helvetica-Bold AF
6120 14682 MT
(3.8.9. \050int\051)
334 W( get_list_pos_val\050 \050LIST\051 list, \050int\051 pos \051)SH
8 /Helvetica AF
23393 15757 MT
(th)SH
10 SS 
7232 16108 MT
(The tag value)
421 W( of the \050)420 W
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
21615 XM
(pos)SH
/Helvetica SF
24758 XM
(element in the list is returned.  If)420 W
/Helvetica-Bold SF
42569 XM
(pos)SH
/Helvetica SF
45045 XM
(is out of range,)420 W
8 SS 
6120 17534 MT
(LIST_DEFAULT_VALUE)SH
10 SS 
15250 XM
(is returned.)SH
12 /Helvetica-Bold AF
6120 21289 MT
(3.8.10. \050int\051)
334 W( change_list_val\050 \050LIST\051 list, \050NODE\051 element, \050int\051 new_val \051)SH
10 /Helvetica AF
7232 22715 MT
(The tag value of the first element in the list which matches \050)214 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
39314 XM
(element)SH
/Helvetica SF
43585 XM
(is changed to)
214 W( \050)215 W
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
6120 24141 MT
(new_val)SH
/Helvetica SF
(. The)
572 W( old value)
147 W( is returned, unless there was no match.  In that case)146 W
8 SS 
42922 XM
(LIST_DEFAULT_VALUE)SH
10 SS 
52198 XM
(is)SH
6120 25567 MT
(returned.)SH
14 /Helvetica-Bold AF
6120 29468 MT
(3.9. Applying)
389 W( Functions to Lists)SH
10 /Helvetica AF
7232 30894 MT
(The)SH
/Helvetica-Oblique SF
9375 XM
(C)SH
/Helvetica SF
10517 XM
(language provides the capability to pass functions as)
142 W( parameters to other functions.  This is)143 W
6120 32320 MT
(utilized by)37 W
/Helvetica-Oblique SF
10918 XM
(listPack)SH
/Helvetica SF
14678 XM
(to allow users to write list processing functions.  Rather than the user walking through)36 W
6120 33746 MT
(each)SH
/Courier SF
8613 XM
(LIST)SH
/Helvetica SF
11338 XM
(\050e.g. with get_list_pos\050\051\051 and passing each returned)
47 W( element to some function, the function is)48 W
6120 35172 MT
(passed to)SH
/Helvetica-Oblique SF
10734 XM
(listPack)SH
/Helvetica SF
14457 XM
(and it will call the user's function.)SH
7232 37739 MT
(List processing always begins at the head of the)SH
/Courier SF
28799 XM
(LIST)SH
/Helvetica SF
(, and proceeds towards the tail.)SH
/Helvetica-Bold SF
7232 40306 MT
(Warning:)SH
/Helvetica SF
12207 XM
(It is extremely dangerous to add or remove elements from a)43 W
/Courier SF
39413 XM
(LIST)SH
/Helvetica-Oblique SF
42134 XM
(while a function)
43 W( is being)42 W
45688 50 7232 40506 UL
6120 41732 MT
(applied to it)134 W
/Helvetica SF
(.)SH
/Helvetica-Oblique SF
12604 XM
(listPack)SH
/Helvetica SF
16461 XM
(can handle most of the common cases that occur when that happens, however)134 W
5660 50 6120 41932 UL
6120 43158 MT
(such code should be rigorously exercised.)SH
12 /Helvetica-Bold AF
6120 46913 MT
(3.9.1. \050int\051)
334 W( for_all_list\050 \050LIST\051 list, \050NODE\051 ptr, \050PFI\051 func \051)SH
10 /Helvetica AF
7232 48339 MT
(The user has some function)168 W
/Helvetica-Bold SF
20689 XM
(\050int\051 func\050 \050NODE\051 ptr, \050NODE\051 element \051)167 W
/Helvetica SF
41414 XM
(which he wishes to have)167 W
6120 49765 MT
(called with every element)
141 W( in the \050)142 W
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
24683 XM
(list)SH
/Helvetica SF
(.)SH
/Helvetica-Bold SF
27246 XM
(for_all_list)SH
/Helvetica SF
(\050\051 will invoke)142 W
/Helvetica-Bold SF
38452 XM
(func\050\051)SH
/Helvetica SF
41649 XM
(for the user \050as often as)142 W
6120 51191 MT
(necessary\051, total)
33 W( up the returned values, and return that total to the user.  There are examples of the use)32 W
6120 52617 MT
(of)SH
/Helvetica-Bold SF
7232 XM
(for_all_list)SH
/Helvetica SF
(\050\051 on pages 25 and 27.)SH
7232 55184 MT
(\050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
10631 XM
(ptr)SH
/Helvetica SF
12297 XM
(is a pointer to whatever the user wishes to pass to the function \050i.e. it is)
55 W( a free pointer with)56 W
6120 56610 MT
(which the user may play\051.  There are two related form of)SH
/Helvetica-Bold SF
31185 XM
(for_all_list)SH
/Helvetica SF
(, they are:)SH
/Courier-Bold SF
8520 58415 MT
(\050int\051 for_all_2list\050 \050LIST\051 list, \050NODE\051 ptr, ptr2, \050PFI\051 func \051)SH
8520 59546 MT
(\050int\051 for_all_3list\050 \050LIST\051 list, \050NODE\051 ptr, ptr2, ptr3, \050PFI\051 func \051)SH
/Helvetica SF
7232 62113 MT
(These provide)
1 W( one or two additional pointers for the user's convenience.  In all forms, the pointer will be)SH
6120 63539 MT
(passed to)SH
/Helvetica-Bold SF
10734 XM
(func\050\051)SH
/Helvetica SF
13789 XM
(in order, followed by a \050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
27193 XM
(element)SH
/Helvetica SF
(.)SH
ES
%%Page: 15 16 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
22343 XM
(The listPack List Manipulation Package)SH
53968 XM
(15)SH
12 SS 
8280 8075 MT
(3.9.2. \050NODE\051)
334 W( search_list\050 \050LIST\051 list, \050NODE\051 ptr, \050PFI\051 func \051)SH
10 SS 
9392 9501 MT
(search_list)SH
/Helvetica SF
(\050\051 is useful for finding an element in)
65 W( a)66 W
/Courier SF
31878 XM
(LIST)SH
/Helvetica SF
34622 XM
(which matches some criteria.  Therefore, The)66 W
8280 10927 MT
(user writes some function)22 W
/Helvetica-Bold SF
19983 XM
(\050int\051 func\050 \050NODE\051 ptr, \050NODE\051 element \051)22 W
/Helvetica SF
39546 XM
(which returns boolean TRUE when)21 W
8280 12353 MT
(it matches the criteria on some element in the specified list.  Processing of the list stops after the first)123 W
8280 13779 MT
(TRUE return, and the element on which)93 W
/Helvetica-Bold SF
26772 XM
(func\050\051)SH
/Helvetica SF
29920 XM
(succeeded is returned.)92 W
8 SS 
40960 XM
(NULL)SH
10 SS 
43376 XM
(is returned if)92 W
/Helvetica-Bold SF
49432 XM
(func\050\051)SH
/Helvetica SF
52579 XM
(never)SH
8280 15205 MT
(succeeded. An)
278 W( example of)SH
/Helvetica-Bold SF
20620 XM
(search_list)SH
/Helvetica SF
(\050\051 may be found on page 27.)SH
12 /Helvetica-Bold AF
8280 18960 MT
(3.9.3. \050LIST\051)
334 W( list_equal\050 \050LIST\051 list1, \050LIST\051 list2, \050PFI\051 func \051)SH
10 /Helvetica AF
9392 20386 MT
(This function will compare two)114 W
/Courier SF
23577 XM
(LIST)SH
/Helvetica SF
(s, and return a boolean quantity describing)
114 W( whether the two are)115 W
8280 21812 MT
(equivalent.)SH
9392 24379 MT
(\050)SH
/Courier SF
(\050PFI\051)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
13536 XM
(func)SH
/Helvetica SF
16125 XM
(is a function which will be passed one element from each)
200 W( list, and must return the)199 W
8280 25805 MT
(boolean quantity describing their equality.  The elements in each)55 W
/Courier SF
37622 XM
(LIST)SH
/Helvetica SF
40355 XM
(will be passed \050in order\051)
55 W( to)56 W
/Helvetica-Bold SF
52691 XM
(func)SH
/Helvetica SF
(,)SH
8280 27231 MT
(until)SH
/Helvetica-Bold SF
10392 XM
(list_equal\050\051)SH
/Helvetica SF
15949 XM
(determines the lists are not equal.)SH
9392 29798 MT
(If)SH
/Helvetica-Bold SF
10226 XM
(func)SH
/Helvetica SF
12615 XM
(is)SH
8 SS 
13615 XM
(NULL)SH
10 SS 
(,)SH
/Helvetica-Bold SF
16217 XM
(list_equal\050\051)SH
/Helvetica SF
21774 XM
(will simply test that the elements are the same.)SH
/Courier-Bold SF
10680 31603 MT
(int test_records\050)
7200 W( rec1, rec2 \051)
SH( /*)
3000 W( are two records equ)SH
10680 32734 MT
(struct record)
SH( *rec1,)
1200 W( *rec2;)
SH( /*)
10800 W( both are rec pointe)SH
13080 33865 MT
({)SH
13080 34996 MT
(/* We define them to be equivalent iff height and weight are the s)SH
13080 36127 MT
(return \050rec1->height == rec2->height\051 && \050rec1->weight == rec2->we)SH
13080 37258 MT
(})SH
10680 39520 MT
(...)SH
13080 40651 MT
(/* Print the records in the first list, and if the second list is)SH
14880 41782 MT
(not the same, print the records in that list */)SH
13080 42913 MT
(for_all_list\050 rec_list1, stdout, print_record \051;)SH
13080 44044 MT
(if \050! \050list_equal\050 rec_list1, rec_list2, test_records \051\051\051)SH
15480 45175 MT
(for_all_list\050 rec_list1, stdout, print_record \051;)SH
12 /Helvetica-Bold AF
8280 48930 MT
(3.9.4. \050LIST\051)
334 W( eval_list\050 \050LIST\051 list, \050PFI\051 func \051)SH
10 /Helvetica AF
9392 50356 MT
(The tag values of each element in \050)15 W
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
28142 XM
(list)SH
/Helvetica SF
29880 XM
(is set to)15 W
/Helvetica-Bold SF
33649 XM
(func)SH
/Helvetica SF
(\050)SH
/Helvetica-Bold SF
36386 XM
(element)SH
/Helvetica SF
40458 XM
(\051.)SH
/Helvetica-Bold SF
41655 XM
(list)SH
/Helvetica SF
43393 XM
(is returned)
15 W( to the caller for)14 W
8280 51782 MT
(use in such convenient forms as:)SH
/Courier-Bold SF
10680 53587 MT
(sort_list\050 eval_list\050 my_list, my_func \051 \051;)SH
14 /Helvetica-Bold AF
8280 57488 MT
(3.10. Changing)
389 W( the Order of the Elements)SH
10 /Helvetica AF
9392 58914 MT
(Since one of the fundamental tasks of programming)
205 W( entails sorting,)206 W
/Helvetica-Oblique SF
41348 XM
(listPack)SH
/Helvetica SF
45277 XM
(provides primitives to)206 W
8280 60340 MT
(reorder the elements of a list to the user's specifications.)SH
12 /Helvetica-Bold AF
8280 64095 MT
(3.10.1. \050LIST\051)
334 W( reverse_list\050 \050LIST\051 list \051)SH
10 /Helvetica AF
9392 65521 MT
(The order of the elements in the)99 W
/Courier SF
24536 XM
(LIST)SH
/Helvetica SF
27312 XM
(is reversed.  For example, the tail becomes the first element,)98 W
8280 66947 MT
(and the head becomes the last.  \050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
26133 XM
(list)SH
/Helvetica SF
27856 XM
(is return for the convenience of the caller.)SH
ES
%%Page: 16 17 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(16)SH
20183 XM
(The listPack List Manipulation Package)SH
46694 XM
(28 June 1988)SH
12 SS 
6120 8075 MT
(3.10.2. \050LIST\051)
334 W( sort_list\050 \050LIST\051 list \051)SH
10 /Helvetica AF
7232 9501 MT
(The elements of the specified)218 W
/Courier SF
21662 XM
(list)SH
/Helvetica SF
24558 XM
(is sorted in ascending order of their tag values.  The)219 W
/Helvetica-Bold SF
50256 XM
(list)SH
/Helvetica SF
52198 XM
(is)SH
6120 10927 MT
(returned so the user can happily)SH
/Courier-Bold SF
8520 12732 MT
(new = reverse_list\050 sort_list\050 eval_list\050 copy_list\050my_list, flag\051, my)SH
12 /Helvetica-Bold AF
6120 16487 MT
(3.10.3. \050LIST\051)
334 W( sort_list_func\050 \050LIST\051 list, \050PFI\051 func \051)SH
10 /Helvetica AF
7232 17913 MT
(This function will sort a)88 W
/Courier SF
18064 XM
(LIST)SH
/Helvetica SF
20830 XM
(by more complicated criteria than can easily be specified by)
88 W( an integer)87 W
6120 19339 MT
(tag variable.  The user specified function,)74 W
/Helvetica-Bold SF
25147 XM
(func\050 element_a, element_b \051)74 W
/Helvetica SF
(, returns boolean TRUE if they)75 W
6120 20765 MT
(are ordered properly \050i.e. element_a precedes element_b\051 and FALSE otherwise.)
56 W( An)
389 W( example of its use)55 W
6120 22191 MT
(can be found on page 25.)SH
/Helvetica-Bold SF
7232 24758 MT
(sort_list_func)SH
/Helvetica SF
(\050\051 returns \050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
21467 XM
(list)SH
/Helvetica SF
23190 XM
(for the convenience of the user.)SH
/Helvetica-Bold SF
7232 27325 MT
(Note:)SH
/Helvetica SF
10065 XM
(For the sake of efficiency,)SH
/Helvetica-Bold SF
21737 XM
(func\050\051)SH
/Helvetica SF
24792 XM
(should return TRUE if the elements are equivalent.)SH
14 /Helvetica-Bold AF
6120 31226 MT
(3.11. Marking)
389 W( Current Position in a LIST)SH
10 /Helvetica AF
7232 32652 MT
(There is a spare pointer in the)10 W
/Courier SF
20864 XM
(LIST)SH
/Helvetica SF
23552 XM
(header record which can be used to point to a particular place in)
10 W( a)11 W
/Courier SF
6120 34078 MT
(LIST)SH
/Helvetica SF
(. This)
680 W( feature may be used)
201 W( for walking forward or backward along a)200 W
/Courier SF
41672 XM
(LIST)SH
/Helvetica SF
(, doing incremental)200 W
6120 35504 MT
(searches, or loop iteration.)SH
7232 38071 MT
(Note that there is only one)
32 W( such pointer in each)33 W
/Courier SF
28735 XM
(LIST)SH
/Helvetica SF
(. Thus)
344 W( the use of any function which will change)33 W
6120 39497 MT
(that pointer will affect)
1 W( any other software that uses it.  In particular, this means that the)SH
/Helvetica-Bold SF
44475 XM
(loop_through_list)SH
/Helvetica SF
6120 40923 MT
(macro may not be used recursively)
67 W( on the same)68 W
/Courier SF
28291 XM
(list)SH
/Helvetica SF
(. If)
414 W( that is necessary, use the)68 W
/Courier SF
44520 XM
(for_all_list\050\051)SH
/Helvetica SF
6120 42349 MT
(function.)SH
12 /Helvetica-Bold AF
6120 46104 MT
(3.11.1. \050NODE\051)
334 W( get_list_next\050 \050LIST\051 list, \050NODE\051 current \051)SH
10 /Helvetica AF
7232 47530 MT
(This function advances the current)47 W
/Courier SF
23030 XM
(LIST)SH
/Helvetica SF
25754 XM
(element to be the one immediately following \050)46 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
49197 XM
(current)SH
/Helvetica SF
(,)SH
6120 48956 MT
(and that element is returned.)SH
7232 51523 MT
(If)SH
/Helvetica-Bold SF
8153 XM
(current)SH
/Helvetica SF
11963 XM
(is not in \050)88 W
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
19383 XM
(list)SH
/Helvetica SF
(,)SH
8 SS 
21472 XM
(NULL)SH
10 SS 
23884 XM
(is returned.  If)88 W
/Helvetica-Bold SF
30628 XM
(current)SH
/Helvetica SF
34439 XM
(is)SH
8 SS 
35527 XM
(NULL)SH
10 SS 
(, the head of the list becomes the)88 W
6120 52949 MT
(current element, and is returned.)SH
7232 55516 MT
(This function is particularly useful for iterating on two lists simultaneously:)SH
/Courier-Bold SF
8520 57321 MT
(ptr1 = get_list_next\050 list1, NULL \051;)
SH( /*)
6600 W( get first element o)SH
8520 58452 MT
(ptr2 = get_list_next\050 list2, NULL \051;)
SH( /*)
6600 W( get first element o)SH
8520 60714 MT
(while \050 ptr1 != NULL && ptr2 != NULL \051 {)
SH( /*)
4200 W( loop on each elemen)SH
10920 62976 MT
(printf\050 "Nodes %x and %x\134n", ptr1, ptr2 \051;  /* code to deal with e)SH
10920 65238 MT
(ptr1 = get_list_next\050 list1, ptr1 \051;)
SH( /*)
4200 W( now get next from l)SH
10920 66369 MT
(ptr2 = get_list_next\050 list2, ptr2 \051;)
SH( /*)
4200 W( now get next from l)SH
10920 67500 MT
(})SH
ES
%%Page: 17 18 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
22343 XM
(The listPack List Manipulation Package)SH
53968 XM
(17)SH
12 SS 
8280 8075 MT
(3.11.2. \050NODE\051)
334 W( get_list_prev\050 \050LIST\051 list, \050NODE\051 current \051)SH
10 /Helvetica AF
9392 9501 MT
(This function retreats)
75 W( the current)74 W
/Courier SF
24437 XM
(LIST)SH
/Helvetica SF
27189 XM
(element to be the one immediately preceding \050)74 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
51357 XM
(current)SH
/Helvetica SF
(,)SH
8280 10927 MT
(and that element is returned.)SH
9392 13494 MT
(If)SH
/Helvetica-Bold SF
10358 XM
(current)SH
/Helvetica SF
14214 XM
(is not in \050)133 W
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
21814 XM
(list)SH
/Helvetica SF
(,)SH
8 SS 
23948 XM
(NULL)SH
10 SS 
26405 XM
(is returned.  If)133 W
/Helvetica-Bold SF
33329 XM
(current)SH
/Helvetica SF
37185 XM
(is)SH
8 SS 
38318 XM
(NULL)SH
10 SS 
(, the tail of the list becomes the)133 W
8280 14920 MT
(current element, and is returned.)SH
12 /Helvetica-Bold AF
8280 18675 MT
(3.11.3. \050NODE\051)
334 W( get_list_next_func\050 \050LIST\051 list, \050NODE\051 current, \050NODE\051 ptr, \050PFI\051)SH
12284 20101 MT
(func \051)SH
10 /Helvetica AF
9392 21527 MT
(This function advances the current)25 W
/Courier SF
25080 XM
(LIST)SH
/Helvetica SF
27783 XM
(element to be)
25 W( the first one in \050)24 W
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
44217 XM
(list)SH
/Helvetica SF
45964 XM
(after \050)24 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
51635 XM
(current)SH
/Helvetica SF
8280 22953 MT
(upon which the function)SH
/Helvetica-Bold SF
19064 XM
(func)SH
/Helvetica SF
21453 XM
(returns boolean)SH
8 SS 
28679 XM
(TRUE)SH
10 SS 
(. That)
278 W( element is returned.)SH
9392 25520 MT
(If)SH
/Helvetica-Bold SF
10376 XM
(current)SH
/Helvetica SF
14249 XM
(is not in \050)150 W
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
21917 XM
(list)SH
/Helvetica SF
(,)SH
8 SS 
24068 XM
(NULL)SH
10 SS 
26542 XM
(is returned.  If)150 W
/Helvetica-Bold SF
33534 XM
(current)SH
/Helvetica SF
37407 XM
(is)SH
8 SS 
38557 XM
(NULL)SH
10 SS 
(, processing starts with the first)150 W
8280 26946 MT
(element.)SH
9392 29513 MT
(\050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
12816 XM
(ptr)SH
/Helvetica SF
14507 XM
(is passed to the function,)80 W
/Helvetica-Bold SF
26247 XM
(func)SH
/Helvetica SF
28716 XM
(as a free parameter.  Hence the signature)
80 W( for)79 W
/Helvetica-Bold SF
49666 XM
(func)SH
/Helvetica SF
52134 XM
(should)SH
8280 30939 MT
(look like:)SH
/Courier-Bold SF
10680 32744 MT
(int my_function\050)
2400 W( parameter, list_element \051)SH
10680 33875 MT
(NODE parameter,)
1800 W( list_element;)
SH( /*)
9000 W( or any other pointe)SH
13080 35006 MT
({)SH
13080 36137 MT
(})SH
/Helvetica SF
9392 38704 MT
(This function is useful for processing selected elements in a)SH
/Courier SF
36070 XM
(LIST)SH
/Helvetica SF
(:)SH
/Courier-Bold SF
10680 40509 MT
(ptr = NULL;)SH
10680 41640 MT
(while \050\050ptr = get_list_next_func\050 list, ptr, NULL, my_function \051\051 != N)SH
15480 43902 MT
(... /*)
7200 W( processs each element that my_function foun)SH
15480 46164 MT
(})SH
12 /Helvetica-Bold AF
8280 49919 MT
(3.11.4. loop_through_list\050)
334 W( \050LIST\051 list, \050type\051 pointer, type \051)SH
10 /Helvetica AF
9392 51345 MT
(This macro is provided by)93 W
/Helvetica-Oblique SF
21527 XM
(listPack)SH
/Helvetica SF
25343 XM
(to serve as a)93 W
/Helvetica-Bold SF
31718 XM
(for)SH
/Helvetica SF
33422 XM
(loop in normal programming.  A)93 W
/Helvetica-Oblique SF
48207 XM
(C)SH
/Helvetica SF
(-language)SH
/Helvetica-Bold SF
53747 XM
(for)SH
/Helvetica SF
8280 52771 MT
(statement is generated which will iterate)SH
/Helvetica-Bold SF
26287 XM
(pointer)SH
/Helvetica SF
29954 XM
(through the elements in \050)SH
/Courier SF
(LIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
44026 XM
(list)SH
/Helvetica SF
(.)SH
9392 55338 MT
(The last parameter is)
76 W( a type specification, and is used by the macro to generate the proper recasting)75 W
8280 56764 MT
(instructions to make both the)SH
/Helvetica-Oblique SF
21342 XM
(C)SH
/Helvetica SF
(-compiler and)SH
/Helvetica-Oblique SF
28399 XM
(lint\0501\051)SH
/Helvetica SF
31177 XM
(happy.)SH
/Courier-Bold SF
10680 58569 MT
(struct foo {)SH
13080 59700 MT
(int x, y;)SH
10680 60831 MT
(} * temp;)
SH( /*temp)
18000 W( is a pointer */)SH
10680 61962 MT
(LIST my_list;)SH
10680 64224 MT
(...)SH
34680 66486 MT
(/* for each pointer in the lis)SH
10680 67617 MT
(loop_through_list\050 my_list, temp, struct foo * \051 {)SH
34680 68748 MT
(/* process the element */)SH
13080 69879 MT
(printf\050 "%d, %d\134n", temp->x, temp->y \051;)SH
13080 71010 MT
(})SH
ES
%%Page: 18 19 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(18)SH
20183 XM
(The listPack List Manipulation Package)SH
46694 XM
(28 June 1988)SH
14 SS 
6120 8221 MT
(3.12. Stacks)
389 W( and Queues)SH
10 /Helvetica AF
7232 9647 MT
(The data structure that)108 W
/Helvetica-Oblique SF
18003 XM
(listPack)SH
/Helvetica SF
21834 XM
(provides can more properly be described as a)108 W
/Helvetica-Oblique SF
43262 XM
(deck)SH
/Helvetica SF
(. Like)
494 W( a)
108 W( deck of)109 W
6120 11073 MT
(cards, we can add cards to either end of the deck.)SH
7232 13640 MT
(There are similar, but more limited, structures which are convenient to use,)
207 W( and)206 W
/Helvetica-Oblique SF
45212 XM
(listPack)SH
/Helvetica SF
49141 XM
(provides)SH
6120 15066 MT
(routines which will manipulate those structures for you.)SH
7232 17633 MT
(The first data structure is a)10 W
/Helvetica-Oblique SF
19408 XM
(stack)SH
/Helvetica SF
(. On)
300 W( such a structure we will allow two operations - add an element to)11 W
6120 19059 MT
(the top \050)217 W
/Helvetica-Oblique SF
(push)SH
/Helvetica SF
(\051, and remove an element from the top)
217 W( \050)216 W
/Helvetica-Oblique SF
(pop)SH
/Helvetica SF
(\051. The)
710 W( other is a)216 W
/Helvetica-Oblique SF
42268 XM
(queue)SH
/Helvetica SF
(, and two similar)216 W
6120 20485 MT
(operations may be performed - add an element)
104 W( to the tail \050)105 W
/Helvetica-Oblique SF
(enqueue)SH
/Helvetica SF
(\051, and remove an element from the)105 W
6120 21911 MT
(head \050)SH
/Helvetica-Oblique SF
(dequeue)SH
/Helvetica SF
(\051. It)
278 W( should be apparent that we can use a)SH
/Courier SF
31803 XM
(LIST)SH
/Helvetica SF
34481 XM
(to model these abstract data types.)SH
7232 24478 MT
(The)SH
/Helvetica-Oblique SF
9319 XM
(listPack)SH
/Helvetica SF
13128 XM
(stack and queue functions are implemented as macros)
86 W( which redefine standard)85 W
/Helvetica-Oblique SF
49475 XM
(listPack)SH
/Helvetica SF
6120 25904 MT
(functions. The)
604 W( data types,)163 W
/Courier SF
18942 XM
(STACK)SH
/Helvetica SF
22384 XM
(and)SH
/Courier SF
24494 XM
(QUEUE)SH
/Helvetica SF
(, are provided to allow tools like)164 W
/Helvetica-Oblique SF
42870 XM
(lint\0501\051)SH
/Helvetica SF
45812 XM
(to perform their)164 W
6120 27330 MT
(type-checking functions.  These macros are provided to the user concurrently with all)36 W
/Helvetica-Oblique SF
44381 XM
(listPack)SH
/Helvetica SF
48140 XM
(definitions.)SH
6120 28756 MT
(The user may use standard)149 W
/Helvetica-Oblique SF
19315 XM
(listPack)SH
/Helvetica SF
23187 XM
(functions on stacks and queues, but that)
149 W( is not considered good)150 W
6120 30182 MT
(style.)SH
12 /Helvetica-Bold AF
6120 33937 MT
(3.12.1. \050STACK\051)
334 W( make_stack\050\051)SH
10 SS 
7232 35363 MT
(make_stack)SH
/Helvetica SF
(\050\051 simply creates a new)282 W
/Courier SF
24870 XM
(STACK)SH
/Helvetica SF
28430 XM
(and returns a)
282 W( pointer to it.  The value returned by)281 W
/Helvetica-Bold SF
6120 36789 MT
(make_stack)SH
/Helvetica SF
(\050\051)SH
/Helvetica-Bold SF
12734 XM
(must)SH
/Helvetica SF
15401 XM
(be saved by the caller in order to use that stack with subsequent stack functions.)SH
12 /Helvetica-Bold AF
6120 40544 MT
(3.12.2. free_stack\050)
334 W( \050STACK\051 stack, \050int\051 flag \051)SH
10 SS 
7232 41970 MT
(free_stack)SH
/Helvetica SF
(\050\051 deallocates the storage needed for a stack.  After a)
370 W( stack has been passed to)371 W
/Helvetica-Bold SF
6120 43396 MT
(free_stack)SH
/Helvetica SF
(\050\051 it may not be used in any subsequent stack functions.)SH
7232 45963 MT
(\050)SH
/Courier SF
(STACK)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
11252 XM
(stack)SH
/Helvetica SF
14163 XM
(is the stack which is to be freed.)
76 W( \050)429 W
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
32394 XM
(flag)SH
/Helvetica SF
34525 XM
(may be either)75 W
8 SS 
41086 XM
(AND_NODES)SH
10 SS 
46420 XM
(or)SH
8 SS 
47662 XM
(NOT_NODES)SH
10 SS 
(.)SH
8 SS 
6120 47389 MT
(AND_NODES)SH
10 SS 
11637 XM
(indicates that freeing the storage used by the elements themselves is)
258 W( requested, while)259 W
8 SS 
6120 48815 MT
(NOT_NODES)SH
10 SS 
11574 XM
(indicates that should not be done.)
196 W( Warning:)668 W
8 SS 
33401 XM
(AND_NODES)SH
10 SS 
38855 XM
(may only be used if the stack)195 W
4001 50 28454 49015 UL
6120 50241 MT
(elements were allocated with the extended functions provided by the memory management)
17 W( package \050see)18 W
6120 51667 MT
(page 63\051.)SH
12 /Helvetica-Bold AF
6120 55422 MT
(3.12.3. \050NODE\051)
334 W( push_stack\050 \050STACK\051 stack, \050NODE\051 element \051)SH
10 /Helvetica AF
7232 56848 MT
(This routine places an)
115 W( element onto the top of the specified)114 W
/Courier SF
34948 XM
(STACK)SH
/Helvetica SF
(. The)
506 W( element is returned to the)114 W
6120 58274 MT
(caller for the sake of convenience.)SH
12 /Helvetica-Bold AF
6120 62029 MT
(3.12.4. \050NODE\051)
334 W( pop_stack\050 \050STACK\051 stack \051)SH
10 /Helvetica AF
7232 63455 MT
(The routine removes the element on the top of the specified)5 W
/Courier SF
33968 XM
(STACK)SH
/Helvetica SF
(, and returns a pointer to it.  If)6 W
/Helvetica-Bold SF
50363 XM
(stack)SH
/Helvetica SF
6120 64881 MT
(was empty,)SH
/Helvetica-Bold SF
11455 XM
(pop_stack)SH
/Helvetica SF
(\050\051 will return)SH
8 SS 
21901 XM
(NULL)SH
10 SS 
(.)SH
ES
%%Page: 19 20 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
22343 XM
(The listPack List Manipulation Package)SH
53968 XM
(19)SH
12 SS 
8280 8075 MT
(3.12.5. \050NODE\051)
334 W( top_of_stack\050 \050STACK\051 stack \051)SH
10 /Helvetica AF
9392 9501 MT
(A pointer to the element on the top of \050)161 W
/Courier SF
(STACK)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
31678 XM
(stack)SH
/Helvetica SF
34673 XM
(is returned, but the element is not removed.)160 W
/Helvetica-Bold SF
8280 10927 MT
(top_of_stack)SH
/Helvetica SF
(\050\051 will return)SH
8 SS 
19948 XM
(NULL)SH
10 SS 
22272 XM
(if)SH
/Helvetica-Bold SF
23050 XM
(stack)SH
/Helvetica SF
25885 XM
(was empty.)SH
12 /Helvetica-Bold AF
8280 14682 MT
(3.12.6. \050int\051)
334 W( height_of_stack\050 \050STACK\051 stack \051)SH
10 SS 
9392 16108 MT
(height_of_stack)SH
/Helvetica SF
(\050\051 returns the number of elements on)
96 W( \050)97 W
/Courier SF
(STACK)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
38226 XM
(stack)SH
/Helvetica SF
(. A)
472 W( return of zero indicates the)97 W
8280 17534 MT
(stack was empty.)SH
12 /Helvetica-Bold AF
8280 21289 MT
(3.12.7. \050int\051)
334 W( stack_empty\050 \050STACK\051 stack \051)SH
10 SS 
9392 22715 MT
(stack_empty)SH
/Helvetica SF
(\050\051 returns boolean TRUE if the \050)SH
/Courier SF
(STACK)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
33010 XM
(stack)SH
/Helvetica SF
35845 XM
(was empty, and boolean FALSE otherwise.)SH
14 /Helvetica-Bold AF
8280 26616 MT
(3.13. Queue)
389 W( Functions)SH
12 SS 
8280 30371 MT
(3.13.1. \050QUEUE\051)
334 W( make_queue\050\051)SH
10 SS 
9392 31797 MT
(make_queue)SH
/Helvetica SF
(\050\051 simply creates a new)258 W
/Courier SF
27297 XM
(QUEUE)SH
/Helvetica SF
30832 XM
(and returns a pointer to it.  The value returned by)257 W
/Helvetica-Bold SF
8280 33223 MT
(make_queue)SH
/Helvetica SF
(\050\051)SH
/Helvetica-Bold SF
15282 XM
(must)SH
/Helvetica SF
17949 XM
(be saved by the caller in order to use that)SH
/Courier SF
36570 XM
(QUEUE)SH
/Helvetica SF
39848 XM
(with subsequent queue functions.)SH
12 /Helvetica-Bold AF
8280 36978 MT
(3.13.2. free_queue\050)
334 W( \050QUEUE\051 queue, \050int\051 flag \051)SH
10 SS 
9392 38404 MT
(free_queue)SH
/Helvetica SF
(\050\051 deallocates the storage needed for)
255 W( a)256 W
/Courier SF
33968 XM
(QUEUE)SH
/Helvetica SF
(. After)
790 W( a)256 W
/Courier SF
42050 XM
(QUEUE)SH
/Helvetica SF
45584 XM
(has been passed to)256 W
/Helvetica-Bold SF
8280 39830 MT
(free_queue)SH
/Helvetica SF
(\050\051 it may not be used in any subsequent queue functions.)SH
9392 42397 MT
(\050)SH
/Courier SF
(QUEUE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
13366 XM
(queue)SH
/Helvetica SF
16619 XM
(is the queue)
30 W( which is to be freed.  \050)29 W
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
34830 XM
(flag)SH
/Helvetica SF
36915 XM
(may be either)29 W
8 SS 
43338 XM
(AND_NODES)SH
10 SS 
48626 XM
(or)SH
8 SS 
49822 XM
(NOT_NODES)SH
10 SS 
(.)SH
8 SS 
8280 43823 MT
(AND_NODES)SH
10 SS 
13797 XM
(indicates that freeing the storage used by the elements themselves is)
258 W( requested, while)259 W
8 SS 
8280 45249 MT
(NOT_NODES)SH
10 SS 
13708 XM
(indicates that)
170 W( should not be done.  Warning:)169 W
8 SS 
35297 XM
(AND_NODES)SH
10 SS 
40725 XM
(may only be used if the queue)169 W
4001 50 30402 45449 UL
8280 46675 MT
(elements were allocated with the extended functions provided by the memory management)
17 W( package \050see)18 W
8280 48101 MT
(page 63\051.)SH
12 /Helvetica-Bold AF
8280 51856 MT
(3.13.3. \050NODE\051)
334 W( enqueue\050 \050QUEUE\051 queue, \050NODE\051 element \051)SH
10 /Helvetica AF
9392 53282 MT
(This routine places \050)75 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
21706 XM
(element)SH
/Helvetica SF
25838 XM
(after the end of the specified)75 W
/Helvetica-Bold SF
39185 XM
(queue)SH
/Helvetica SF
(. The)
426 W( element is returned to)74 W
8280 54708 MT
(the caller for the sake of convenience.)SH
12 /Helvetica-Bold AF
8280 58463 MT
(3.13.4. \050NODE\051)
334 W( dequeue\050 \050QUEUE\051 queue \051)SH
10 /Helvetica AF
9392 59889 MT
(The routine removes the element at the)
8 W( beginning of the specified)9 W
/Helvetica-Bold SF
38834 XM
(queue)SH
/Helvetica SF
(, and returns it to the caller.  If)9 W
8280 61315 MT
(the)SH
/Courier SF
9948 XM
(QUEUE)SH
/Helvetica SF
13226 XM
(was empty,)SH
/Helvetica-Bold SF
18561 XM
(dequeue)SH
/Helvetica SF
(\050\051 will return)SH
8 SS 
28173 XM
(NULL)SH
10 SS 
(.)SH
12 /Helvetica-Bold AF
8280 65070 MT
(3.13.5. \050NODE\051)
334 W( head_of_queue\050 \050QUEUE\051 queue \051)SH
10 /Helvetica AF
9392 66496 MT
(A pointer to the element at the beginning of \050)252 W
/Courier SF
(QUEUE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
35257 XM
(queue)SH
/Helvetica SF
38732 XM
(is returned,)
252 W( but the element is not)251 W
8280 67922 MT
(removed.)SH
/Helvetica-Bold SF
13004 XM
(head_of_queue)SH
/Helvetica SF
(\050\051 will return)SH
8 SS 
25839 XM
(NULL)SH
10 SS 
28163 XM
(if the)SH
/Courier SF
30609 XM
(QUEUE)SH
/Helvetica SF
33887 XM
(was empty.)SH
ES
%%Page: 20 21 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(20)SH
20183 XM
(The listPack List Manipulation Package)SH
46694 XM
(28 June 1988)SH
12 SS 
6120 8075 MT
(3.13.6. \050int\051)
334 W( length_of_queue\050 \050QUEUE\051 queue \051)SH
10 SS 
7232 9501 MT
(length_of_queue)SH
/Helvetica SF
(\050\051 returns the number of elements on the specified)26 W
/Helvetica-Bold SF
37866 XM
(queue)SH
/Helvetica SF
(. A)
330 W( return)
26 W( of zero indicates)27 W
6120 10927 MT
(the)SH
/Courier SF
7788 XM
(QUEUE)SH
/Helvetica SF
11066 XM
(was empty.)SH
12 /Helvetica-Bold AF
6120 14682 MT
(3.13.7. \050int\051)
334 W( queue_empty\050 \050QUEUE\051 queue \051)SH
10 SS 
7232 16108 MT
(queue_empty)SH
/Helvetica SF
(\050\051 returns boolean TRUE if the)SH
/Courier SF
27294 XM
(QUEUE)SH
/Helvetica SF
30572 XM
(was empty, and boolean FALSE otherwise.)SH
14 /Helvetica-Bold AF
6120 20009 MT
(3.14. Use)
389 W( and Examples of listPack)SH
10 /Helvetica AF
7232 21435 MT
(The)SH
/Helvetica-Oblique SF
9293 XM
(listPack)SH
/Helvetica SF
13076 XM
(library is installed on all)
60 W( ECE machines in the /usr/local/lib directory, and the include files)59 W
6120 22861 MT
(\050)SH
/Courier SF
(listPack.h)SH
/Helvetica SF
(, etc.\051 are installed in /usr/local/include.)SH
7232 25428 MT
(In order to use the listPack functions the user must have this line in his code:)SH
/Courier-Bold SF
8520 27233 MT
(#include <listPack.h>)SH
/Helvetica SF
7232 29800 MT
(and must compile his code:)SH
/Courier-Bold SF
8520 31605 MT
(prompt> cc my_prog.c ... -I/usr/local/include -llist)SH
ES
%%Page: 21 22 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
22343 XM
(The listPack List Manipulation Package)SH
53968 XM
(21)SH
/Courier-Bold SF
10680 7874 MT
(#include <stdio.h>)SH
10680 9005 MT
(#include <listPack.h>)SH
10680 11267 MT
(char * get_string\050\051)SH
12480 12398 MT
({)SH
12480 13529 MT
(char c;)SH
12480 14660 MT
(char * ptr, * buffer;)SH
12480 15791 MT
(LIST list;)SH
12480 18053 MT
(list = make_list\050\051;)
SH( /*)
16800 W( allocate a LIST)SH
12480 19184 MT
(while \050\050c = getchar\050\051\051 != '\134n'\051)
SH( /*)
9600 W( until a CR/LF)SH
14280 20315 MT
(add_to_tail\050 list, c \051;)
SH( /*)
12600 W( store char in li)SH
12480 22577 MT
(if \050list_empty\050 list \051\051)
SH( /*)
14400 W( return NULL if t)SH
14280 23708 MT
(buffer = NULL;)
SH( /*)
18000 W( string is empty)SH
12480 25970 MT
(else {)
SH( /*)
24600 W( allocate buffer)SH
14280 27101 MT
(buffer = \050char *\051 make_node\050 1 + list_length\050 list \051 \051;)SH
41280 28232 MT
(/* copy chars to bu)SH
14280 29363 MT
(for \050ptr = buffer; ! list_empty\050list\051; *ptr++ = \050char\051 get_from_)SH
14280 31625 MT
(*ptr = '\1340';)
SH( /*)
19200 W( terminate string)SH
14280 32756 MT
(})SH
12480 35018 MT
(free_list\050 list, NOT_NODES \051;)
SH( /*)
10800 W( done with the li)SH
12480 36149 MT
(return buffer;)
SH( /*)
19800 W( return new strin)SH
12480 37280 MT
(})SH
/Helvetica SF
9392 40978 MT
(This simple routine reads character strings from standard input.  It returns a pointer to a buffer)
34 W( which it)35 W
8280 42404 MT
(allocates and fills with the string read.)SH
9392 44971 MT
(The buffer is allocated with)39 W
/Helvetica-Bold SF
21759 XM
(make_node\050\051)SH
/Helvetica SF
(. This)
355 W( will allows us to make copies of the strings later, if we)38 W
8280 46397 MT
(so desire.)SH
9392 48964 MT
(Notice that we can use)58 W
/Courier SF
20076 XM
(LIST)SH
/Helvetica SF
(s to store characters)
58 W( \050or integers\051 rather than pointers to data structures.)59 W
8280 50390 MT
(However, when we free the list, we)
104 W( must not try to free characters \050the)103 W
8 SS 
41018 XM
(NOT_NODES)SH
10 SS 
46379 XM
(parameter\051. In)
484 W( this)103 W
8280 51816 MT
(case the list is empty, so it wouldn't matter, but...)SH
ES
%%Page: 22 23 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(22)SH
20183 XM
(The listPack List Manipulation Package)SH
46694 XM
(28 June 1988)SH
/Courier-Bold SF
8520 7874 MT
(#include <listPack.h>)
SH( /*)
12600 W( for the listPack fuction)SH
8520 11267 MT
(int in_order\050)
1200 W( s1, s2 \051)
SH( /*)
10800 W( does s1 precede s2 ? */)SH
8520 12398 MT
(char *s1, *s2;)
SH( /*)
16800 W( list elements are char p)SH
10320 13529 MT
({)SH
10320 14660 MT
(return strcmp\050 s1, s2 \051 <= 0;)
SH( /*)
6000 W( use the string library f)SH
10320 15791 MT
(} /*)
22800 W( from string\0503\051)SH
8520 19184 MT
(int print_node\050)
1200 W( dummy, s1 \051)
SH( /*)
7800 W( output the string s1 */)SH
8520 20315 MT
(char *dummy, *s1;)
SH( /*)
15000 W( one dummy pointer */)SH
10320 21446 MT
({ /*)
22800 W( and one char pointer */)SH
10320 22577 MT
(puts\050 s1 \051;)
SH( /*)
16800 W( put string onto standard)SH
10320 23708 MT
(return strlen\050 s1 \051;)
SH( /*)
11400 W( return number of charact)SH
10320 24839 MT
(})SH
8520 28232 MT
(main\050\051)SH
10320 29363 MT
({)SH
10320 30494 MT
(LIST list,)
1200 W( copy;)
SH( /*)
12600 W( lists of character strin)SH
10320 31625 MT
(int num_chars;)
1800 W( /*)
13200 W( total number of characte)SH
10320 32756 MT
(char * buffer;)
SH( /*)
15000 W( point to string read in)SH
10320 35018 MT
(list = make_list\050\051;)
SH( /*)
12000 W( create a LIST */)SH
34320 36149 MT
(/* loop until end of string)SH
10320 37280 MT
(while \050\050buffer = get_string\050\051\051 != NULL\051 /* use our string routine *)SH
12120 38411 MT
(add_to_head\050 list, buffer \051;)
SH( /*)
4800 W( put the buffer in the li)SH
10320 40673 MT
(copy = copy_list\050 list, AND_NODES \051;)
SH( /*)
1800 W( make a copy before sorti)SH
10320 42935 MT
(sort_list_func\050 list, in_order \051;)
SH( /*)
3600 W( sort the list using in_o)SH
34320 44066 MT
(/* print each string */)SH
10320 45197 MT
(printf\050 "Here are the strings you typed\134n" \051;)SH
10320 46328 MT
(for_all_list\050 copy, NULL, print_node \051;)SH
34320 47459 MT
(/* print each string in ord)SH
10320 48590 MT
(printf\050 "Here are the strings in alphabetical order\134n" \051;)SH
10320 49721 MT
(num_chars = for_all_list\050 list, NULL, print_node \051;)SH
10320 51983 MT
(printf\050 "Printed %d strings, total of %d characters\134n",)SH
12120 53114 MT
(list_length\050 list \051, num_chars \051;)SH
10320 54245 MT
(})SH
/Helvetica SF
6120 55826 MT
(Here is a program which will read a series of)
34 W( strings, sort them, and print them out in the order read, and)35 W
6120 57252 MT
(in alphabetical)
195 W( order.  It first allocates a)194 W
/Courier SF
25292 XM
(LIST)SH
/Helvetica SF
(, then uses the)194 W
/Helvetica-Bold SF
35306 XM
(get_string\050\051)SH
/Helvetica SF
41278 XM
(routine from the previous)194 W
6120 58678 MT
(example to read and store the strings.)SH
7232 61245 MT
(Then,)SH
/Helvetica-Bold SF
10275 XM
(copy_list\050\051)SH
/Helvetica SF
15762 XM
(is used to make a duplicate.  The)208 W
8 SS 
32378 XM
(AND_NODES)SH
10 SS 
37845 XM
(parameter caused)208 W
/Helvetica-Bold SF
46598 XM
(copy_list\050\051)SH
/Helvetica SF
52086 XM
(to)SH
6120 62671 MT
(create duplicate strings.  We could have modified these duplicates without altering the original strings.)SH
7232 65238 MT
(Next, it used)42 W
/Helvetica-Bold SF
13194 XM
(sort_list_func\050\051)SH
/Helvetica SF
20736 XM
(to re-order the list.  The specified sorting function,)41 W
/Helvetica-Bold SF
43337 XM
(in_order\050\051)SH
/Helvetica SF
(, will return)41 W
8 SS 
6120 66664 MT
(TRUE)SH
10 SS 
8577 XM
(if two strings are properly ordered using the standard string comparison program.)SH
7232 69231 MT
(The call to)80 W
/Helvetica-Bold SF
12363 XM
(for_all_list\050\051)SH
/Helvetica SF
18389 XM
(specifies that each element in the list)
80 W( is to be passed to)81 W
/Helvetica-Bold SF
44090 XM
(print_node\050\051)SH
/Helvetica SF
(. That)440 W
6120 70657 MT
(routine simply prints the passed string.  Note that we do not need the free)
265 W( parameter allowed by)264 W
ES
%%Page: 23 24 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
22343 XM
(The listPack List Manipulation Package)SH
53968 XM
(23)SH
8280 7929 MT
(for_all_list\050\051)SH
/Helvetica SF
(, and pass it a)77 W
8 SS 
20837 XM
(NULL)SH
10 SS 
(.)SH
/Helvetica-Bold SF
23871 XM
(for_all_list\050\051)SH
/Helvetica SF
29894 XM
(has added up the values returned)
77 W( by)78 W
/Helvetica-Bold SF
46945 XM
(print_node\050\051)SH
/Helvetica SF
(, and)78 W
8280 9355 MT
(returned it)
63 W( \050into)62 W
/Helvetica-Bold SF
15470 XM
(num_chars)SH
/Helvetica SF
(\051.)SH
/Helvetica-Bold SF
22096 XM
(list_length\050\051)SH
/Helvetica SF
28103 XM
(is the number of strings in the list.  Finally, these values are)62 W
8280 10781 MT
(printed.)SH
ES
%%Page: 24 25 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(24)SH
20183 XM
(The listPack List Manipulation Package)SH
46694 XM
(28 June 1988)SH
/Courier-Bold SF
8520 7874 MT
(#include <listPack.h>)
SH( /*)
12600 W( for the listPack fuction)SH
8520 11267 MT
(int find_match\050)
1200 W( s1, s2 \051)
SH( /*)
9600 W( does s1 == s2 ? */)SH
8520 12398 MT
(char *s1, *s2;)
SH( /*)
16800 W( list elements are char p)SH
10320 13529 MT
({)SH
10320 14660 MT
(return strcmp\050 s1, s2 \051 == 0;)
SH( /*)
6000 W( use the string library f)SH
10320 15791 MT
(} /*)
22800 W( from string\0503\051)SH
8520 19184 MT
(int find_longest\050)
1200 W( pointer, s1 \051)
SH( /*)
5400 W( output the string s1 */)SH
8520 20315 MT
(char **pointer, *s1;)
SH( /*)
13200 W( one indirect pointer */)SH
10320 21446 MT
({ /*)
22800 W( and one char pointer */)SH
10320 22577 MT
(if \050*pointer == NULL\051)SH
12120 23708 MT
(*pointer = s1;)
SH( /*)
13200 W( handle the initial case)SH
10320 24839 MT
(else if \050strlen\050s1\051 > strlen\050*pointer\051\051)SH
12120 25970 MT
(*pointer = s1;)
SH( /*)
13200 W( s1 is longer */)SH
10320 27101 MT
(})SH
8520 30494 MT
(main\050\051)SH
10320 31625 MT
({)SH
10320 32756 MT
(char * buffer;)
SH( /*)
15000 W( temporary pointer */)SH
10320 33887 MT
(LIST list;)
1200 W( /*)
16200 W( list of character buffer)SH
10320 36149 MT
(list = make_list\050\051;)
SH( /*)
12000 W( create a LIST */)SH
34320 37280 MT
(/* loop until end of string)SH
10320 38411 MT
(while \050\050buffer = get_string\050\051\051 != NULL\051 /* use our string routine *)SH
12120 39542 MT
(add_to_head\050 list, buffer \051;)
SH( /*)
4800 W( put the buffer in the li)SH
10320 41804 MT
(if \050search_list\050 list, "Zimmermann", find_match \051 == NULL\051)SH
12120 42935 MT
(printf\050 "\134"Zimmermann\134" was not in the list" \051;)SH
10320 44066 MT
(else)SH
12120 45197 MT
(printf\050 "\134"Zimmermann\134" was in the list" \051;)SH
10320 47459 MT
(buffer = NULL;)
SH( /*)
22200 W( init buffer)SH
10320 48590 MT
(for_all_list\050 list, &buffer, find_longest \051;)
SH( /*)
4200 W( find longest)SH
10320 49721 MT
(printf\050 "The longest string was \134"%s\134"", buffer \051;  /* and print it)SH
10320 50852 MT
(})SH
/Helvetica SF
6120 52433 MT
(Here is)
128 W( a program which will read a series of strings, search for a specific string, and find the longest)129 W
6120 53859 MT
(string. It)
550 W( first allocates a)136 W
/Courier SF
17996 XM
(LIST)SH
/Helvetica SF
(, then uses)
136 W( the)135 W
/Helvetica-Bold SF
27776 XM
(get_string\050\051)SH
/Helvetica SF
33689 XM
(routine from the first example to read and)135 W
6120 55285 MT
(store the strings.)SH
7232 57852 MT
(Next, it uses)301 W
/Helvetica-Bold SF
13915 XM
(search_list\050\051)SH
/Helvetica SF
20385 XM
(to locate the string "Zimmermann" in the list.  The)
301 W( named function,)302 W
/Helvetica-Bold SF
6120 59278 MT
(find_match\050\051)SH
/Helvetica SF
(, will return)12 W
8 SS 
17268 XM
(TRUE)SH
10 SS 
19737 XM
(if two strings are equivalent)
12 W( using the standard string comparison program.)11 W
6120 60704 MT
(If that occurs,)SH
/Helvetica-Bold SF
12401 XM
(search_list\050\051)SH
/Helvetica SF
18570 XM
(will return that string.  Otherwise, it will return)SH
8 SS 
38742 XM
(NULL)SH
10 SS 
(.)SH
7232 63271 MT
(The call to)65 W
/Helvetica-Bold SF
12318 XM
(for_all_list\050\051)SH
/Helvetica SF
18329 XM
(specifies that each element in the list is to be passed to)65 W
/Helvetica-Bold SF
43844 XM
(find_longest\050\051)SH
/Helvetica SF
(. We)409 W
6120 64697 MT
(use the free parameter allowed by)76 W
/Helvetica-Bold SF
21971 XM
(for_all_list\050\051)SH
/Helvetica SF
(, to pass the address of a character pointer in which we)75 W
6120 66123 MT
(wish to store the address of the longest string.  Thus,)152 W
/Helvetica-Bold SF
31526 XM
(find_longest\050\051)SH
/Helvetica SF
38567 XM
(can use its \050)152 W
/Courier SF
(char **)153 W
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
49531 XM
(pointer)SH
/Helvetica SF
6120 67549 MT
(parameter as both an input and output parameter.)SH
ES
%%Page: 25 26 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
26650 XM
(The alistPack Variant)SH
53968 XM
(25)SH
16 SS 
8280 8366 MT
(4. The)
445 W( alistPack Variant)SH
10 /Helvetica AF
9392 9792 MT
(There is a second group of routines, collectively)
249 W( known as)248 W
/Helvetica-Oblique SF
37779 XM
(alistPack)SH
/Helvetica SF
(, which implement all of the)248 W
8280 11218 MT
(functionality of)SH
/Helvetica-Oblique SF
14950 XM
(listPack)SH
/Helvetica SF
(, but operate on different data structures.  Where)SH
/Helvetica-Oblique SF
40240 XM
(listPack)SH
/Helvetica SF
43963 XM
(provided a generic)
SH( linked)1 W
8280 12644 MT
(list structure,)22 W
/Helvetica-Oblique SF
14270 XM
(alistPack)SH
/Helvetica SF
18570 XM
(provides a generic array list structure.  The functions in the)21 W
/Helvetica-Oblique SF
45034 XM
(alistPack)SH
/Helvetica SF
49334 XM
(module have)21 W
8280 14070 MT
(the same effect as their counterparts in)SH
/Helvetica-Oblique SF
25844 XM
(listPack)SH
/Helvetica SF
(, but differ in efficiency for specific operations.)SH
9392 16637 MT
(Which set of functions you use on a particular data structure,)
10 W( then, depends primarily on the operations)11 W
8280 18063 MT
(which will be done most frequently.  For instance, the)90 W
/Helvetica-Bold SF
32968 XM
(add_to_head)SH
/Helvetica SF
(\050\051 operation on)90 W
/Courier SF
46187 XM
(LIST)SH
/Helvetica SF
(s is exactly)
90 W( as)89 W
8280 19489 MT
(expensive as the)39 W
/Helvetica-Bold SF
16179 XM
(add_to_tail)SH
/Helvetica SF
(\050\051 operation.  However, with)39 W
/Courier SF
34157 XM
(ALIST)SH
/Helvetica SF
(s, the)39 W
/Helvetica-Bold SF
39959 XM
(add_to_ahead)SH
/Helvetica SF
(\050\051 operation is)39 W
/Helvetica-Oblique SF
53191 XM
(very)SH
/Helvetica SF
8280 20915 MT
(expensive, while the)124 W
/Helvetica-Bold SF
17934 XM
(add_to_atail)SH
/Helvetica SF
(\050\051 operation is practically free)
124 W( in most circumstances.  Details on the)123 W
8280 22341 MT
(cost of each operation is noted with its description.)SH
9392 24908 MT
(One other consideration when deciding on)29 W
/Courier SF
28576 XM
(LIST)SH
/Helvetica SF
(s versus)29 W
/Courier SF
35035 XM
(ALIST)SH
/Helvetica SF
(s is memory overhead.)
29 W( In)
337 W( most cases)30 W
/Courier SF
8280 26334 MT
(ALIST)SH
/Helvetica SF
(s will require less memory, and will reduce page)
23 W( faults by keeping the element pointers contiguous)22 W
8 SS 
45130 27409 MT
(3)SH
10 SS 
8280 27760 MT
(in memory.  On the other hand, when)SH
/Courier SF
25066 XM
(ALIST)SH
/Helvetica SF
(s shrink, the storage required does not)SH
45575 XM
(.)SH
14 /Helvetica-Bold AF
8280 31661 MT
(4.1. The)
389 W( ALIST data type)SH
10 /Helvetica-Oblique AF
9392 33087 MT
(alistPack)SH
/Helvetica SF
13749 XM
(provides the single data type)78 W
/Courier SF
27146 XM
(ALIST)SH
/Helvetica SF
(, which is)
78 W( a pointer to a record which contains the data)79 W
8280 34513 MT
(necessary to maintain and manipulate an array list.)SH
9392 37080 MT
(No operations on variables of type)71 W
/Courier SF
25270 XM
(ALIST)SH
/Helvetica SF
28619 XM
(are allowed, except for assigning them the values returned)70 W
8280 38506 MT
(by)SH
/Helvetica-Oblique SF
9614 XM
(alistPack)SH
/Helvetica SF
13893 XM
(functions and for passing them as parameters to)SH
/Helvetica-Oblique SF
35570 XM
(alistPack)SH
/Helvetica SF
39849 XM
(functions. It)
278 W( is also)
SH( permitted \050and)1 W
8280 39932 MT
(safe\051 to assign variables of type)SH
/Courier SF
22620 XM
(ALIST)SH
/Helvetica SF
25898 XM
(to other variables of type)SH
/Courier SF
37126 XM
(ALIST)SH
/Helvetica SF
(.)SH
9392 42499 MT
(Each)SH
/Courier SF
11969 XM
(ALIST)SH
/Helvetica SF
15267 XM
(has a header record which exists throughout the life of)
20 W( the array list being manipulated by)19 W
8280 43925 MT
(the user.  The contents of that header record are:)SH
/Symbol SF
10322 45397 MT
(\267)SH
/Helvetica SF
11060 XM
(\050)SH
/Courier SF
(AELEMENT *)109 W
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
18223 XM
(node_array)SH
/Helvetica SF
24002 XM
(- a pointer to an array of)110 W
/Courier SF
35722 XM
(AELEMENT)SH
/Helvetica SF
40910 XM
(structures, each of which)110 W
11060 46540 MT
(contains a pointer to a user data element and a tag field.)SH
/Symbol SF
10322 48355 MT
(\267)SH
/Helvetica SF
11060 XM
(\050)SH
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
13905 XM
(length)SH
/Helvetica SF
17284 XM
(- the number)
101 W( of elements in the)100 W
/Courier SF
32104 XM
(ALIST)SH
/Helvetica SF
(. This)
478 W( reduces the cost of a common)100 W
11060 49498 MT
(\050and expensive\051 operation.)SH
/Symbol SF
10322 51313 MT
(\267)SH
/Helvetica SF
11060 XM
(\050)SH
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
13972 XM
(max_nodes)SH
/Helvetica SF
19921 XM
(- the size of the)169 W
/Helvetica-Bold SF
27881 XM
(node_array)SH
/Helvetica SF
(. Note)
616 W( that for reasons of efficiency, the)169 W
11060 52456 MT
(array may be bigger than the minimum needed to access all the elements in the)SH
/Courier SF
46576 XM
(ALIST)SH
/Helvetica SF
(.)SH
/Symbol SF
10322 54271 MT
(\267)SH
/Helvetica SF
11060 XM
(\050)SH
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
13976 XM
(current)SH
/Helvetica SF
17871 XM
(- the index of the element in the)172 W
/Courier SF
33533 XM
(ALIST)SH
/Helvetica SF
36983 XM
(designated by the user to)
172 W( be the)171 W
/Helvetica-Oblique SF
11060 55414 MT
(current)SH
/Helvetica SF
14450 XM
(element.)SH
9392 57981 MT
(The array list itself is implemented as an array of records called)71 W
/Courier SF
38531 XM
(AELEMENT)SH
/Helvetica SF
(s. This)
420 W( array)
71 W( grows when)72 W
8280 59407 MT
(elements are added to the)167 W
/Courier SF
21011 XM
(ALIST)SH
/Helvetica SF
(. A)
612 W( pointer to this array is kept in the)167 W
/Courier SF
42356 XM
(ALIST)SH
/Helvetica SF
45800 XM
(header record.  The)166 W
/Courier SF
8280 60833 MT
(AELEMENT)SH
/Helvetica SF
13358 XM
(data structure contains two fields:)SH
/Symbol SF
10322 62305 MT
(\267)SH
/Helvetica SF
11060 XM
(\050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
14404 XM
(node)SH
/Helvetica SF
17071 XM
(- a pointer to the user data.)SH
/Symbol SF
10322 64120 MT
(\267)SH
/Helvetica SF
11060 XM
(\050)SH
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
14047 XM
(value)SH
/Helvetica SF
17125 XM
(- a field provided to make sorting and tagging objects in the)243 W
/Courier SF
46500 XM
(ALIST)SH
/Helvetica SF
50022 XM
(more)SH
11060 65263 MT
(efficient.)SH
9392 67830 MT
(This information is presented)
76 W( for the edification of users, and to assist in debugging user software.  It)75 W
10800 50 8280 70292 UL
6 SS 
9170 71687 MT
(3)SH
8 SS 
9504 72000 MT
(This is done primarily to avoid the expensive operation of allocating and copying a new array.)SH
ES
%%Page: 26 27 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(26)SH
24490 XM
(The alistPack Variant)SH
46694 XM
(28 June 1988)SH
21600 37683 MT
(Figure 4-1:)SH
/Helvetica SF
27824 XM
(Structure of an ALIST)SH
6120 39366 MT
(<==<alist.can<)SH
6120 41238 MT
(should)SH
/Helvetica-Bold SF
9500 XM
(never)SH
/Helvetica SF
12602 XM
(be necessary for programs to access the internals of)
156 W( the)157 W
/Helvetica-Oblique SF
39342 XM
(alistPack)SH
/Helvetica SF
43778 XM
(data structure.  The)157 W
6120 42664 MT
(package is)
1 W( designed to completely hide the data type itself and to minimize processing overhead.  Macros)SH
6120 44090 MT
(are provided wherever it is possible to improve performance while maintaining modularity.)SH
14 /Helvetica-Bold AF
6120 47991 MT
(4.2. Creating)
389 W( ALISTs)SH
10 /Helvetica AF
7232 49417 MT
(Before the user may place objects in an)29 W
/Courier SF
25306 XM
(ALIST)SH
/Helvetica SF
(, it must be)
29 W( created.  There are two functions which will)30 W
6120 50843 MT
(create an)SH
/Courier SF
10567 XM
(ALIST)SH
/Helvetica SF
13845 XM
(-)SH
/Helvetica-Bold SF
14456 XM
(make_alist\050\051)SH
/Helvetica SF
20514 XM
(and)SH
/Helvetica-Bold SF
22460 XM
(copy_alist\050\051)SH
/Helvetica SF
(. Both)
278 W( routines return a pointer to newly created alists.)SH
12 /Helvetica-Bold AF
6120 54598 MT
(4.2.1. \050ALIST\051)
334 W( make_alist\050\051)SH
10 SS 
7232 56024 MT
(make_alist)SH
/Helvetica SF
(\050\051 simply creates a new)317 W
/Courier SF
24488 XM
(ALIST)SH
/Helvetica SF
28082 XM
(and returns a pointer to it.  The value returned by)316 W
/Helvetica-Bold SF
6120 57450 MT
(make_alist)SH
/Helvetica SF
(\050\051)SH
/Helvetica-Bold SF
12178 XM
(must)SH
/Helvetica SF
14845 XM
(be saved by the caller in order to use that)SH
/Courier SF
33466 XM
(ALIST)SH
/Helvetica SF
36744 XM
(with subsequent)SH
/Helvetica-Oblique SF
44248 XM
(alistPack)SH
/Helvetica SF
48527 XM
(functions.)SH
/Helvetica-Bold SF
7232 60017 MT
(Warning:)SH
/Courier SF
12405 XM
(ALIST)SH
/Helvetica SF
(s may not be passed to)142 W
/Helvetica-Oblique SF
26874 XM
(listPack)SH
/Helvetica SF
30739 XM
(routines, nor may)142 W
/Courier SF
39168 XM
(LIST)SH
/Helvetica SF
(s be passed to)142 W
/Helvetica-Oblique SF
48919 XM
(alistPack)SH
/Helvetica SF
6120 61443 MT
(routines.)SH
12 /Helvetica-Bold AF
6120 65198 MT
(4.2.2. \050ALIST\051)
334 W( copy_alist\050 \050ALIST\051 alist, \050int\051 flag \051)SH
10 /Helvetica AF
7232 66624 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(copy_list)SH
/Helvetica SF
(\050\051.)SH
ES
%%Page: 27 28 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
26650 XM
(The alistPack Variant)SH
53968 XM
(27)SH
14 SS 
8280 8221 MT
(4.3. Destroying)
389 W( ALISTs)SH
10 /Helvetica AF
9392 9647 MT
(When the user no longer needs an alist, it may be either destroyed or emptied.)SH
12 /Helvetica-Bold AF
8280 13402 MT
(4.3.1. free_alist\050)
334 W( \050ALIST\051 alist, \050int\051 flag \051)SH
10 /Helvetica AF
9392 14828 MT
(Identical to)SH
/Helvetica-Bold SF
14506 XM
(free_list)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
8280 18583 MT
(4.3.2. \050ALIST\051)
334 W( flush_alist\050 \050ALIST\051 alist, \050int\051 flag \051)SH
10 /Helvetica AF
9392 20009 MT
(Identical to)SH
/Helvetica-Bold SF
14506 XM
(flush_list)SH
/Helvetica SF
(\050\051.)SH
9392 22576 MT
(This function will also free the)43 W
/Courier SF
23044 XM
(AELEMENT)SH
/Helvetica SF
28165 XM
(array. As)
364 W( such, it is the only one \050in addition to)43 W
/Helvetica-Bold SF
49690 XM
(free_alist)SH
/Helvetica SF
(\050\051\051)SH
8280 24002 MT
(which will reduce the size of an)SH
/Courier SF
22341 XM
(ALIST)SH
/Helvetica SF
(.)SH
14 /Helvetica-Bold AF
8280 27903 MT
(4.4. Placing)
389 W( Elements in a ALIST)SH
10 /Helvetica-Oblique AF
9392 29329 MT
(alistPack)SH
/Helvetica SF
13688 XM
(provides many different ways of inserting elements into)17 W
/Courier SF
38445 XM
(ALIST)SH
/Helvetica SF
(s. The)
314 W( one to use depends on)18 W
8280 30755 MT
(where in the array list the user wishes to place the element.)SH
9392 33322 MT
(Since each)78 W
/Courier SF
14773 XM
(LIST)SH
/Helvetica SF
17529 XM
(has a head and a tail, we)
78 W( can create a similar facility in an)77 W
/Courier SF
44458 XM
(ALIST)SH
/Helvetica SF
47813 XM
(by making array)77 W
8280 34748 MT
(index 0 be the head, and array index)67 W
/Helvetica-Bold SF
25326 XM
(alist_length)SH
/Helvetica SF
(\050alist\051 be the tail.  An element may)
67 W( be added at either)68 W
8280 36174 MT
(end, in which case it becomes the new head or tail.)SH
9392 38741 MT
(Of course, each)106 W
/Courier SF
17047 XM
(ALIST)SH
/Helvetica SF
20431 XM
(may be)
106 W( thought of as an array of elements.  Elements may be added in the)105 W
8280 40167 MT
(middle of a alist by specifying the position at which)
249 W( they are to be inserted.)250 W
/Courier SF
45676 XM
(LIST)SH
/Helvetica SF
48604 XM
(position, then,)250 W
8280 41593 MT
(corresponds to the array index.)SH
12 /Helvetica-Bold AF
8280 45348 MT
(4.4.1. \050NODE\051)
334 W( add_to_ahead\050 \050ALIST\051 alist, \050NODE\051 element \051)SH
10 /Helvetica AF
9392 46774 MT
(Identical to)23 W
/Helvetica-Bold SF
14552 XM
(add_to_head)SH
/Helvetica SF
(\050\051, for convenience, add_to_ahead\050\051 returns \050)23 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
43766 XM
(element)SH
/Helvetica SF
(. This)
322 W( allows the)22 W
8280 48200 MT
(user to perform operations like)SH
/Courier-Bold SF
10680 50005 MT
(save = add_to_head\050 alist_1, read_next_element\050\051 \051;)SH
/Helvetica SF
9392 52572 MT
(or anything else the user desires.)SH
/Helvetica-Oblique SF
24677 XM
(alistPack)SH
/Helvetica SF
28956 XM
(tries to impose no hidden restrictions on the use of alists.)SH
9392 55139 MT
(Due to the)
107 W( representation chosen for)108 W
/Courier SF
26547 XM
(ALISTS)SH
/Helvetica SF
(, the)108 W
/Helvetica-Bold SF
32587 XM
(add_to_ahead)SH
/Helvetica SF
(\050\051 function causes each element in)108 W
8280 56565 MT
(the)SH
/Courier SF
9948 XM
(AELEMENT)SH
/Helvetica SF
15026 XM
(array to be shifted.  This can be an expensive operation.)SH
12 /Helvetica-Bold AF
8280 60320 MT
(4.4.2. \050NODE\051)
334 W( add_to_atail\050 \050ALIST\051 alist, \050NODE\051 element \051)SH
10 /Helvetica AF
9392 61746 MT
(Identical to)SH
/Helvetica-Bold SF
14506 XM
(add_to_tail)SH
/Helvetica SF
(\050\051,)SH
/Helvetica-Bold SF
21007 XM
(add_to_atail)SH
/Helvetica SF
(\050\051 does not have the expensive side effects of)SH
/Helvetica-Bold SF
47242 XM
(add_to_ahead)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
8280 65501 MT
(4.4.3. \050NODE\051)
334 W( insert_alist_node\050 \050ALIST\051 alist, \050NODE\051 element, \050NODE\051 node \051)SH
10 /Helvetica AF
9392 66927 MT
(Identical to)252 W
/Helvetica-Bold SF
15010 XM
(insert_list_node\050\051)SH
/Helvetica SF
(, the \050)252 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
29669 XM
(element)SH
/Helvetica SF
33978 XM
(is inserted into \050)252 W
/Courier SF
(ALIST)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
45655 XM
(alist)SH
/Helvetica SF
48186 XM
(before the first)251 W
8280 68353 MT
(occurance of \050)244 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
18360 XM
(node)SH
/Helvetica SF
(. This)
768 W( will require the subsequent portion of the)245 W
/Courier SF
44487 XM
(AELEMENT)SH
/Helvetica SF
49810 XM
(array to be)245 W
8280 69779 MT
(updated.)SH
ES
%%Page: 28 29 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(28)SH
24490 XM
(The alistPack Variant)SH
46694 XM
(28 June 1988)SH
12 SS 
6120 8075 MT
(4.4.4. \050NODE\051)
334 W( insert_alist_pos\050 \050ALIST\051 alist, \050NODE\051 element, \050int\051 pos \051)SH
10 /Helvetica AF
7232 9501 MT
(The element is inserted)
52 W( into the specified alist before element number \050)51 W
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
41716 XM
(pos)SH
/Helvetica SF
(. The)
380 W( positions of all)51 W
6120 10927 MT
(elements subsequent to the inserted element will be)
76 W( incremented.  This will require that the elements in)77 W
6120 12353 MT
(the)SH
/Courier SF
7788 XM
(AELEMENT)SH
/Helvetica SF
12866 XM
(array be shifted, a potentially expensive operation.)SH
7232 14920 MT
(If)SH
/Helvetica-Bold SF
8117 XM
(pos)SH
/Helvetica SF
10224 XM
(is less than or equal to one, it is inserted before the head of the alist.  If)
51 W( pos is greater than the)50 W
6120 16346 MT
(length of the alist, it is added after the)
70 W( tail.  The purpose of this is to ensure that)71 W
/Courier SF
42703 XM
(ALIST)SH
/Helvetica SF
(s function in the)71 W
6120 17772 MT
(same way as)SH
/Courier SF
12233 XM
(LIST)SH
/Helvetica SF
(s. This)
278 W( means that the following code will not function as expected:)SH
/Courier-Bold SF
8520 19577 MT
(ALIST alist;)SH
8520 20708 MT
(NODE foo,)
600 W( baz;)SH
8520 22970 MT
(alist = make_alist\050\051;)SH
8520 24101 MT
(insert_alist_pos\050 alist, foo, 200 \051;)
SH( /*)
1800 W( put foo at position 200 */)SH
8520 25232 MT
(baz = get_alist_pos\050 alist, 200 \051;)
SH( /*)
3000 W( get element number 200 */)SH
8520 27494 MT
(/* at this point, baz is NULL.  There is no element number 200!! */)SH
12 /Helvetica-Bold AF
6120 31249 MT
(4.4.5. \050int\051)
334 W( replace_alist\050 \050ALIST\051 alist, \050NODE\051 old, \050NODE\051 new \051)SH
10 /Helvetica AF
7232 32675 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(replace_list)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
6120 36430 MT
(4.4.6. \050ALIST\051)
334 W( append_alist\050 \050ALIST\051 first, \050ALIST\051 second \051)SH
10 /Helvetica AF
7232 37856 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(append_list)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
6120 41611 MT
(4.4.7. \050ALIST\051)
334 W( insert_subalist_node\050 \050ALIST\051 alist1, \050ALIST\051 alist2, \050NODE\051 node \051)SH
10 /Helvetica AF
7232 43037 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(insert_sublist_node\050\051)SH
/Helvetica SF
(, this function will require the)SH
/Courier SF
35353 XM
(AELEMENT)SH
/Helvetica SF
40431 XM
(array to be updated.)SH
12 /Helvetica-Bold AF
6120 46792 MT
(4.4.8. \050ALIST\051)
334 W( insert_subalist_pos\050 \050ALIST\051 alist1, \050ALIST\051 alist2, \050int\051 pos \051)SH
10 /Helvetica AF
7232 48218 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(insert_sublist_pos\050\051)SH
/Helvetica SF
(, this function will require the)SH
/Courier SF
34742 XM
(AELEMENT)SH
/Helvetica SF
39820 XM
(array to be updated.)SH
14 /Helvetica-Bold AF
6120 52119 MT
(4.5. Examining)
389 W( the Elements of a ALIST)SH
10 /Helvetica AF
7232 53545 MT
(Once elements have been placed in a alist, they are accessable to the user through any pointers to)111 W
6120 54971 MT
(them that the user)
2 W( has maintained.  Often, the user will not want to maintain his own pointers, and will rely)3 W
6120 56397 MT
(on)SH
/Helvetica-Oblique SF
7510 XM
(alistPack)SH
/Helvetica SF
11789 XM
(functions to return pointers to the elements in a alist.)SH
12 /Helvetica-Bold AF
6120 60152 MT
(4.5.1. \050NODE\051)
334 W( get_alist_head\050 \050ALIST\051 alist \051)SH
10 /Helvetica AF
7232 61578 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(get_list_head)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
6120 65333 MT
(4.5.2. \050NODE\051)
334 W( get_alist_tail\050 \050ALIST\051 alist \051)SH
10 /Helvetica AF
7232 66759 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(get_list_tail)SH
/Helvetica SF
(\050\051.)SH
ES
%%Page: 29 30 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
26650 XM
(The alistPack Variant)SH
53968 XM
(29)SH
12 SS 
8280 8075 MT
(4.5.3. \050NODE\051)
334 W( get_alist_pos\050 \050ALIST\051 alist, \050int\051 pos \051)SH
8 /Helvetica AF
54413 9150 MT
(th)SH
10 SS 
9392 9501 MT
(Identical to)104 W
/Helvetica-Bold SF
14714 XM
(get_list_pos)SH
/Helvetica SF
(\050\051, this function is considerably more efficient in that it can access the)104 W
/Helvetica-Bold SF
52635 XM
(pos)SH
/Helvetica SF
8280 10927 MT
(element directly through the array rather than by stepping through a)SH
/Courier SF
38462 XM
(LIST)SH
/Helvetica SF
(.)SH
14 /Helvetica-Bold AF
8280 14828 MT
(4.6. Removing)
389 W( Elements from ALISTs)SH
10 /Helvetica AF
9392 16254 MT
(Elements may be removed from)40 W
/Courier SF
24041 XM
(ALIST)SH
/Helvetica SF
(s with the appropriate)40 W
/Helvetica-Oblique SF
37039 XM
(alistPack)SH
/Helvetica SF
41358 XM
(functions. These)
358 W( functions)
40 W( will)41 W
8280 17680 MT
(all return a pointer to the element removed from the alist,)
94 W( so the user need not save the pointer before)93 W
8280 19106 MT
(removing the element.)SH
12 /Helvetica-Bold AF
8280 22861 MT
(4.6.1. \050NODE\051)
334 W( get_from_head\050 \050ALIST\051 alist \051)SH
10 /Helvetica AF
9392 24287 MT
(Identical to)SH
/Helvetica-Bold SF
14506 XM
(get_from_head)SH
/Helvetica SF
(\050\051, but much less efficient in that the)SH
/Courier SF
37737 XM
(AELEMENT)SH
/Helvetica SF
42815 XM
(array must be updated.)SH
12 /Helvetica-Bold AF
8280 28042 MT
(4.6.2. \050NODE\051)
334 W( get_from_tail\050 \050ALIST\051 alist \051)SH
10 /Helvetica AF
9392 29468 MT
(Identical to)81 W
/Helvetica-Bold SF
14668 XM
(get_from_tail)SH
/Helvetica SF
(\050\051, this routine is more)
81 W( efficient than)82 W
/Helvetica-Bold SF
37412 XM
(get_from_ahead)SH
/Helvetica SF
(\050\051 because it does not)82 W
8280 30894 MT
(affect the)SH
/Courier SF
12672 XM
(AELEMENT)SH
/Helvetica SF
17750 XM
(array.)SH
12 /Helvetica-Bold AF
8280 34649 MT
(4.6.3. \050NODE\051)
334 W( delete_alist_pos\050 \050ALIST\051 alist, \050int\051 pos \051)SH
8 /Helvetica AF
32901 35724 MT
(th)SH
10 SS 
9392 36075 MT
(Identical to)64 W
/Helvetica-Bold SF
14634 XM
(delete_list_pos)SH
/Helvetica SF
(\050\051, it)
64 W( can access the)63 W
/Helvetica-Bold SF
31123 XM
(pos)SH
/Helvetica SF
33909 XM
(element more quicky, but much less efficient in)63 W
8 SS 
45318 37150 MT
(th)SH
10 SS 
8280 37501 MT
(that the)SH
/Courier SF
11894 XM
(AELEMENT)SH
/Helvetica SF
16972 XM
(array must be updated for all elements in the array after the)SH
/Helvetica-Bold SF
43540 XM
(pos)SH
/Helvetica SF
46263 XM
(element.)SH
12 /Helvetica-Bold AF
8280 41256 MT
(4.6.4. \050NODE\051)
334 W( delete_alist_node\050 \050ALIST\051 alist, \050NODE\051 element \051)SH
10 /Helvetica AF
9392 42682 MT
(Identical to)9 W
/Helvetica-Bold SF
14524 XM
(delete_list_node)SH
/Helvetica SF
(\050\051, but)
9 W( much less efficient in that the)10 W
/Courier SF
38502 XM
(AELEMENT)SH
/Helvetica SF
43590 XM
(array must be updated for)10 W
8280 44108 MT
(all elements in the array after the deleted element.)SH
14 /Helvetica-Bold AF
8280 48009 MT
(4.7. Examining)
389 W( the ALISTs)SH
10 /Helvetica-Oblique AF
9392 49435 MT
(alistPack)SH
/Helvetica SF
13813 XM
(provides several functions)
142 W( which will return boolean values based on inquiries being done)141 W
8280 50861 MT
(upon alists.)SH
12 /Helvetica-Bold AF
8280 54616 MT
(4.7.1. \050int\051)
334 W( alist_length\050 \050ALIST\051 alist \051)SH
10 /Helvetica AF
9392 56042 MT
(This function returns the number of elements in the specified)SH
/Courier SF
36460 XM
(ALIST)SH
/Helvetica SF
(.)SH
12 /Helvetica-Bold AF
8280 59797 MT
(4.7.2. \050int\051)
334 W( in_alist\050 \050ALIST\051 alist, \050NODE\051 element \051)SH
10 /Helvetica AF
9392 61223 MT
(This function returns 0 \050boolean FALSE\051 if)
318 W( the element does not appear in the specified alist.)319 W
8280 62649 MT
(Otherwise, it returns the position of the element in the alist \050in the range 1..)SH
/Helvetica-Bold SF
(alist_length\050)SH
/Helvetica SF
47464 XM
(alist)SH
/Helvetica-Bold SF
49520 XM
(\051)SH
/Helvetica SF
(\051.)SH
12 /Helvetica-Bold AF
8280 66404 MT
(4.7.3. \050int\051)
334 W( alist_empty\050 \050ALIST\051 alist \051)SH
10 /Helvetica AF
9392 67830 MT
(This function returns boolean TRUE if the specified)231 W
/Courier SF
34082 XM
(ALIST)SH
/Helvetica SF
37590 XM
(has no elements, otherwise it returns)230 W
8280 69256 MT
(boolean FALSE.)SH
ES
%%Page: 30 31 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(30)SH
24490 XM
(The alistPack Variant)SH
46694 XM
(28 June 1988)SH
12 SS 
6120 8075 MT
(4.7.4. \050int\051)
334 W( first_in_alist\050 \050ALIST\051 alist, \050NODE\051 element \051)SH
10 /Helvetica AF
7232 9501 MT
(Returns TRUE if the head of the)SH
/Courier SF
21739 XM
(ALIST)SH
/Helvetica SF
25017 XM
(is the specified)SH
/Courier SF
31909 XM
(NODE)SH
/Helvetica-Bold SF
34587 XM
(element)SH
/Helvetica SF
(.)SH
12 /Helvetica-Bold AF
6120 13256 MT
(4.7.5. \050int\051)
334 W( last_in_alist\050 \050ALIST\051 alist, \050NODE\051 element \051)SH
10 /Helvetica AF
7232 14682 MT
(Returns TRUE if the tail of the)SH
/Courier SF
20793 XM
(ALIST)SH
/Helvetica SF
24071 XM
(is the specified)SH
/Courier SF
30963 XM
(NODE)SH
/Helvetica-Bold SF
33641 XM
(element)SH
/Helvetica SF
(.)SH
14 /Helvetica-Bold AF
6120 18583 MT
(4.8. Tagging)
389 W( Elements in ALISTs)SH
10 /Helvetica-Oblique AF
7232 20009 MT
(alistPack)SH
/Helvetica SF
11568 XM
(reserves a field in the)57 W
/Courier SF
21635 XM
(AELEMENT)SH
/Helvetica SF
26771 XM
(structure for tagging elements.  This tag can then be used)58 W
6120 21435 MT
(for searching and sorting.  Elements may be inserted into)6 W
/Courier SF
31747 XM
(ALIST)SH
/Helvetica SF
(s with the tag value set, or the value)
6 W( may)5 W
6120 22861 MT
(be set while it)
489 W( is in an)490 W
/Courier SF
19329 XM
(ALIST)SH
/Helvetica SF
(. Unspecified)
1258 W( tag values are assigned the defined constant)490 W
8 SS 
6120 24287 MT
(ALIST_DEFAULT_VALUE)SH
10 SS 
(.)SH
12 /Helvetica-Bold AF
6120 28042 MT
(4.8.1. \050NODE\051)
334 W( add_to_ahead_val\050 \050ALIST\051 alist, \050NODE\051 element, \050int\051 value \051)SH
10 /Helvetica AF
7232 29468 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(add_to_head_val)SH
/Helvetica SF
(\050\051 but less efficient in that the)SH
/Courier SF
33522 XM
(AELEMENT)SH
/Helvetica SF
38600 XM
(array will need to be updated.)SH
12 /Helvetica-Bold AF
6120 33223 MT
(4.8.2. \050NODE\051)
334 W( add_to_atail_val\050 \050ALIST\051 alist, \050NODE\051 element, \050int\051 value \051)SH
10 /Helvetica AF
7232 34649 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(add_to_tail_val)SH
/Helvetica SF
(\050\051 and more efficient than)SH
/Helvetica-Bold SF
30965 XM
(add_to_ahead_val)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
6120 38404 MT
(4.8.3. \050NODE\051)
334 W( insert_alist_val\050 \050ALIST\051 alist, \050NODE\051 element, \050int\051 value \051)SH
10 /Helvetica AF
7232 39830 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(insert_list_val)SH
/Helvetica SF
(\050\051, but less efficient in that the)SH
/Courier SF
32356 XM
(AELEMENT)SH
/Helvetica SF
37434 XM
(array will need to be updated.)SH
12 /Helvetica-Bold AF
6120 43585 MT
(4.8.4. \050NODE\051)
334 W( get_alist_val\050 \050ALIST\051 alist, \050int\051 value \051)SH
10 /Helvetica AF
7232 45011 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(get_list_val)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
6120 48766 MT
(4.8.5. \050NODE\051)
334 W( delete_alist_val\050 \050ALIST\051 alist, \050int\051 value \051)SH
10 /Helvetica AF
7232 50192 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(delete_list_val)SH
/Helvetica SF
(\050\051, but less efficient in that the)SH
/Courier SF
32523 XM
(AELEMENT)SH
/Helvetica SF
37601 XM
(array will need to be updated.)SH
12 /Helvetica-Bold AF
6120 53947 MT
(4.8.6. \050int\051)
334 W( get_ahead_val\050 \050ALIST\051 alist \051)SH
10 /Helvetica AF
7232 55373 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(get_head_val)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
6120 59128 MT
(4.8.7. \050int\051)
334 W( get_atail_val\050 \050ALIST\051 alist \051)SH
10 /Helvetica AF
7232 60554 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(get_tail_val)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
6120 64309 MT
(4.8.8. \050int\051)
334 W( get_anode_val\050 \050ALIST\051 alist, \050NODE\051 element \051)SH
10 /Helvetica AF
7232 65735 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(get_node_val)SH
/Helvetica SF
(\050\051.)SH
ES
%%Page: 31 32 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
26650 XM
(The alistPack Variant)SH
53968 XM
(31)SH
12 SS 
8280 8075 MT
(4.8.9. \050int\051)
334 W( get_alist_pos_val\050 \050ALIST\051 alist, \050int\051 pos \051)SH
10 /Helvetica AF
9392 9501 MT
(Identical to)SH
/Helvetica-Bold SF
14506 XM
(get_list_pos_val\050\051)SH
/Helvetica SF
(.)SH
12 /Helvetica-Bold AF
8280 13256 MT
(4.8.10. \050int\051)
334 W( change_alist_val\050 \050ALIST\051 alist, \050NODE\051 element, \050int\051 new_val \051)SH
10 /Helvetica AF
9392 14682 MT
(Identical to)SH
/Helvetica-Bold SF
14506 XM
(change_list_val)SH
/Helvetica SF
(\050\051.)SH
14 /Helvetica-Bold AF
8280 18583 MT
(4.9. Applying)
389 W( Functions to ALISTs)SH
10 /Helvetica AF
9392 20009 MT
(The)SH
/Helvetica-Oblique SF
11536 XM
(C)SH
/Helvetica SF
12679 XM
(language provides the capability to pass)
143 W( functions as parameters to other functions.  This is)142 W
8280 21435 MT
(utilized by)198 W
/Helvetica-Oblique SF
13400 XM
(alistPack)SH
/Helvetica SF
17877 XM
(to allow users to write alist processing functions.  Rather)
198 W( than the user walking)199 W
8280 22861 MT
(through each)12 W
/Courier SF
14419 XM
(ALIST)SH
/Helvetica SF
17709 XM
(\050e.g. with)12 W
/Helvetica-Bold SF
22068 XM
(get_alist_pos)SH
/Helvetica SF
(\050\051\051 and passing each returned element to some function, the)12 W
8280 24287 MT
(function is passed to)SH
/Helvetica-Oblique SF
17674 XM
(alistPack)SH
/Helvetica SF
21953 XM
(and it will call the user's function.)SH
/Courier SF
9392 26854 MT
(ALIST)SH
/Helvetica SF
12670 XM
(processing always begins at the head of the alist, and proceeds towards the tail.)SH
/Helvetica-Bold SF
9392 29421 MT
(Warning:)SH
/Helvetica SF
14555 XM
(It is extremely dangerous to)
137 W( add or remove elements from an)138 W
/Courier SF
43358 XM
(ALIST)SH
/Helvetica-Oblique SF
46774 XM
(while a function is)138 W
45688 50 9392 29621 UL
8280 30847 MT
(being applied to it)180 W
/Helvetica SF
(.)SH
/Helvetica-Oblique SF
17852 XM
(alistPack)SH
/Helvetica SF
22311 XM
(can handle most of the common cases)
180 W( that occur when that happens,)179 W
8656 50 8280 31047 UL
8280 32273 MT
(however such code should be rigorously exercised.)SH
12 /Helvetica-Bold AF
8280 36028 MT
(4.9.1. \050int\051)
334 W( for_all_alist\050 \050ALIST\051 alist, \050NODE\051 ptr, \050PFI\051 func \051)SH
10 /Helvetica AF
9392 37454 MT
(Identical to)SH
/Helvetica-Bold SF
14506 XM
(for_all_list)SH
/Helvetica SF
(\050\051, the variants)SH
/Helvetica-Bold SF
26177 XM
(for_all_2alist)SH
/Helvetica SF
(\050\051 and)SH
/Helvetica-Bold SF
35181 XM
(for_all_3alist)SH
/Helvetica SF
(\050\051 are also provided.)SH
12 /Helvetica-Bold AF
8280 41209 MT
(4.9.2. \050NODE\051)
334 W( search_alist\050 \050ALIST\051 alist, \050NODE\051 ptr, \050PFI\051 func \051)SH
10 /Helvetica AF
9392 42635 MT
(Identical to)SH
/Helvetica-Bold SF
14506 XM
(search_list)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
8280 46390 MT
(4.9.3. \050ALIST\051)
334 W( eval_alist\050 \050ALIST\051 alist, \050PFI\051 func \051)SH
10 /Helvetica AF
9392 47816 MT
(Identical to)SH
/Helvetica-Bold SF
14506 XM
(eval_list)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
8280 51571 MT
(4.9.4. \050ALIST\051)
334 W( alist_equal\050 \050ALIST\051 alist1, \050ALIST\051 alist2, \050PFI\051 func \051)SH
10 /Helvetica AF
9392 52997 MT
(Identical to)SH
/Helvetica-Bold SF
14506 XM
(list_equal\050\051)SH
/Helvetica SF
(.)SH
14 /Helvetica-Bold AF
8280 56898 MT
(4.10. Changing)
389 W( the Order of the Elements)SH
10 /Helvetica AF
9392 58324 MT
(Since one of the fundamental)
162 W( tasks of programming entails sorting,)163 W
/Helvetica-Oblique SF
40921 XM
(alistPack)SH
/Helvetica SF
45363 XM
(provides primitives to)163 W
8280 59750 MT
(reorder the elements of a alist to the user's specifications.)SH
12 /Helvetica-Bold AF
8280 63505 MT
(4.10.1. \050ALIST\051)
334 W( reverse_alist\050 \050ALIST\051 alist \051)SH
10 /Helvetica AF
9392 64931 MT
(Identical to)SH
/Helvetica-Bold SF
14506 XM
(reverse_list)SH
/Helvetica SF
(\050\051, and faster.)SH
ES
%%Page: 32 33 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(32)SH
24490 XM
(The alistPack Variant)SH
46694 XM
(28 June 1988)SH
12 SS 
6120 8075 MT
(4.10.2. \050ALIST\051)
334 W( sort_alist\050 \050ALIST\051 alist \051)SH
10 /Helvetica AF
7232 9501 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(sort_list)SH
/Helvetica SF
(\050\051, but slower.)SH
12 /Helvetica-Bold AF
6120 13256 MT
(4.10.3. \050ALIST\051)
334 W( sort_alist_func\050 \050ALIST\051 alist, \050PFI\051 func \051)SH
10 /Helvetica AF
7232 14682 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(sort_list_func)SH
/Helvetica SF
(\050\051, but slower.)SH
14 /Helvetica-Bold AF
6120 18583 MT
(4.11. Marking)
389 W( Current Position in an ALIST)SH
10 /Helvetica AF
7232 20009 MT
(Just as in a)28 W
/Courier SF
12680 XM
(LIST)SH
/Helvetica SF
(, there is)
28 W( a spare pointer in the)27 W
/Courier SF
29083 XM
(ALIST)SH
/Helvetica SF
32388 XM
(header record which can be used to point to a)27 W
6120 21435 MT
(particular place in a)101 W
/Courier SF
15472 XM
(ALIST)SH
/Helvetica SF
(. This)
480 W( feature may)
101 W( be used for walking forward or backward along a)102 W
/Courier SF
50242 XM
(LIST)SH
/Helvetica SF
(,)SH
6120 22861 MT
(doing incremental searches, or loop iteration.)SH
7232 25428 MT
(Note that there is only one such pointer in each)3 W
/Courier SF
28440 XM
(ALIST)SH
/Helvetica SF
(. Thus)
284 W( the use of)
3 W( any function which will change)2 W
6120 26854 MT
(that pointer will affect any other software that uses it.)
545 W( In)
1369 W( particular, this means that the)546 W
/Helvetica-Bold SF
6120 28280 MT
(loop_through_alist)SH
/Helvetica SF
15501 XM
(macro may)
102 W( not be used recursively on the same)101 W
/Courier SF
37975 XM
(ALIST)SH
/Helvetica SF
(. If)
480 W( that is necessary, use)101 W
6120 29706 MT
(the)SH
/Courier SF
7788 XM
(for_all_alist\050\051)SH
/Helvetica SF
17066 XM
(function.)SH
12 /Helvetica-Bold AF
6120 33461 MT
(4.11.1. \050NODE\051)
334 W( get_alist_next\050 \050ALIST\051 alist, \050NODE\051 current \051)SH
10 /Helvetica AF
7232 34887 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(get_list_next\050\051)SH
/Helvetica SF
(.)SH
12 /Helvetica-Bold AF
6120 38642 MT
(4.11.2. \050NODE\051)
334 W( get_alist_prev\050 \050ALIST\051 alist, \050NODE\051 current \051)SH
10 /Helvetica AF
7232 40068 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(get_list_prev\050\051)SH
/Helvetica SF
(.)SH
12 /Helvetica-Bold AF
6120 43823 MT
(4.11.3. \050NODE\051)
334 W( get_alist_next_func\050 \050ALIST\051 alist, \050NODE\051 current, \050NODE\051 ptr,)SH
10124 45249 MT
(\050PFI\051 func \051)SH
10 /Helvetica AF
7232 46675 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(get_list_next_func\050\051)SH
/Helvetica SF
(.)SH
12 /Helvetica-Bold AF
6120 50430 MT
(4.11.4. loop_through_alist\050)
334 W( \050ALIST\051 alist, \050type\051 pointer, type \051)SH
10 /Helvetica AF
7232 51856 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(loop_through_list\050\051)SH
/Helvetica SF
(.)SH
14 /Helvetica-Bold AF
6120 55757 MT
(4.12. Stacks)
389 W( and Queues)SH
10 /Helvetica AF
7232 57183 MT
(Like)SH
/Courier SF
9440 XM
(LIST)SH
/Helvetica SF
(s,)SH
/Courier SF
12992 XM
(ALIST)SH
/Helvetica SF
(s may be used)
96 W( to implement)97 W
/Helvetica-Oblique SF
29354 XM
(queues)SH
/Helvetica SF
33009 XM
(and)SH
/Helvetica-Oblique SF
35052 XM
(stacks)SH
/Helvetica SF
(. The)472 W
/Helvetica-Oblique SF
41012 XM
(alistPack)SH
/Helvetica SF
45388 XM
(stack and queue)97 W
6120 58609 MT
(functions are implemented as macros which)
13 W( redefine standard)12 W
/Helvetica-Oblique SF
34010 XM
(alistPack)SH
/Helvetica SF
38301 XM
(functions. Clearly,)
302 W( an)12 W
/Courier SF
48242 XM
(ALIST)SH
/Helvetica SF
51532 XM
(will)SH
6120 60035 MT
(make a better)108 W
/Helvetica-Oblique SF
12836 XM
(stack)SH
/Helvetica SF
15556 XM
(than a)108 W
/Helvetica-Oblique SF
18830 XM
(queue)SH
/Helvetica SF
(, but both are supported.  Also,)108 W
/Courier SF
36319 XM
(ALIST)SH
/Helvetica SF
(s will make better)108 W
/Helvetica-Oblique SF
47753 XM
(stack)SH
/Helvetica SF
(s than)109 W
/Courier SF
6120 61461 MT
(LIST)SH
/Helvetica SF
(s.)SH
7232 64028 MT
(The data types,)176 W
/Courier SF
14931 XM
(ASTACK)SH
/Helvetica SF
18985 XM
(and)SH
/Courier SF
21107 XM
(AQUEUE)SH
/Helvetica SF
(, are)
176 W( provided to allow tools like)175 W
/Helvetica-Oblique SF
40161 XM
(lint\0501\051)SH
/Helvetica SF
43114 XM
(to perform their type-)175 W
6120 65454 MT
(checking functions.  These macros are provided to the user concurrently with all)155 W
/Helvetica-Oblique SF
43705 XM
(alistPack)SH
/Helvetica SF
48140 XM
(definitions.)SH
6120 66880 MT
(The user may use standard)2 W
/Helvetica-Oblique SF
18580 XM
(alistPack)SH
/Helvetica SF
22861 XM
(functions on)2 W
/Courier SF
28535 XM
(ASTACK)SH
/Helvetica SF
(s and)1 W
/Courier SF
34861 XM
(AQUEUE)SH
/Helvetica SF
(s but that is not considered good)1 W
6120 68306 MT
(style.)SH
ES
%%Page: 33 34 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
26650 XM
(The alistPack Variant)SH
53968 XM
(33)SH
14 SS 
8280 8221 MT
(4.13. ASTACK)
389 W( Functions)SH
12 SS 
8280 11976 MT
(4.13.1. \050ASTACK\051)
334 W( make_astack\050\051)SH
10 /Helvetica AF
9392 13402 MT
(Identical to)SH
/Helvetica-Bold SF
14506 XM
(make_stack)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
8280 17157 MT
(4.13.2. free_astack\050)
334 W( \050ASTACK\051 astack, \050int\051 flag \051)SH
10 /Helvetica AF
9392 18583 MT
(Identical to)SH
/Helvetica-Bold SF
14506 XM
(free_stack)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
8280 22338 MT
(4.13.3. \050NODE\051)
334 W( push_astack\050 \050ASTACK\051 astack, \050NODE\051 element \051)SH
10 /Helvetica AF
9392 23764 MT
(Identical to push_stack\050\051, and more)
29 W( efficient in that there is no memory management overhead in most)30 W
8280 25190 MT
(cases.)SH
12 /Helvetica-Bold AF
8280 28945 MT
(4.13.4. \050NODE\051)
334 W( pop_astack\050 \050ASTACK\051 astack \051)SH
10 /Helvetica AF
9392 30371 MT
(Identical to)38 W
/Helvetica-Bold SF
14582 XM
(pop_stack)SH
/Helvetica SF
(\050\051, and)
38 W( more efficient in that there is no memory management overhead in most)37 W
8280 31797 MT
(cases.)SH
12 /Helvetica-Bold AF
8280 35552 MT
(4.13.5. \050NODE\051)
334 W( top_of_astack\050 \050ASTACK\051 astack \051)SH
10 /Helvetica AF
9392 36978 MT
(Identical to)SH
/Helvetica-Bold SF
14506 XM
(top_of_stack)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
8280 40733 MT
(4.13.6. \050int\051)
334 W( height_of_astack\050 \050ASTACK\051 astack \051)SH
10 /Helvetica AF
9392 42159 MT
(Identical to)SH
/Helvetica-Bold SF
14506 XM
(height_of_stack)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
8280 45914 MT
(4.13.7. \050int\051)
334 W( astack_empty\050 \050ASTACK\051 astack \051)SH
10 /Helvetica AF
9392 47340 MT
(Identical to)SH
/Helvetica-Bold SF
14506 XM
(stack_empty)SH
/Helvetica SF
(\050\051.)SH
14 /Helvetica-Bold AF
8280 51241 MT
(4.14. AQUEUE)
389 W( Functions)SH
12 SS 
8280 54996 MT
(4.14.1. \050AQUEUE\051)
334 W( make_aqueue\050\051)SH
10 /Helvetica AF
9392 56422 MT
(Identical to)SH
/Helvetica-Bold SF
14506 XM
(make_queue)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
8280 60177 MT
(4.14.2. free_aqueue\050)
334 W( \050AQUEUE\051 aqueue, \050int\051 flag \051)SH
10 /Helvetica AF
9392 61603 MT
(Identical to)SH
/Helvetica-Bold SF
14506 XM
(free_queue)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
8280 65358 MT
(4.14.3. \050NODE\051)
334 W( enaqueue\050 \050AQUEUE\051 aqueue, \050NODE\051 element \051)SH
10 /Helvetica AF
9392 66784 MT
(Identical to)22 W
/Helvetica-Bold SF
14550 XM
(enqueue)SH
/Helvetica SF
(\050\051, this function is more efficient in)
22 W( that there is generally no memory management)23 W
8280 68210 MT
(overhead.)SH
ES
%%Page: 34 35 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(34)SH
24490 XM
(The alistPack Variant)SH
46694 XM
(28 June 1988)SH
12 SS 
6120 8075 MT
(4.14.4. \050NODE\051)
334 W( deaqueue\050 \050AQUEUE\051 aqueue \051)SH
10 /Helvetica AF
7232 9501 MT
(Identical to)261 W
/Helvetica-Bold SF
12868 XM
(dequeue)SH
/Helvetica SF
(\050\051, this function is extremely inefficient in that the)261 W
/Courier SF
40949 XM
(AELEMENT)SH
/Helvetica SF
46287 XM
(array must be)260 W
6120 10927 MT
(updated.)SH
12 /Helvetica-Bold AF
6120 14682 MT
(4.14.5. \050NODE\051)
334 W( head_of_aqueue\050 \050AQUEUE\051 aqueue \051)SH
10 /Helvetica AF
7232 16108 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(head_of_queue)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
6120 19863 MT
(4.14.6. \050int\051)
334 W( length_of_aqueue\050 \050AQUEUE\051 aqueue \051)SH
10 /Helvetica AF
7232 21289 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(length_of_queue)SH
/Helvetica SF
(\050\051.)SH
12 /Helvetica-Bold AF
6120 25044 MT
(4.14.7. \050int\051)
334 W( aqueue_empty\050 \050AQUEUE\051 aqueue \051)SH
10 /Helvetica AF
7232 26470 MT
(Identical to)SH
/Helvetica-Bold SF
12346 XM
(queue_empty)SH
/Helvetica SF
(\050\051.)SH
14 /Helvetica-Bold AF
6120 30371 MT
(4.15. Using)
389 W( alistPack)SH
10 /Helvetica AF
7232 31797 MT
(The)SH
/Helvetica-Oblique SF
9292 XM
(alistPack)SH
/Helvetica SF
13630 XM
(library is installed on all ECE machines in)
59 W( the file /usr/local/lib/liblist.a.  The include files)60 W
6120 33223 MT
(\050)SH
/Courier SF
(alistPack.h)SH
/Helvetica SF
(, etc.\051 are installed in /usr/local/include.)SH
7232 35790 MT
(In order to use the)SH
/Helvetica-Oblique SF
15626 XM
(alistPack)SH
/Helvetica SF
19905 XM
(functions the user must have this line in his code:)SH
/Courier-Bold SF
8520 37595 MT
(#include <alistPack.h>)SH
/Helvetica SF
7232 40162 MT
(and must compile his)
75 W( code refering both to the header file directory \050)74 W
/Courier SF
(/usr/local/include)SH
/Helvetica SF
(\051, and to)74 W
6120 41588 MT
(the toolbox library \050)SH
/Courier SF
(-llist)SH
/Helvetica SF
(\051:)SH
/Courier-Bold SF
8520 43393 MT
(prompt> cc my_prog.c ... -I/usr/local/include -llist)SH
14 /Helvetica-Bold AF
6120 47294 MT
(4.16. Switching)
389 W( Between LISTs and ALISTs)SH
10 /Helvetica AF
7232 48720 MT
(The original motivation for the creation of)37 W
/Helvetica-Oblique SF
25888 XM
(alistPack)SH
/Helvetica SF
30204 XM
(was to examine the consequences of changing the)37 W
6120 50146 MT
(internal data structures of)8 W
/Helvetica-Oblique SF
17713 XM
(listPack)SH
/Helvetica SF
21444 XM
(upon some existing)
8 W( user software.  Eventually, it became apparent that)7 W
6120 51572 MT
(some data)
94 W( structures were more efficiently represented as)95 W
/Courier SF
32889 XM
(LIST)SH
/Helvetica SF
(s, while others were better as)95 W
/Courier SF
49142 XM
(ALIST)SH
/Helvetica SF
(s.)SH
6120 52998 MT
(In general, the latter were those which were generally indexed by)14 W
/Helvetica-Oblique SF
35343 XM
(position)SH
/Helvetica SF
39081 XM
(and upon which elements)
14 W( were)13 W
6120 54424 MT
(always added to the tail.)SH
7232 56991 MT
(However, it is still useful to be able to switch data structures.  To that end, there is a header file)189 W
/Courier SF
6120 58417 MT
(listCompatible.h)SH
/Helvetica SF
16278 XM
(which will redefine all)
280 W( calls to)279 W
/Helvetica-Oblique SF
31014 XM
(listPack)SH
/Helvetica SF
35016 XM
(functions in a module to be)279 W
/Helvetica-Oblique SF
48919 XM
(alistPack)SH
/Helvetica SF
6120 59843 MT
(functions. It)
278 W( will also use the)SH
/Helvetica-Oblique SF
19126 XM
(C)SH
/Helvetica SF
(-preprocessor to redefine variables of type)SH
/Courier SF
38856 XM
(LIST)SH
/Helvetica SF
41534 XM
(to be)SH
/Courier SF
44036 XM
(ALIST)SH
/Helvetica SF
(.)SH
7232 62410 MT
(In order to to this mapping, place these lines at the beginning of a module:)SH
/Courier-Bold SF
8520 64215 MT
(#define LIST_TO_ALIST)SH
8520 65346 MT
(#include "listCompatible.h")SH
/Helvetica SF
7232 67913 MT
(Alternatively,)SH
/Courier SF
13234 XM
(listCompatible.h)SH
/Helvetica SF
23112 XM
(can do the opposite.  That is, it will change)SH
/Helvetica-Oblique SF
42233 XM
(alistPack)SH
/Helvetica SF
46512 XM
(into)SH
/Helvetica-Oblique SF
48402 XM
(listPack)SH
/Helvetica SF
(.)SH
/Courier-Bold SF
8520 69718 MT
(#define ALIST_TO_LIST)SH
8520 70849 MT
(#include "listCompatible.h")SH
ES
%%Page: 35 36 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
26650 XM
(The alistPack Variant)SH
53968 XM
(35)SH
/Helvetica SF
9392 7929 MT
(Finally, if is desirable to change between packages at compile time, this will work nicely.)SH
/Courier-Bold SF
10680 9734 MT
(#ifdef do_conversion)
SH( /*)
6600 W( define at compile time:)
SH( -Ddo_conv)1200 W
10680 10865 MT
(#define LIST_TO_ALIST)
SH( /*)
6000 W( request macro conversions */)SH
10680 11996 MT
(#include "listCompatible.h")
SH( /*)
2400 W( get needed definitions */)SH
10680 13127 MT
(#else /*)
15600 W( otherwise */)SH
10680 14258 MT
(#include "listPack.h")
SH( /*)
6000 W( just get listPack definitions */)SH
10680 15389 MT
(#endif)SH
ES
%%Page: 36 37 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(36)SH
24490 XM
(The alistPack Variant)SH
46694 XM
(28 June 1988)SH
ES
%%Page: 37 38 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
23204 XM
(The Binary Tree Package:  treePack)SH
53968 XM
(37)SH
16 SS 
8280 8366 MT
(5. The)
445 W( Binary Tree Package:  treePack)SH
10 /Helvetica AF
9392 9792 MT
(Another useful data structure)
130 W( which lends itself to generic use is the)131 W
/Helvetica-Oblique SF
41142 XM
(Binary Tree)131 W
/Helvetica SF
(. Such)
540 W( a structure)131 W
8280 11218 MT
(provides a mechanism to store data which can be sorted by a simple)171 W
/Helvetica-Bold SF
41127 XM
(precedes)SH
/Helvetica SF
(/)SH
/Helvetica-Bold SF
(follows)SH
/Helvetica SF
49689 XM
(relationship.)SH
8280 12644 MT
(Examples of this include)
116 W( alphabetically ordering names, numerically ordering numbers, and time-stamp)117 W
8280 14070 MT
(ordering program events.)SH
9392 16637 MT
(Each node in a tree contains a user element.  Beneath each node are)
68 W( two sub-trees.  By convention,)67 W
8280 18063 MT
(one sub-tree will only contain elements which precede the element in that node,)
90 W( and the other sub-tree)91 W
8280 19489 MT
(will contain only elements which follow the current node's element.)SH
9392 22056 MT
(Therefore, when searching for an element in a tree, we first)
56 W( test the element at the root of the tree.  If)55 W
8280 23482 MT
(the element for which we are searching precedes the)
135 W( root element, we need only search the sub-tree)136 W
8280 24908 MT
(which contains preceders.)
112 W( By)
501 W( continuing down that sub-tree only, we have cut our search area in half)111 W
8280 26334 MT
(with one test.  Each test thus cuts the search area in half, and the)
34 W( average time to search for a particular)35 W
8 SS 
33232 27409 MT
(4)SH
10 SS 
8280 27760 MT
(element in a tree is at most)SH
/Helvetica-Bold SF
20563 XM
(log)SH
22508 XM
(\050number_of_elements\051)SH
/Helvetica SF
33677 XM
(.)SH
8 /Helvetica-Bold AF
22063 28112 MT
(2)SH
10 /Helvetica AF
9392 30327 MT
(Since lists \050as implemented)
53 W( by)52 W
/Helvetica-Oblique SF
23437 XM
(listPack)SH
/Helvetica SF
(\051 are accessed linearly the average search time for an element)52 W
8280 31753 MT
(is)SH
/Helvetica-Bold SF
9332 XM
(list_length / 2)52 W
/Helvetica SF
(. On)
384 W( small structures the difference is not great, but on large ones it can be significant.)53 W
8280 33179 MT
(For a thousand elements, searching a)192 W
/Courier SF
26496 XM
(LIST)SH
/Helvetica SF
29366 XM
(will average)
192 W( 500 searches, while searching a)191 W
/Courier SF
50823 XM
(TREE)SH
/Helvetica SF
53692 XM
(will)SH
8280 34605 MT
(average 10.)SH
9392 37172 MT
(As implemented by)62 W
/Helvetica-Oblique SF
18359 XM
(treePack)SH
/Helvetica SF
(, trees use the)
62 W( same amount of storage as)63 W
/Helvetica-Oblique SF
41879 XM
(listPack)SH
/Helvetica SF
45665 XM
(for the same number)63 W
8280 38598 MT
(of user elements.)
53 W( However,)
382 W( there are efficiency trade-offs for different operations.  The frequency of the)52 W
8280 40024 MT
(operations used on a particular data structure will determine which package should be used.)SH
14 /Helvetica-Bold AF
8280 43925 MT
(5.1. The)
389 W( TREE Data Structure)SH
10 /Helvetica-Oblique AF
9392 45351 MT
(treePack)SH
/Helvetica SF
13700 XM
(provides a single data type for the use of application software.  That type is)84 W
/Courier SF
48367 XM
(TREE)SH
/Helvetica SF
(, and is a)85 W
8280 46777 MT
(pointer to a structure used by)SH
/Helvetica-Oblique SF
21509 XM
(treePack)SH
/Helvetica SF
25733 XM
(to manage a binary tree.  That structure contains:)SH
/Helvetica-Bold SF
8280 48649 MT
(size)SH
/Helvetica SF
17176 XM
(The number of elements in the)SH
/Courier SF
31016 XM
(TREE)SH
/Helvetica SF
(.)SH
/Helvetica-Bold SF
8280 50275 MT
(root)SH
/Helvetica SF
17176 XM
(A pointer to the root of the)SH
/Courier SF
29017 XM
(TREE)SH
/Helvetica SF
(.)SH
/Helvetica-Bold SF
8280 51901 MT
(sort func)SH
/Helvetica SF
17176 XM
(A pointer to the function that the user has determined to be)
111 W( the sorting function for)110 W
17176 53044 MT
(the tree.)SH
9392 54470 MT
(The header field,)111 W
/Helvetica-Bold SF
17507 XM
(root)SH
/Helvetica SF
(, contains a pointer to the top-most node in the tree.  That node, like all)
111 W( other)112 W
/Courier SF
8280 55896 MT
(TREE)SH
/Helvetica SF
10958 XM
(nodes, contains:)SH
/Helvetica-Bold SF
8280 57768 MT
(tag)SH
/Helvetica SF
17176 XM
(An integer used for tagging elements in the)SH
/Courier SF
36520 XM
(TREE)SH
/Helvetica SF
(.)SH
/Helvetica-Bold SF
8280 59394 MT
(node)SH
/Helvetica SF
17176 XM
(A pointer to the user element in the current)SH
/Courier SF
36408 XM
(TREE)SH
/Helvetica SF
39086 XM
(node.)SH
/Helvetica-Bold SF
8280 61020 MT
(left)SH
/Helvetica SF
17176 XM
(A pointer to the)77 W
/Courier SF
24544 XM
(TREE)SH
/Helvetica SF
27299 XM
(node which is the root of a sub-tree containing)
77 W( user elements)76 W
17176 62163 MT
(which precede the current user element.)SH
/Helvetica-Bold SF
8280 63789 MT
(right)SH
/Helvetica SF
17176 XM
(A pointer to)
76 W( the)77 W
/Courier SF
24542 XM
(TREE)SH
/Helvetica SF
27297 XM
(node which is the root of a sub-tree containing user elements)77 W
17176 64932 MT
(which follow the current user element.)SH
9392 66358 MT
(This information is presented)
76 W( for the edification of users, and to assist in debugging user software.  It)75 W
8280 67784 MT
(should)SH
/Helvetica-Bold SF
11663 XM
(never)SH
/Helvetica SF
14768 XM
(be necessary)
159 W( for programs to access the internals of the)160 W
/Helvetica-Oblique SF
41545 XM
(treePack)SH
/Helvetica SF
45929 XM
(data structure.  The)160 W
10800 50 8280 70292 UL
6 SS 
9170 71687 MT
(4)SH
8 SS 
9504 72000 MT
(This assumes a perfect tree.)SH
ES
%%Page: 38 39 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(38)SH
21044 XM
(The Binary Tree Package:  treePack)SH
46694 XM
(28 June 1988)SH
21656 52083 MT
(Figure 5-1:)SH
/Helvetica SF
27880 XM
(Structure of an TREE)SH
6120 53766 MT
(<==<tree.can<)SH
6120 55638 MT
(package is)
1 W( designed to completely hide the data type itself and to minimize processing overhead.  Macros)SH
6120 57064 MT
(are provided wherever it is possible to improve performance while maintaining modularity.)SH
7232 59631 MT
(No operations on variables of type)20 W
/Courier SF
22804 XM
(TREE)SH
/Helvetica SF
25502 XM
(are allowed, except for assigning them the)
20 W( values returned by)21 W
/Helvetica-Oblique SF
6120 61057 MT
(treePack)SH
/Helvetica SF
10435 XM
(functions and for passing them as)
91 W( parameters to)90 W
/Helvetica-Oblique SF
32837 XM
(treePack)SH
/Helvetica SF
37151 XM
(functions. It)
458 W( is also permitted \050and)90 W
6120 62483 MT
(safe\051 to assign variables of type)SH
/Courier SF
20460 XM
(TREE)SH
/Helvetica SF
23138 XM
(to other variables of type)SH
/Courier SF
34366 XM
(TREE)SH
/Helvetica SF
(.)SH
14 /Helvetica-Bold AF
6120 66384 MT
(5.2. The)
389 W( Ordering Function)SH
10 /Helvetica AF
7232 67810 MT
(Each binary tree must have some function which will determine whether a given)
SH( user element precedes)1 W
6120 69236 MT
(or follows another element.  Since users may wish to sort)9 W
/Courier SF
31784 XM
(TREE)SH
/Helvetica SF
(s based on their own criteria,)
9 W( that ordering)8 W
6120 70662 MT
(function must be written by the user.)SH
ES
%%Page: 39 40 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
23204 XM
(The Binary Tree Package:  treePack)SH
53968 XM
(39)SH
/Helvetica-Oblique SF
9392 7929 MT
(treePack)SH
/Helvetica SF
13782 XM
(defines the ordering function as)
166 W( one which will take an)167 W
/Helvetica-Oblique SF
39682 XM
(identifier)SH
/Helvetica SF
43906 XM
(and a)167 W
/Helvetica-Oblique SF
47020 XM
(user element)167 W
/Helvetica SF
53412 XM
(and)SH
8280 9355 MT
(compares them for ordering.)
112 W( A)
500 W( returned value of 0 signifies that the)111 W
/Helvetica-Oblique SF
39907 XM
(identifier)SH
/Helvetica SF
44075 XM
(is equivalent to the)111 W
/Helvetica-Oblique SF
53135 XM
(user)SH
8280 10781 MT
(element)SH
/Helvetica SF
(, a negative returned value signifies that the)81 W
/Helvetica-Oblique SF
32107 XM
(identifier)SH
/Helvetica SF
36245 XM
(precedes the)82 W
/Helvetica-Oblique SF
42468 XM
(user element)82 W
/Helvetica SF
(, and a postive)82 W
8280 12207 MT
(value signifies that the)SH
/Helvetica-Oblique SF
18452 XM
(identifier)SH
/Helvetica SF
22509 XM
(follows the)SH
/Helvetica-Oblique SF
27511 XM
(user element)SH
/Helvetica SF
(.)SH
9392 14774 MT
(The reason that the ordering function does not take two user elements)
25 W( as parameters, is that it is often)24 W
8280 16200 MT
(inconvenient to expect the user to create an entire data structure simply to be able)
80 W( to compare a single)81 W
8280 17626 MT
(field.)SH
9392 20193 MT
(As an example, consider the program on page 49 which sorts employee records)
130 W( by the employee's)129 W
8280 21619 MT
(name. It)
584 W( is a convenient operation)
153 W( to request an employee record by name using a character string,)154 W
8280 23045 MT
(rather than an)
282 W( entire \050)281 W
/Courier SF
(struct person)281 W
/Helvetica SF
(\051 record.  Therefore, the ordering function)281 W
/Helvetica-Bold SF
47634 XM
(sort_by_name\050\051)SH
/Helvetica SF
8280 24471 MT
(compares a character string with the name field in entire employee record.)SH
9392 27038 MT
(Finally, it should be noted that the ordering function)160 W
/Helvetica-Oblique SF
33789 XM
(can)SH
/Helvetica SF
35839 XM
(be written such that it takes)
160 W( two structure)161 W
8280 28464 MT
(pointers and compares as many fields as desired.)SH
14 /Helvetica-Bold AF
8280 32365 MT
(5.3. treePack)
389 W( Functions)SH
10 /Helvetica-Oblique AF
9392 33791 MT
(treePack)SH
/Helvetica SF
13686 XM
(provides a set of functions to create and maintain)
70 W( binary trees with a minimum of overhead.)69 W
8280 35217 MT
(The ordering function is defined by the user when each)120 W
/Courier SF
34104 XM
(TREE)SH
/Helvetica SF
36902 XM
(is created,)
120 W( and thus may differ between)121 W
8280 36643 MT
(trees in a single program.  However, the ordering function of any given)SH
/Courier SF
39683 XM
(TREE)SH
/Helvetica SF
42361 XM
(may not be changed.)SH
9392 39210 MT
(Before the user)
93 W( may place elements into a)92 W
/Courier SF
29139 XM
(TREE)SH
/Helvetica SF
(, it must be created.  There are two functions which)92 W
8280 40636 MT
(will create a tree -)66 W
/Helvetica-Bold SF
16779 XM
(make_bintree\050\051)SH
/Helvetica SF
24236 XM
(and)SH
/Helvetica-Bold SF
26248 XM
(copy_bintree\050\051)SH
/Helvetica SF
(. Both)
410 W( routines return a)
66 W( pointer to newly created)67 W
8280 42062 MT
(binary trees.)SH
12 /Helvetica-Bold AF
8280 45817 MT
(5.3.1. \050TREE\051)
334 W( make_bintree\050 \050PFI\051 func \051)SH
10 /Helvetica AF
9392 47243 MT
(This function returns a)
107 W( new, empty)106 W
/Courier SF
25593 XM
(TREE)SH
/Helvetica SF
(, which uses \050)106 W
/Courier SF
(PFI)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
36941 XM
(func)SH
/Helvetica SF
39436 XM
(as the tree ordering function.  The)106 W
8280 48669 MT
(value returned by)25 W
/Helvetica-Bold SF
16359 XM
(make_bintree)SH
/Helvetica SF
(\050\051 must be saved by)
25 W( the caller in order to use that)26 W
/Courier SF
45124 XM
(TREE)SH
/Helvetica SF
47828 XM
(with subsequent)26 W
/Helvetica-Oblique SF
8280 50095 MT
(treePack)SH
/Helvetica SF
12504 XM
(functions.)SH
12 /Helvetica-Bold AF
8280 53850 MT
(5.3.2. \050TREE\051)
334 W( copy_bintree\050 \050TREE\051 tree, \050int\051 flag \051)SH
10 /Helvetica AF
9392 55276 MT
(This function returns a new)36 W
/Courier SF
21855 XM
(TREE)SH
/Helvetica SF
(, which)
36 W( uses the same ordering function as the existing tree, and has)35 W
8280 56702 MT
(the same user elements in it.  The value)
23 W( returned by)24 W
/Helvetica-Bold SF
31880 XM
(copy_bintree)SH
/Helvetica SF
(\050\051 must be saved by the caller in order)24 W
8280 58128 MT
(to use that)SH
/Courier SF
13228 XM
(TREE)SH
/Helvetica SF
15906 XM
(with subsequent)SH
/Helvetica-Oblique SF
23410 XM
(treePack)SH
/Helvetica SF
27634 XM
(functions.)SH
9392 60695 MT
(\050)SH
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
12382 XM
(flag)SH
/Helvetica SF
14684 XM
(may be either)246 W
8 SS 
21758 XM
(AND_NODES)SH
10 SS 
27262 XM
(or)SH
8 SS 
28674 XM
(NOT_NODES)SH
10 SS 
(.)SH
8 SS 
34978 XM
(AND_NODES)SH
10 SS 
40482 XM
(indicates that the elements are)245 W
8280 62121 MT
(pointers, and a)77 W
/Helvetica-Bold SF
15404 XM
(copy_node\050\051)SH
/Helvetica SF
21704 XM
(operation is requested on each while)77 W
8 SS 
38730 XM
(NOT_NODES)SH
10 SS 
44065 XM
(indicates that should not)77 W
8280 63547 MT
(be done.  Warning:)60 W
8 SS 
17585 XM
(AND_NODES)SH
10 SS 
22904 XM
(may only be used if the tree elements were)
60 W( allocated with the extended)59 W
4001 50 12908 63747 UL
8280 64973 MT
(functions provided by the memory management package \050see page 63\051.)SH
ES
%%Page: 40 41 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(40)SH
21044 XM
(The Binary Tree Package:  treePack)SH
46694 XM
(28 June 1988)SH
12 SS 
6120 8075 MT
(5.3.3. free_bintree\050)
334 W( \050TREE\051 tree, \050int\051 flag \051)SH
10 /Helvetica AF
7232 9501 MT
(This function frees the \050)SH
/Courier SF
(TREE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
20692 XM
(tree)SH
/Helvetica SF
22804 XM
(and all associated storage.)SH
7232 12068 MT
(\050)SH
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
9982 XM
(flag)SH
/Helvetica SF
12044 XM
(may be either)6 W
8 SS 
18398 XM
(AND_NODES)SH
10 SS 
23663 XM
(or)SH
8 SS 
24837 XM
(NOT_NODES)SH
10 SS 
(.)SH
8 SS 
30665 XM
(AND_NODES)SH
10 SS 
35931 XM
(indicates that freeing the storage used)7 W
6120 13494 MT
(by the elements themselves is requested,)
54 W( while)53 W
8 SS 
27727 XM
(NOT_NODES)SH
10 SS 
33038 XM
(indicates that should not be done.  Warning:)53 W
4001 50 48919 13694 UL
8 SS 
6120 14920 MT
(AND_NODES)SH
10 SS 
11401 XM
(may only be used if the tree elements were allocated with the extended functions)
22 W( provided by)23 W
6120 16346 MT
(the memory management package \050see page 63\051.)SH
12 /Helvetica-Bold AF
6120 20101 MT
(5.3.4. \050NODE\051)
334 W( add_to_bintree\050 \050TREE\051 tree, \050NODE\051 ident, \050NODE\051 node \051)SH
10 /Helvetica AF
7232 21527 MT
(This function adds the user element \050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
26695 XM
(node)SH
/Helvetica SF
29362 XM
(to \050)SH
/Courier SF
(TREE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
33818 XM
(tree)SH
/Helvetica SF
(.)SH
7232 24094 MT
(\050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
10665 XM
(ident)SH
/Helvetica SF
13421 XM
(is a pointer with which the user identifies \050)89 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
35740 XM
(node)SH
/Helvetica SF
(. That)
455 W( identifier is passed to the)88 W
6120 25520 MT
(tree's ordering function to determine where in the tree the user element is to be placed.)SH
7232 28087 MT
(For convenience,)SH
/Helvetica-Bold SF
15180 XM
(add_to_bintree\050\051)SH
/Helvetica SF
23292 XM
(returns the node.)SH
12 /Helvetica-Bold AF
6120 31842 MT
(5.3.5. \050NODE\051)
334 W( add_unique_to_bintree\050 \050TREE\051 tree, \050NODE\051 ident, \050NODE\051 node \051)SH
10 /Helvetica AF
7232 33268 MT
(This function behaves identically to)85 W
/Helvetica-Bold SF
23442 XM
(add_to_bintree\050\051)SH
/Helvetica SF
(, except that if the ordering function reports that)86 W
6120 34694 MT
(\050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
9634 XM
(node)SH
/Helvetica SF
12471 XM
(is identical to an existing user element,)170 W
8 SS 
31113 XM
(NULL)SH
10 SS 
33607 XM
(is returned, and the node is)
170 W( not added to)169 W
6120 36120 MT
(\050)SH
/Courier SF
(TREE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
9464 XM
(tree)SH
/Helvetica SF
(.)SH
7232 38687 MT
(Otherwise,)SH
/Helvetica-Bold SF
12289 XM
(add_unique_to_bintree\050\051)SH
/Helvetica SF
24235 XM
(returns the node.)SH
12 /Helvetica-Bold AF
6120 42442 MT
(5.3.6. \050NODE\051)
334 W( get_from_bintree\050 \050TREE\051 tree, \050NODE\051 ident \051)SH
10 /Helvetica AF
7232 43868 MT
(This function returns the user)
142 W( element added to \050)143 W
/Courier SF
(TREE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
33092 XM
(tree)SH
/Helvetica SF
35347 XM
(with the identifier \050)143 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
47044 XM
(ident)SH
/Helvetica SF
(. If)
564 W( the)143 W
6120 45294 MT
(ordering function cannot match the identifier to a user element,)SH
8 SS 
34134 XM
(NULL)SH
10 SS 
36458 XM
(is returned.)SH
12 /Helvetica-Bold AF
6120 49049 MT
(5.3.7. \050NODE\051)
334 W( delete_from_bintree\050 \050TREE\051 tree, \050NODE\051 ident \051)SH
10 /Helvetica AF
7232 50475 MT
(This function)
25 W( behaves identically to)24 W
/Helvetica-Bold SF
23138 XM
(get_from_bintree\050\051)SH
/Helvetica SF
(, but removes the user element \050if it found one\051)24 W
6120 51901 MT
(from \050)SH
/Courier SF
(TREE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
11742 XM
(tree)SH
/Helvetica SF
13854 XM
(as well.)SH
12 /Helvetica-Bold AF
6120 55656 MT
(5.3.8. \050int\051)
334 W( for_all_bintree\050 \050TREE\051 tree, \050NODE\051 node, \050PFI\051 func \051)SH
10 /Helvetica AF
7232 57082 MT
(This function will apply the user specified function, \050)48 W
/Courier SF
(\050PFI\051)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
34062 XM
(func)SH
/Helvetica SF
36499 XM
(to each)
48 W( user element in \050)49 W
/Courier SF
(TREE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
50808 XM
(tree)SH
/Helvetica SF
(.)SH
6120 58508 MT
(The tree will be traversed depth-first, and the user elements will be passed to)SH
/Helvetica-Bold SF
40468 XM
(func)SH
/Helvetica SF
42857 XM
(in sorted order.)SH
7232 61075 MT
(\050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
10769 XM
(node)SH
/Helvetica SF
13629 XM
(is a free parameter which will also be passed)
193 W( to)192 W
/Helvetica-Bold SF
36843 XM
(func)SH
/Helvetica SF
(. If)
662 W( additional parameters are)192 W
6120 62501 MT
(needed, the related functions may be used.)SH
/Courier-Bold SF
8520 64306 MT
(\050int\051 for_all_2bintree\050)
1200 W( \050TREE\051 tree, \050NODE\051 node, \050NODE\051 node2, \050PFI)SH
8520 65437 MT
(\050int\051 for_all_3bintree\050)
1200 W( \050TREE\051 tree, \050NODE\051 node, \050NODE\051 node2, \050NOD)SH
ES
%%Page: 41 42 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
23204 XM
(The Binary Tree Package:  treePack)SH
53968 XM
(41)SH
12 SS 
8280 8075 MT
(5.3.9. \050int\051)
334 W( size_of_bintree\050 \050TREE\051 tree \051)SH
10 /Helvetica AF
9392 9501 MT
(This function returns the number of elements in \050)SH
/Courier SF
(TREE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
33912 XM
(tree)SH
/Helvetica SF
(.)SH
12 /Helvetica-Bold AF
8280 13256 MT
(5.3.10. \050int\051)
334 W( bintree_empty\050 \050TREE\051 tree \051)SH
10 /Helvetica AF
9392 14682 MT
(This function returns boolean TRUE if the number)
58 W( of elements in \050)59 W
/Courier SF
(TREE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
42227 XM
(tree)SH
/Helvetica SF
44398 XM
(is zero, boolean FALSE)59 W
8280 16108 MT
(otherwise.)SH
14 /Helvetica-Bold AF
8280 20009 MT
(5.4. Examples)
389 W( of the Use of treePack)SH
10 /Helvetica AF
9392 21435 MT
(The)SH
/Helvetica-Oblique SF
11456 XM
(treePack)SH
/Helvetica SF
15743 XM
(library is installed on all ECE machines in the file /usr/local/lib/liblist.a.  The)
63 W( include files)62 W
8280 22861 MT
(\050)SH
/Courier SF
(treePack.h)SH
/Helvetica SF
(, etc.\051 are installed in /usr/local/include.)SH
9392 25428 MT
(In order to use the)SH
/Helvetica-Oblique SF
17786 XM
(treePack)SH
/Helvetica SF
22010 XM
(functions the user must have this line in his code:)SH
/Courier-Bold SF
10680 27233 MT
(#include <treePack.h>)SH
/Helvetica SF
9392 29800 MT
(and must compile his code refering both to the header file directory)
74 W( \050)75 W
/Courier SF
(/usr/local/include)SH
/Helvetica SF
(\051, and to)75 W
8280 31226 MT
(the toolbox library \050)SH
/Courier SF
(-llist)SH
/Helvetica SF
(\051:)SH
/Courier-Bold SF
10680 33031 MT
(prompt> cc my_prog.c ... -I/usr/local/include -llist)SH
ES
%%Page: 42 43 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(42)SH
21044 XM
(The Binary Tree Package:  treePack)SH
46694 XM
(28 June 1988)SH
/Courier-Bold SF
8520 7874 MT
(#include "stdio.h")
SH( /*)
12600 W( UNIX standard I/O library *)SH
8520 9005 MT
(#include "treePack.h")
SH( /*)
10800 W( binary tree functions */)SH
13320 12398 MT
(print_element\050 dummy, number \051  /* element printing function *)SH
8520 13529 MT
(int dummy,)
2400 W( number;)
SH( /*)
10200 W( ignore dummy parameter */)SH
10920 14660 MT
({)SH
10920 15791 MT
(printf\050 "%d)
SH( ",)
1200 W( number \051;)SH
10920 16922 MT
(})SH
8520 20315 MT
(int sort_by_number\050)
2400 W( ident, number \051 /* tree comparison function */)SH
8520 21446 MT
(int ident,)
2400 W( /*)
15000 W( identifier is an integer */)SH
13320 22577 MT
(number; /*)
14400 W( so is the user element */)SH
10920 23708 MT
({)SH
10920 24839 MT
(/* if the identifier is less than the number, return -1.  Return 1)SH
12720 25970 MT
(if greater than the number, and 0 if they are equal. */)SH
10920 27101 MT
(if \050ident < number\051 return -1;)SH
10920 28232 MT
(if \050ident > number\051 return  1;)SH
10920 30494 MT
(return 0;)SH
10920 31625 MT
(})SH
8520 35018 MT
(main\050\051 {)SH
10920 36149 MT
(int current;)
9600 W( /*)
4200 W( buffer for reading in numbe)SH
10920 37280 MT
(TREE number_tree;)
9000 W( /*)
1800 W( where we will store them */)SH
10920 39542 MT
(number_tree = make_bintree\050 sort_by_number \051;)
SH( /*)
3600 W( make the tr)SH
10920 41804 MT
(while \050 1 \051 {)
SH( /*)
22800 W( infinite lo)SH
13320 42935 MT
(printf\050 "Enter a number:  " \051;)
SH( /*)
10200 W( type a prom)SH
13320 44066 MT
(if \050scanf\050 "%d", &number \051 == EOF \051 break;)
SH( /*)
3000 W( exit at end)SH
13320 46328 MT
(/* add, but only if it was not in the tree already */)SH
13320 47459 MT
(/* Also, if it is a new number, print all the numbers in sorte)SH
13320 48590 MT
(if \050add_unique_to_bintree\050 number_tree, number, number \051 != NU)SH
15720 49721 MT
(for_all_bintree\050 number_tree, NULL, print_element \051;)SH
15720 50852 MT
(printf\050 "\134n" \051;)SH
15720 51983 MT
(})SH
13320 53114 MT
(})SH
10920 55376 MT
(free_bintree\050 number_tree, NOT_NODES \051;)SH
10920 56507 MT
(})SH
/Helvetica SF
7232 59074 MT
(This is a simple program that reads numbers from the keyboard through)43 W
/Helvetica-Bold SF
39816 XM
(scanf\050\051)SH
/Helvetica SF
(, and stores them in a)42 W
6120 60500 MT
(tree. The)
492 W( tree is sorted)
107 W( numerically by the function)108 W
/Helvetica-Bold SF
29927 XM
(sort_by_number\050\051)SH
/Helvetica SF
(, which compares two numbers,)108 W
6120 61926 MT
(and returns to)SH
/Helvetica-Oblique SF
12568 XM
(treePack)SH
/Helvetica SF
16792 XM
(the proper ordering.)SH
7232 64493 MT
(Then,)SH
/Helvetica-Bold SF
10067 XM
(for_all_bintree\050\051)SH
/Helvetica SF
17902 XM
(is used to call the)SH
/Helvetica-Bold SF
25906 XM
(print_element\050\051)SH
/Helvetica SF
33407 XM
(function with all the elements in the tree.)SH
7232 67060 MT
(Finally, the tree)
94 W( is freed.  The)93 W
8 SS 
21113 XM
(NOT_NODES)SH
10 SS 
26464 XM
(parameter indicates to)93 W
/Helvetica-Bold SF
36914 XM
(free_bintree\050\051)SH
/Helvetica SF
43675 XM
(that the)93 W
/Helvetica-Bold SF
47475 XM
(free_node\050\051)SH
/Helvetica SF
6120 68486 MT
(function should not be applied to the user elements.  This is because they are not allocated pointers,)
43 W( but)44 W
6120 69912 MT
(integers.)SH
ES
%%Page: 43 44 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
23204 XM
(The Binary Tree Package:  treePack)SH
53968 XM
(43)SH
/Courier-Bold SF
10680 7874 MT
(#include "stdio.h")
SH( /*)
12600 W( UNIX standard I/O library *)SH
10680 9005 MT
(#include "treePack.h")
SH( /*)
10800 W( binary tree functions */)SH
10680 11267 MT
(struct person {)SH
13080 12398 MT
(char name[)
4200 W( 80 ];)SH
13080 13529 MT
(int salary,)
4800 W( social_security_number, age;)SH
13080 14660 MT
(};)SH
20280 18053 MT
(print_person\050 dummy, pperson \051  /* person printing fun)SH
10680 19184 MT
(struct person)
SH( *dummy,)
1200 W( *pperson;)
SH( /*)
8400 W( structure person po)SH
13080 20315 MT
({)SH
13080 21446 MT
(printf\050 "Person %s is %d years old, and makes %d per year\134n",)SH
17880 22577 MT
(pperson->name, pperson->age, pperson->salary \051;)SH
13080 23708 MT
(})SH
10680 27101 MT
(int sort_by_name\050)
7200 W( name, pperson \051)
SH( /*)
1200 W( tree comparison fun)SH
10680 28232 MT
(char *)
SH( name;)
5400 W( /*)
15600 W( ident is a name str)SH
10680 29363 MT
(struct person * pperson;)
SH( /*)
13800 W( node is a person po)SH
13080 30494 MT
({)SH
13080 31625 MT
(/* strcmp will return -1 if the name precedes the person's name,)SH
26880 32756 MT
(0 if they are equal,)SH
26880 33887 MT
(1 if the name follows the persons's name */)SH
13080 35018 MT
(return strcmp\050 name, pperson->name \051;)SH
13080 36149 MT
(})SH
10680 39542 MT
(main\050\051 {)SH
13080 40673 MT
(FILE *data_file;)
9000 W( /*)
2400 W( where the person records ar)SH
13080 41804 MT
(TREE person_tree;)
9000 W( /*)
1800 W( where we will store them */)SH
13080 42935 MT
(struct person)
SH( *temp;)
3600 W( /*)
5400 W( pointer to temporary record)SH
13080 44066 MT
(int bytes_read;)
9600 W( /*)
2400 W( count of bytes read from fi)SH
13080 46328 MT
(data_file = fopen\050 "person.records", "r" \051;)
SH( /*)
4800 W( open the da)SH
13080 48590 MT
(person_tree = make_bintree\050 sort_by_name \051;)
SH( /*)
4800 W( make the tr)SH
13080 50852 MT
(do {)SH
15480 51983 MT
(/* allocate a new person */)SH
15480 53114 MT
(temp = \050struct person *\051 make_node\050 sizeof\050 struct person \051 \051;)SH
15480 55376 MT
(/* read from the disk */)SH
15480 56507 MT
(bytes_read = fread\050 temp, sizeof\050 struct person \051, 1, data_fil)SH
15480 58769 MT
(if \050bytes_read > 0\051 add_to_bintree\050 person_tree, temp->name, t)SH
13080 59900 MT
(} while \050bytes_read > 0\051;)SH
13080 62162 MT
(if \050get_from_bintree\050 person_tree, "Zimmermann" \051 != NULL\051)SH
15480 63293 MT
(printf\050 "The person 'Zimmermann' was in the tree!\134n" \051;)SH
13080 65555 MT
(for_all_bintree\050 person_tree, NULL, print_person \051;)SH
13080 67817 MT
(free_bintree\050 person_tree, AND_NODES \051;)SH
13080 70079 MT
(fclose\050 data_file \051;)SH
13080 71210 MT
(})SH
ES
%%Page: 44 45 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(44)SH
21044 XM
(The Binary Tree Package:  treePack)SH
46694 XM
(28 June 1988)SH
/Helvetica SF
7232 7929 MT
(The user)
50 W( has a structure that defines a person's payroll information.  Those structures are going to be)49 W
6120 9355 MT
(stored in a)13 W
/Courier SF
11106 XM
(TREE)SH
/Helvetica SF
(, and the tree will be sorted by the)
13 W( people's names.  The program reads the records from)14 W
6120 10781 MT
(the file "person.records", stores them in the binary tree, and tests)
40 W( to see if there is an element in the tree)39 W
6120 12207 MT
(which the user identified as "Zimmermann".)SH
7232 14774 MT
(The comparison function)303 W
/Helvetica-Bold SF
19368 XM
(sort_by_name\050\051)SH
/Helvetica SF
27396 XM
(compares an indentifier string to the)304 W
/Helvetica-Bold SF
45394 XM
(name)SH
/Helvetica SF
48588 XM
(field in a)304 W
6120 16200 MT
(\050)SH
/Courier SF
(struct person)166 W
/Helvetica SF
(\051 record.  This allows identifying both by known strings)
166 W( \050)165 W
/Helvetica-Bold SF
(add_to_bintree\050\051)SH
/Helvetica SF
48919 XM
(used the)165 W
6120 17626 MT
(actual name field\051 and by created strings \050)SH
/Helvetica-Bold SF
(get_from_bintree\050\051)SH
/Helvetica SF
33851 XM
(used a possibly unknown string\051.)SH
7232 20193 MT
(Finally,)SH
/Helvetica-Bold SF
10777 XM
(for_all_bintree\050\051)SH
/Helvetica SF
18712 XM
(is used to call the)100 W
/Helvetica-Bold SF
27216 XM
(print_person\050\051)SH
/Helvetica SF
34372 XM
(function with)
100 W( all the elements in the tree.)101 W
6120 21619 MT
(Note that this will be done in alphabetical order, as that is the way the tree was sorted.)SH
ES
%%Page: 45 46 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
23204 XM
(The Binary Tree Package:  treePack)SH
53968 XM
(45)SH
/Courier-Bold SF
10680 7874 MT
(#include "stdio.h")
SH( /*)
12600 W( UNIX standard I/O library *)SH
10680 9005 MT
(#include "treePack.h")
SH( /*)
10800 W( binary tree functions */)SH
10680 11267 MT
(struct person {)SH
13080 12398 MT
(char name[)
4200 W( 80 ];)SH
13080 13529 MT
(long salary,)
4200 W( social_security_number, age;)SH
13080 14660 MT
(};)SH
10680 18053 MT
(int sort_by_salary\050)
7200 W( sal, pperson \051  /* tree comparison fun)SH
10680 19184 MT
(int sal;)
7200 W( /*)
16200 W( ident is an integer)SH
10680 20315 MT
(struct person * pperson;)
SH( /*)
13800 W( node is a person po)SH
13080 21446 MT
({)SH
13080 22577 MT
(/* function will return negative if sal is less than pperson's sal)SH
15480 23708 MT
(positive otherwise */)SH
13080 24839 MT
(return \050sal - pperson->salary\051;)SH
13080 25970 MT
(})SH
10680 29363 MT
(int resort_by_salary\050)
7200 W( tree, pperson \051)SH
10680 30494 MT
(TREE tree;)
6600 W( /*)
15600 W( free parameter is T)SH
10680 31625 MT
(struct person * pperson;)
SH( /*)
13800 W( node is a person po)SH
13080 32756 MT
({)SH
13080 33887 MT
(add_to_bintree\050 tree, pperson->salary, pperson \051;)SH
13080 35018 MT
(})SH
10680 38411 MT
(main\050\051 {)SH
13080 39542 MT
(FILE *data_file;)
9000 W( /*)
2400 W( where the person records ar)SH
13080 40673 MT
(TREE alpha_tree,)
9000 W( /*)
2400 W( where we will store them */)SH
25080 41804 MT
(salary_tree; /*)
1800 W( duplicate tree numerically)SH
13080 42935 MT
(struct person)
SH( *temp;)
3600 W( /*)
5400 W( pointer to temporary record)SH
13080 44066 MT
(int bytes_read;)
9600 W( /*)
2400 W( count of bytes read from fi)SH
13080 46328 MT
(data_file = fopen\050 "person.records", "r" \051;)
SH( /*)
4800 W( open the da)SH
13080 48590 MT
(alpha_tree = make_bintree\050 sort_by_name \051;)
SH( /*)
5400 W( make the tr)SH
13080 49721 MT
(salary_tree = make_bintree\050 sort_by_salary \051;)
SH( /*)
3600 W( make the tr)SH
13080 51983 MT
(do {)SH
15480 53114 MT
(/* allocate a new person */)SH
15480 54245 MT
(temp = \050struct person *\051 make_node\050 sizeof\050 struct person \051 \051;)SH
15480 56507 MT
(/* read from the disk */)SH
15480 57638 MT
(bytes_read = fread\050 temp, sizeof\050 struct person \051, 1, data_fil)SH
15480 59900 MT
(if \050bytes_read > 0\051 add_to_bintree\050 alpha_tree, temp->name, te)SH
13080 61031 MT
(} while \050bytes_read > 0\051;)SH
13080 63293 MT
(/* now, insert into the salary tree, sorted numerically */)SH
13080 64424 MT
(for_all_bintree\050 alpha_tree, salary_tree, resort_by_salary \051;)SH
13080 66686 MT
(for_all_bintree\050 salary_tree, NULL, print_person \051;)SH
13080 67817 MT
(for_all_bintree\050 alpha_tree,)
600 W( NULL, print_person \051;)SH
13080 70079 MT
(free_bintree\050 salary_tree, NOT_NODES \051;)SH
13080 71210 MT
(free_bintree\050 alpha_tree,)
600 W( AND_NODES \051;)SH
ES
%%Page: 46 47 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(46)SH
21044 XM
(The Binary Tree Package:  treePack)SH
46694 XM
(28 June 1988)SH
/Courier-Bold SF
10920 7874 MT
(fclose\050 data_file \051;)SH
10920 9005 MT
(})SH
/Helvetica SF
7232 11572 MT
(This program is similar to the preceding one,)
197 W( and identical functions have been omitted.  Further,)196 W
6120 12998 MT
(suppose it is desired to print the people in order of salary in addition to alphabetically.)SH
7232 15565 MT
(The program reads in the data, and stores it alphabetically sorted.  Next,)126 W
/Helvetica-Bold SF
41163 XM
(for_all_bintree\050\051)SH
/Helvetica SF
49125 XM
(calls the)127 W
/Helvetica-Bold SF
6120 16991 MT
(resort_by_salary\050\051)SH
/Helvetica SF
15117 XM
(function is called with a new)49 W
/Courier SF
28083 XM
(TREE)SH
/Helvetica SF
30810 XM
(into which the insertion is to be done.)
49 W( Of)
375 W( course,)48 W
6120 18417 MT
(this could also have been done when the records were read in.)SH
7232 20984 MT
(Then,)SH
/Helvetica-Bold SF
10156 XM
(for_all_bintree\050\051)SH
/Helvetica SF
18080 XM
(is used to call the)89 W
/Helvetica-Bold SF
26529 XM
(print_person\050\051)SH
/Helvetica SF
33674 XM
(function with all the elements)
89 W( in each tree.)90 W
6120 22410 MT
(Note that this will do)
265 W( the job either in alphabetical and salary order, depending on which)264 W
/Courier SF
49256 XM
(TREE)SH
/Helvetica SF
52198 XM
(is)SH
6120 23836 MT
(traversed.)SH
7232 26403 MT
(Finally, the memory)
84 W( is cleaned up.  Note that only one call to)85 W
/Helvetica-Bold SF
35347 XM
(free_bintree\050\051)SH
/Helvetica SF
42100 XM
(requests via)85 W
8 SS 
47939 XM
(AND_NODES)SH
10 SS 
6120 27829 MT
(that the records be freed.)SH
ES
%%Page: 47 48 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
23316 XM
(The Hash Table Module - hashPack)SH
53968 XM
(47)SH
16 SS 
8280 8366 MT
(6. The)
445 W( Hash Table Module - hashPack)SH
10 /Helvetica AF
9392 9792 MT
(Another simple mechanism for organizing data structures is)
27 W( a)26 W
/Helvetica-Oblique SF
37032 XM
(Hash Table)26 W
/Helvetica SF
(. In)
330 W( its simplest form, a hash)26 W
8280 11218 MT
(table consists of a number of lists)
15 W( of elements and a)16 W
/Helvetica-Oblique SF
31739 XM
(Hashing Function)16 W
/Helvetica SF
39830 XM
(which will determine into which list)16 W
8280 12644 MT
(a given element is to be stored.)SH
9392 15211 MT
(Hash tables are very)
71 W( useful when a great deal of searching must be done on a data structure.  While)70 W
8280 16637 MT
(they are less efficient than perfect binary trees, it is)
15 W( usually easy to generate a hashing function which will)16 W
8280 18063 MT
(spread the elements out over the entire range of lists.  That function is also applied to identifiers)
105 W( when)104 W
8280 19489 MT
(searching the table, thus narrowing down the search time to be only one of the lists in the hash table.)SH
14 /Helvetica-Bold AF
8280 23390 MT
(6.1. The)
389 W( HASH Data Type)SH
10 /Helvetica-Oblique AF
9392 24816 MT
(hashPack)SH
/Helvetica SF
14144 XM
(provides the single data type)83 W
/Courier SF
27566 XM
(HASH)SH
/Helvetica SF
(. Each)445 W
/Courier SF
33608 XM
(HASH)SH
/Helvetica SF
36370 XM
(contains a pointer to a hash table header)84 W
8280 26242 MT
(record. That)
278 W( record contains:)SH
8 SS 
29237 27968 MT
(5)SH
10 /Helvetica-Bold AF
8280 28319 MT
(array)SH
/Helvetica SF
17176 XM
(a pointer to an array of lists)SH
29682 XM
(, each of which contains pointers to user elements.)SH
/Helvetica-Bold SF
8280 29945 MT
(size)SH
/Helvetica SF
17176 XM
(The current number of user elements in the table.  This is a frequently used value,)111 W
17176 31088 MT
(and the cost of determining it at run-time is prohibitive.)SH
/Helvetica-Bold SF
8280 32714 MT
(hash function)SH
/Helvetica SF
17176 XM
(A pointer)
118 W( to the user specified function which will convert an identifier to a hashing)119 W
17176 33857 MT
(index.)SH
/Helvetica-Bold SF
8280 35483 MT
(match function)SH
/Helvetica SF
17176 XM
(A pointer to a user function which will match an identifier to a user element.)SH
9392 36909 MT
(This information is presented)
76 W( for the edification of users, and to assist in debugging user software.  It)75 W
8280 38335 MT
(should)SH
/Helvetica-Bold SF
11636 XM
(never)SH
/Helvetica SF
14714 XM
(be necessary for programs to access the internals of the)132 W
/Helvetica-Oblique SF
41212 XM
(hashPack)SH
/Helvetica SF
46013 XM
(data structure.  The)132 W
8280 39761 MT
(package is)
1 W( designed to completely hide the data type itself and to minimize processing overhead.  Macros)SH
8280 41187 MT
(are provided wherever it is possible to improve performance while maintaining modularity.)SH
9392 43754 MT
(No operations on variables of type)20 W
/Courier SF
24964 XM
(HASH)SH
/Helvetica SF
27662 XM
(are allowed, except for assigning them the)
20 W( values returned by)21 W
/Helvetica-Oblique SF
8280 45180 MT
(hashPack)SH
/Helvetica SF
12984 XM
(functions and for passing them as parameters to)35 W
/Helvetica-Oblique SF
34941 XM
(hashPack)SH
/Helvetica SF
39645 XM
(functions. It)
348 W( is also permitted \050and)34 W
8280 46606 MT
(safe\051 to assign variables of type)SH
/Courier SF
22620 XM
(HASH)SH
/Helvetica SF
25298 XM
(to other variables of type)SH
/Courier SF
36526 XM
(HASH)SH
/Helvetica SF
(.)SH
14 /Helvetica-Bold AF
8280 50507 MT
(6.2. The)
389 W( Hashing and Matching Functions)SH
10 /Helvetica AF
9392 51933 MT
(The)SH
/Courier SF
11399 XM
(HASH)SH
/Helvetica SF
14083 XM
(structure requires that the user supply two functions.  The first compares an)6 W
/Helvetica-Oblique SF
47842 XM
(identifier)SH
/Helvetica SF
51905 XM
(with an)7 W
/Helvetica-Oblique SF
8280 53359 MT
(user element)225 W
/Helvetica SF
14788 XM
(in the)225 W
/Courier SF
17962 XM
(HASH)SH
/Helvetica SF
20865 XM
(table. This)
728 W( is the)225 W
/Helvetica-Bold SF
29826 XM
(matching function)224 W
/Helvetica SF
39219 XM
(for the)224 W
/Courier SF
42780 XM
(TREE)SH
/Helvetica SF
(. It)
726 W( returns non-zero)224 W
8280 54785 MT
(\050boolean TRUE\051 if the)180 W
/Helvetica-Oblique SF
18948 XM
(identifier)SH
/Helvetica SF
23185 XM
(matches the)181 W
/Helvetica-Oblique SF
29272 XM
(user element)181 W
/Helvetica SF
(, and zero \050boolean FALSE\051 if they do not)181 W
8280 56211 MT
(match. Aside)
384 W( from the returned values)
53 W( specified, it is identical to the ordering function used by)52 W
/Helvetica-Oblique SF
51134 XM
(treePack)SH
/Helvetica SF
8280 57637 MT
(\050see page 38\051.)SH
9392 60204 MT
(The)SH
/Helvetica-Bold SF
11438 XM
(hashing function)45 W
/Helvetica SF
19863 XM
(is also supplied by the user for each)46 W
/Courier SF
36461 XM
(HASH)SH
/Helvetica SF
39185 XM
(structure. It)
370 W( takes an)46 W
/Helvetica-Oblique SF
49031 XM
(identifier)SH
/Helvetica SF
(, and)46 W
8280 61630 MT
(returns an integer in the range)80 W
/Helvetica-Bold SF
22434 XM
([0..\050max_index-1\051])SH
/Helvetica SF
(, where)80 W
/Helvetica-Bold SF
34653 XM
(max_index)SH
/Helvetica SF
40180 XM
(is the number of lists in the hash)80 W
8280 63056 MT
(table.)SH
/Helvetica-Oblique SF
11418 XM
(hashPack)SH
/Helvetica SF
16155 XM
(places no restrictions on)
68 W( the size of the table, but will range-check the values returned)69 W
8280 64482 MT
(by the hashing function.  Obviously, larger tables will result in shorter search times.)SH
10800 50 8280 70292 UL
6 SS 
9170 71687 MT
(5)SH
8 SS 
9504 72000 MT
(Currently)SH
/Helvetica-Oblique SF
12971 XM
(hashPack)SH
/Helvetica SF
16707 XM
(sits on top of)SH
/Helvetica-Oblique SF
21464 XM
(listPack)SH
/Helvetica SF
(, and uses the)SH
/Courier SF
29468 XM
(LIST)SH
/Helvetica SF
31610 XM
(functions therein.)SH
ES
%%Page: 48 49 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(48)SH
21156 XM
(The Hash Table Module - hashPack)SH
46694 XM
(28 June 1988)SH
20655 52083 MT
(Figure 6-1:)SH
/Helvetica SF
26879 XM
(Structure of a HASH table)SH
6120 53766 MT
(<==<hash.can<)SH
14 /Helvetica-Bold AF
6120 57667 MT
(6.3. hashPack)
389 W( Functions)SH
12 SS 
6120 61422 MT
(6.3.1. \050HASH\051)
334 W( make_hashtable\050 \050int\051 size, \050PFI\051 hashfunc, \050PFI\051 matchfunc \051)SH
10 /Helvetica AF
7232 62848 MT
(A pointer to)
53 W( a newly created, empty hash table is returned.  The value returned by)52 W
/Helvetica-Bold SF
44473 XM
(make_hashtable\050\051)SH
6120 64274 MT
(must)SH
/Helvetica SF
8787 XM
(be saved by the caller in order to use that)SH
/Courier SF
27408 XM
(HASH)SH
/Helvetica SF
30086 XM
(with subsequent)SH
/Helvetica-Oblique SF
37590 XM
(hashPack)SH
/Helvetica SF
42259 XM
(functions.)SH
7232 66841 MT
(\050)SH
/Courier SF
(\050PFI\051)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
11197 XM
(hashfunc)SH
/Helvetica SF
15942 XM
(is the function which will convert identifiers into indexes in the array of hash lists.  It)22 W
6120 68267 MT
(will take as its parameter an identifier.  The function must return values)
61 W( in the range of [0..\050)60 W
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
49585 XM
(size)SH
/Helvetica SF
(-1].)SH
/Helvetica-Oblique SF
6120 69693 MT
(hashPack)SH
/Helvetica SF
10789 XM
(will report an error if the hashing function returns an invalid index.)SH
ES
%%Page: 49 50 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
23316 XM
(The Hash Table Module - hashPack)SH
53968 XM
(49)SH
/Helvetica SF
9392 7929 MT
(\050)SH
/Courier SF
(\050PFI\051)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
13369 XM
(matchfunc)SH
/Helvetica SF
18736 XM
(is the function which will compare identifiers with user elements.  It)
33 W( will take as its)34 W
8280 9355 MT
(parameters an identifier and a user element. Since identifiers and user elements are treated as generic)89 W
8280 10781 MT
(pointers, the user can cast those pointers into any convenient type.)SH
12 /Helvetica-Bold AF
8280 14536 MT
(6.3.2. free_hashtable\050)
334 W( \050HASH\051 table, \050int\051 flag \051)SH
10 /Helvetica AF
9392 15962 MT
(This function frees an entire hash table structure.  \050)5 W
/Courier SF
(HASH)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
35019 XM
(table)SH
/Helvetica SF
37636 XM
(the hash table to be)
5 W( freed.  Once freed,)6 W
8280 17388 MT
(no further references to the table are permitted.)SH
9392 19955 MT
(\050)SH
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
12232 XM
(flag)SH
/Helvetica SF
14384 XM
(may be either)96 W
8 SS 
21008 XM
(AND_NODES)SH
10 SS 
26363 XM
(or)SH
8 SS 
27626 XM
(NOT_NODES)SH
10 SS 
(.)SH
8 SS 
33631 XM
(AND_NODES)SH
10 SS 
38985 XM
(indicates that freeing the storage of)95 W
8280 21381 MT
(the user elements themselves is)
343 W( requested, while)344 W
8 SS 
32804 XM
(NOT_NODES)SH
10 SS 
38406 XM
(indicates that should not be done.)344 W
8280 22807 MT
(Warning:)SH
8 SS 
12965 XM
(AND_NODES)SH
10 SS 
18288 XM
(may only be used if the user elements were allocated with the)
64 W( extended functions)63 W
4001 50 8280 23007 UL
8280 24233 MT
(provided by the memory management package \050see page 63\051.)SH
12 /Helvetica-Bold AF
8280 27988 MT
(6.3.3. \050NODE\051)
334 W( add_to_hashtable\050 \050HASH\051 table, \050NODE\051 node, \050NODE\051 ident \051)SH
10 /Helvetica AF
9392 29414 MT
(This function adds the user element \050)27 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
29044 XM
(node)SH
/Helvetica SF
31738 XM
(to the hash table.  The hashing function for)
27 W( the table)28 W
8280 30840 MT
(is applied to \050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
17238 XM
(ident)SH
/Helvetica SF
19905 XM
(to determine into which hash list)SH
/Helvetica-Bold SF
34411 XM
(node)SH
/Helvetica SF
37078 XM
(is to be stored.)SH
9392 33407 MT
(For convenience,)SH
/Helvetica-Bold SF
17340 XM
(add_to_hashtable\050\051)SH
/Helvetica SF
26786 XM
(returns)SH
/Helvetica-Bold SF
30176 XM
(node)SH
/Helvetica SF
(.)SH
12 /Helvetica-Bold AF
8280 37162 MT
(6.3.4. \050NODE\051)
334 W( add_unique_to_hashtable\050 \050HASH\051 table, \050NODE\051 node, \050NODE\051)SH
11617 38588 MT
(ident \051)SH
10 /Helvetica AF
9392 40014 MT
(This function behaves identically to)111 W
/Helvetica-Bold SF
25732 XM
(add_to_hashtable\050\051)SH
/Helvetica SF
(, but)
111 W( before adding the user element \050)110 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
8280 41440 MT
(node)SH
/Helvetica SF
(, the table's matching function is applied to all elements in the hash list selected by)
147 W( the hashing)148 W
8280 42866 MT
(function.)SH
9392 45433 MT
(If one of those elements matches,)115 W
8 SS 
25368 XM
(NULL)SH
10 SS 
27807 XM
(is returned.  Otherwise, the entry)
115 W( is added to the table, and)114 W
/Helvetica-Bold SF
8280 46859 MT
(node)SH
/Helvetica SF
10947 XM
(is returned.)SH
12 /Helvetica-Bold AF
8280 50614 MT
(6.3.5. \050NODE\051)
334 W( get_from_hashtable\050 \050HASH\051 table, \050NODE\051 ident \051)SH
10 /Helvetica AF
9392 52040 MT
(The hashing function is applied to \050)12 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
27995 XM
(ident)SH
/Helvetica SF
(, and the)
12 W( selected hash list is searched by the matching)13 W
8280 53466 MT
(function to find the requested element.  If a match is found, the element is returned,)
118 W( otherwise)117 W
8 SS 
51917 XM
(NULL)SH
10 SS 
54358 XM
(is)SH
8280 54892 MT
(returned.)SH
12 /Helvetica-Bold AF
8280 58647 MT
(6.3.6. \050NODE\051)
334 W( delete_from_hashtable\050 \050HASH\051 table, \050NODE\051 ident \051)SH
10 /Helvetica AF
9392 60073 MT
(This function behaves in the same)
98 W( manner as)99 W
/Helvetica-Bold SF
30633 XM
(get_from_hashtable\050\051)SH
/Helvetica SF
(, but removes the user element)99 W
8280 61499 MT
(as well.)SH
8 SS 
9392 64066 MT
(NULL)SH
10 SS 
11716 XM
(is returned if the matching function could not find a match in the table.)SH
ES
%%Page: 50 51 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(50)SH
21156 XM
(The Hash Table Module - hashPack)SH
46694 XM
(28 June 1988)SH
12 SS 
6120 8075 MT
(6.3.7. \050int\051)
334 W( for_all_hashtable\050 \050HASH\051 table, \050NODE\051 node, \050PFI\051 func \051)SH
10 /Helvetica AF
7232 9501 MT
(This function)
18 W( will apply the user specified function, \050)17 W
/Courier SF
(\050PFI\051)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
33784 XM
(func)SH
/Helvetica SF
36190 XM
(to each user element in \050)17 W
/Courier SF
(HASH)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
50308 XM
(table)SH
/Helvetica SF
(.)SH
6120 10927 MT
(\050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
9491 XM
(node)SH
/Helvetica SF
12185 XM
(is a free parameter which will also be passed)
27 W( to)28 W
/Helvetica-Bold SF
33743 XM
(func)SH
/Helvetica SF
(. If)
334 W( additional parameters are needed,)28 W
6120 12353 MT
(the related functions may be used.)SH
/Courier-Bold SF
8520 14158 MT
(\050int\051 for_all_2hashtable\050)
1200 W( \050HASH\051 table, \050NODE\051 node, \050NODE\051 node2, \050)SH
8520 15289 MT
(\050int\051 for_all_3hashtable\050)
1200 W( \050HASH\051 table, \050NODE\051 node, \050NODE\051 n2, \050NOD)SH
12 /Helvetica-Bold AF
6120 19044 MT
(6.3.8. \050int\051)
334 W( size_of_hashtable\050 \050HASH\051 table \051)SH
10 /Helvetica AF
7232 20470 MT
(This function returns the number of elements in \050)SH
/Courier SF
(HASH)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
31752 XM
(table)SH
/Helvetica SF
(.)SH
12 /Helvetica-Bold AF
6120 24225 MT
(6.3.9. \050int\051)
334 W( hashtable_empty\050 \050HASH\051 table \051)SH
10 /Helvetica AF
7232 25651 MT
(This function returns boolean TRUE if)
28 W( the number of elements in \050)27 W
/Courier SF
(HASH)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
39695 XM
(table)SH
/Helvetica SF
42334 XM
(is zero, boolean FALSE)27 W
6120 27077 MT
(otherwise.)SH
14 /Helvetica-Bold AF
6120 30978 MT
(6.4. Hash)
389 W( Table Example)SH
10 /Helvetica AF
7232 32404 MT
(The)SH
/Helvetica-Oblique SF
9268 XM
(hashPack)SH
/Helvetica SF
13972 XM
(library is installed on all ECE machines in the file /usr/local/lib/liblist.a.  The include)
35 W( files)36 W
6120 33830 MT
(\050)SH
/Courier SF
(hashPack.h)SH
/Helvetica SF
(, etc.\051 are installed in /usr/local/include.)SH
7232 36397 MT
(In order to use the)SH
/Helvetica-Oblique SF
15626 XM
(hashPack)SH
/Helvetica SF
20295 XM
(functions the user must have this line in his code:)SH
/Courier-Bold SF
8520 38202 MT
(#include <hashPack.h>)SH
/Helvetica SF
7232 40769 MT
(and must compile his)
75 W( code refering both to the header file directory \050)74 W
/Courier SF
(/usr/local/include)SH
/Helvetica SF
(\051, and to)74 W
6120 42195 MT
(the toolbox library \050)SH
/Courier SF
(-llist)SH
/Helvetica SF
(\051:)SH
/Courier-Bold SF
8520 44000 MT
(prompt> cc my_prog.c ... -I/usr/local/include -llist)SH
ES
%%Page: 51 52 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
23316 XM
(The Hash Table Module - hashPack)SH
53968 XM
(51)SH
/Courier-Bold SF
10680 7874 MT
(#include "stdio.h")
SH( /*)
12600 W( UNIX standard I/O library *)SH
10680 9005 MT
(#include "hashPack.h")
SH( /*)
10800 W( hash table functions */)SH
10680 11267 MT
(#define MAX_HASH 256)
SH( /*)
11400 W( 256 entries into hash table)SH
10680 13529 MT
(struct person {)SH
13080 14660 MT
(char name[)
4200 W( 80 ];)SH
13080 15791 MT
(int salary,)
4800 W( social_security_number, age;)SH
13080 16922 MT
(};)SH
20280 20315 MT
(print_person\050 dummy, pperson \051  /* person printing fun)SH
10680 21446 MT
(struct person)
SH( *dummy,)
1200 W( *pperson;)
SH( /*)
8400 W( structure person po)SH
13080 22577 MT
({)SH
13080 23708 MT
(printf\050 "Person %s is %d years old, and makes %d per year\134n",)SH
17880 24839 MT
(pperson->name, pperson->age, pperson->salary \051;)SH
13080 25970 MT
(})SH
20280 28232 MT
(match_person\050 ident, pperson \051  /* Element match funct)SH
10680 29363 MT
(char *)
SH( name;)
5400 W( /*)
15600 W( ident is a name str)SH
10680 30494 MT
(struct person * pperson;)
SH( /*)
13800 W( node is a person po)SH
13080 31625 MT
({)SH
13080 32756 MT
(return strcmp\050 ident, pperson->name \051 == 0;)SH
13080 33887 MT
(})SH
10680 37280 MT
(int hash_a_string\050)
7200 W( name \051)
SH( /*)
6000 W( hashing function */)SH
10680 38411 MT
(char *)
SH( name;)
5400 W( /*)
15600 W( ident is a name str)SH
13080 39542 MT
({)SH
13080 40673 MT
(register int)
SH( hash_value)
4200 W( = 0;)SH
13080 41804 MT
(register char *)
SH( pointer;)2400 W
13080 44066 MT
(/* Loop through each character in the name string: */)SH
13080 45197 MT
(/* and add the character value to the accumulator */)SH
13080 46328 MT
(for \050pointer = name; *pointer != '\1340'; pointer++\051)SH
15480 47459 MT
(hash_value += *pointer;)SH
13080 49721 MT
(/* Return a value in the right range */)SH
13080 50852 MT
(return hash_value % MAX_HASH;)SH
13080 51983 MT
(})SH
10680 55376 MT
(main\050\051 {)SH
13080 56507 MT
(FILE *data_file;)
9000 W( /*)
2400 W( where the person records ar)SH
13080 57638 MT
(HASH person_hash;)
9000 W( /*)
1800 W( where we will store them */)SH
13080 58769 MT
(struct person)
SH( *temp;)
3600 W( /*)
5400 W( pointer to temporary record)SH
13080 59900 MT
(int bytes_read;)
9600 W( /*)
2400 W( count of bytes read from fi)SH
13080 62162 MT
(data_file = fopen\050 "person.records", "r" \051;)
SH( /*)
4800 W( open the da)SH
13080 64424 MT
(/* Now create a hash table for the records */)SH
13080 65555 MT
(person_hash = make_hashtable\050 MAX_HASH, hash_a_string, match_perso)SH
13080 67817 MT
(do {)SH
15480 68948 MT
(/* allocate a new person */)SH
15480 70079 MT
(temp = \050struct person *\051 make_node\050 sizeof\050 struct person \051 \051;)SH
ES
%%Page: 52 53 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(52)SH
21156 XM
(The Hash Table Module - hashPack)SH
46694 XM
(28 June 1988)SH
/Courier-Bold SF
13320 7874 MT
(/* read from the disk */)SH
13320 9005 MT
(bytes_read = fread\050 temp, sizeof\050 struct person \051, 1, data_fil)SH
13320 11267 MT
(if \050bytes_read > 0\051)SH
15720 12398 MT
(add_to_hashtable\050 person_hash, temp->name, temp \051;)SH
10920 13529 MT
(} while \050bytes_read > 0\051;)SH
10920 15791 MT
(if \050get_from_hashtable\050 person_hash, "Zimmermann" \051 != NULL\051)SH
13320 16922 MT
(printf\050 "The person 'Zimmermann' was in the table!\134n" \051;)SH
10920 19184 MT
(for_all_hashtable\050 person_hash, NULL, print_person \051;)SH
10920 21446 MT
(free_hashtable\050 person_hash, AND_NODES \051;)SH
10920 23708 MT
(fclose\050 data_file \051;)SH
10920 24839 MT
(})SH
/Helvetica SF
7232 27406 MT
(The user has a structure that defines a person's payroll information.  Those structures are going to)
49 W( be)50 W
6120 28832 MT
(stored in a hash)
147 W( table, and the table will be indexed by the people's names.  The program reads the)146 W
6120 30258 MT
(records from the file "person.records", stores them in the hash table, and tests)
198 W( to see if there is an)199 W
6120 31684 MT
(element in the table which the user identified as "Zimmermann".)SH
7232 34251 MT
(The hashing function)56 W
/Helvetica-Bold SF
16961 XM
(hash_a_string\050\051)SH
/Helvetica SF
24741 XM
(generates a hashing index)
56 W( by adding the characters in a name)55 W
6120 35677 MT
(string, and passing the low byte back)
42 W( to)43 W
/Helvetica-Oblique SF
24245 XM
(hashPack)SH
/Helvetica SF
(. We)
364 W( have divided the records into 256 \050)43 W
/Helvetica-Bold SF
(MAX_HASH)SH
/Helvetica SF
(\051)SH
6120 37103 MT
(hash lists, but could easily have used any other number.)SH
7232 39670 MT
(The matching function compares identifiers with user elements by doing)
39 W( a string comparison operation)38 W
6120 41096 MT
(between the identifier and the element's name field.  This allows)
248 W( identifying both by known strings)249 W
6120 42522 MT
(\050)SH
/Helvetica-Bold SF
(add_to_hashtable\050\051)SH
/Helvetica SF
15969 XM
(used the actual name field\051 and by created strings \050)70 W
/Helvetica-Bold SF
(get_from_hashtable\050\051)SH
/Helvetica SF
49848 XM
(used a)70 W
6120 43948 MT
(possibly unknown string\051.)SH
7232 46515 MT
(Finally,)SH
/Helvetica-Bold SF
10852 XM
(for_all_hashtable\050\051)SH
/Helvetica SF
20196 XM
(is used to call the)175 W
/Helvetica-Bold SF
29075 XM
(print_person\050\051)SH
/Helvetica SF
36306 XM
(function with all the elements in)
175 W( the)176 W
6120 47941 MT
(table. Note)
328 W( that, unlike the binary tree example, this will not be done in alphabetical order, but in order)
25 W( of)24 W
6120 49367 MT
(hash index.)SH
ES
%%Page: 53 54 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
18259 XM
(Memory Management with mallocPack and memoryPack)SH
53968 XM
(53)SH
16 SS 
8280 8366 MT
(7. Memory)
445 W( Management with mallocPack and memoryPack)SH
10 /Helvetica AF
9392 9792 MT
(Since all)
45 W( of the packages in the toolbox rely heavily on dynamic memory allocation, it seems logical to)46 W
8280 11218 MT
(include a)
219 W( customized memory management package.  In keeping with the naming conventions, that)218 W
8280 12644 MT
(package is called)SH
/Helvetica-Oblique SF
16228 XM
(mallocPack)SH
/Helvetica SF
(.)SH
/Helvetica-Oblique SF
9392 15211 MT
(mallocPack)SH
/Helvetica SF
14790 XM
(provides a memory manager which is tunable for any application program)
8 W( and provides the)9 W
8280 16637 MT
(standard UNIX functions in addition to some extended functions which are both useful)
139 W( to applications,)138 W
8280 18063 MT
(and necessary for some of the functions provided by the other packages.  In the event that)
117 W( a different)118 W
8 SS 
18870 19138 MT
(6)SH
10 SS 
8280 19489 MT
(memory manager must)155 W
19748 XM
(be used, a second set of functions)
155 W( is provided which will work on top of the)154 W
8280 20915 MT
(standard UNIX memory manager.  That package is called)SH
/Helvetica-Oblique SF
34012 XM
(memoryPack)SH
/Helvetica SF
(.)SH
14 /Helvetica-Bold AF
8280 24816 MT
(7.1. The)
389 W( NODE Data Type)SH
10 /Helvetica-Oblique AF
9392 26242 MT
(mallocPack)SH
/Helvetica SF
14950 XM
(and)SH
/Helvetica-Oblique SF
17065 XM
(memoryPack)SH
/Helvetica SF
23346 XM
(provide the single data type)169 W
/Courier SF
36698 XM
(NODE)SH
/Helvetica SF
(. Each)616 W
/Courier SF
42996 XM
(NODE)SH
/Helvetica SF
45843 XM
(points to an area of)169 W
8280 27668 MT
(memory allocated for the user.  Thus, a)143 W
/Courier SF
27098 XM
(NODE)SH
/Helvetica SF
29919 XM
(is simply a generic pointer which may be recast to the)143 W
8280 29094 MT
(user's data type.)SH
9392 31661 MT
(Associated with)
50 W( each)51 W
/Courier SF
19215 XM
(NODE)SH
/Helvetica SF
21944 XM
(is a header which contains information about the memory being allocated.)51 W
8280 33087 MT
(This data is stored in the word before the fist word pointed to by the)SH
/Courier SF
38351 XM
(NODE)SH
/Helvetica SF
(. In)
278 W( it are the following)SH
/Helvetica-Bold SF
8280 34959 MT
(size)SH
/Helvetica SF
17176 XM
(The number of bytes in the)146 W
/Helvetica-Oblique SF
30225 XM
(NODE)SH
/Helvetica SF
(.)SH
/Helvetica-Oblique SF
34240 XM
(mallocPack)SH
/Helvetica SF
39776 XM
(uses a singe byte)
146 W( to index into a)145 W
17176 36102 MT
(table of records used in memory management.  In that)
155 W( table \050see page 65\051 is the)156 W
17176 37245 MT
(actual size of the)SH
/Courier SF
24958 XM
(NODE)SH
/Helvetica SF
(.)SH
/Helvetica-Oblique SF
28192 XM
(memoryPack)SH
/Helvetica SF
34304 XM
(uses a full word for the actual length.)SH
/Helvetica-Bold SF
8280 38871 MT
(refcount)SH
/Helvetica SF
17176 XM
(Each)SH
/Courier SF
19895 XM
(NODE)SH
/Helvetica SF
22734 XM
(has a reference count.  Most applications will allocate and de-allocate)161 W
17176 40014 MT
(without needing this data.  However, there)
115 W( are functions provided to increment and)116 W
17176 41157 MT
(poll the reference count.  When allocated, a)93 W
/Courier SF
37486 XM
(NODE)SH
/Helvetica SF
40257 XM
(has a reference count of)
93 W( 1.  The)92 W
/Helvetica-Bold SF
17176 42300 MT
(free\050\051)SH
/Helvetica SF
20039 XM
(and)SH
/Helvetica-Bold SF
22070 XM
(free_node\050\051)SH
/Helvetica SF
27878 XM
(functions will decrement the count.)
85 W( If)
450 W( the reference count is)86 W
17176 43443 MT
(0, the)SH
/Courier SF
19956 XM
(node)SH
/Helvetica SF
22634 XM
(is added to the free list.)SH
/Helvetica-Bold SF
8280 45069 MT
(magic)SH
/Helvetica SF
17176 XM
(Finally, each)31 W
/Courier SF
23129 XM
(NODE)SH
/Helvetica SF
25838 XM
(has a field filled with a magic number.)
31 W( All)
338 W( the routines check this,)30 W
17176 46212 MT
(and will report an error if)
68 W( the field is incorrect.  Generally, this indicates a flaw in the)69 W
17176 47355 MT
(user's use of memory.)SH
14 /Helvetica-Bold AF
8280 51256 MT
(7.2. mallocPack)
389 W( Function)SH
10 /Helvetica AF
9392 52682 MT
(The)SH
/Helvetica-Oblique SF
11415 XM
(mallocPack)SH
/Helvetica SF
16826 XM
(functions are simply a superset of those provided by the UNIX)21 W
/Helvetica-Bold SF
44736 XM
(malloc\0503\051)SH
/Helvetica SF
49425 XM
(module. For)320 W
8280 54108 MT
(most applications,)
11 W( the user can consider them interchangable.  However, there a some extended features)12 W
8280 55534 MT
(of)SH
/Helvetica-Oblique SF
9392 XM
(mallocPack)SH
/Helvetica SF
14782 XM
(which can be quite useful.)SH
12 /Helvetica-Bold AF
8280 59289 MT
(7.2.1. \050NODE\051)
334 W( malloc\050 \050int\051 size \051)SH
10 /Helvetica AF
9392 60715 MT
(Returns a pointer to a block of memory at least \050)SH
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
33145 XM
(size)SH
/Helvetica SF
35313 XM
(long, and aligned on a full-word boundary.)SH
9392 63282 MT
(If there was insufficient memory available,)141 W
/Helvetica-Bold SF
29078 XM
(malloc\050\051)SH
/Helvetica SF
33331 XM
(will return)141 W
8 SS 
38169 XM
(NULL)SH
10 SS 
(. Also,)559 W
8 SS 
43971 XM
(NULL)SH
10 SS 
46435 XM
(will be returned for)140 W
/Helvetica-Bold SF
8280 64708 MT
(malloc\050 0 \051)SH
/Helvetica SF
(.)SH
10800 50 8280 70292 UL
6 SS 
9170 71687 MT
(6)SH
8 SS 
9504 72000 MT
(For example, to interface with)SH
/Helvetica-Oblique SF
20218 XM
(LISP)SH
/Helvetica SF
22175 XM
(code, or to run under a different operating system.)SH
ES
%%Page: 54 55 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(54)SH
16099 XM
(Memory Management with mallocPack and memoryPack)SH
46694 XM
(28 June 1988)SH
12 SS 
6120 8075 MT
(7.2.2. free\050)
334 W( \050NODE\051 node \051)SH
10 /Helvetica AF
7232 9501 MT
(Returns a block of memory pointed to by \050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
28806 XM
(node)SH
/Helvetica SF
31473 XM
(to the system.  The error message)SH
/Courier-Bold SF
8520 11306 MT
(free: Attempt)
600 W( to free a \050probably\051 freed node)SH
/Helvetica SF
6120 12887 MT
(will be written to the)74 W
/Helvetica-Bold SF
15549 XM
(stderr)SH
/Helvetica SF
18735 XM
(stream in case the)74 W
/Courier SF
27479 XM
(NODE)SH
/Helvetica SF
30231 XM
(does not appear to be a valid)74 W
/Helvetica-Oblique SF
43924 XM
(mallocPack)SH
/Courier SF
49389 XM
(NODE)SH
/Helvetica SF
52142 XM
(in)SH
6120 14313 MT
(use. This)
340 W( can be caused by trying to)30 W
/Helvetica-Bold SF
22956 XM
(free\050\051)SH
/Helvetica SF
25764 XM
(a)SH
/Courier SF
26628 XM
(NODE)SH
/Helvetica SF
29336 XM
(more often than its reference count \050usually freeing it)30 W
6120 15739 MT
(twice\051; trying to free)
117 W( a random pointer, or one not allocated through)118 W
/Helvetica-Oblique SF
37381 XM
(mallocPack)SH
/Helvetica SF
(; or by writing over the)118 W
6120 17165 MT
(header information in the)SH
/Courier SF
17459 XM
(NODE)SH
/Helvetica SF
(.)SH
7232 19732 MT
(Attempts to)SH
/Helvetica-Bold SF
12568 XM
(free\050)SH
8 /Helvetica AF
15013 XM
(NULL)SH
10 /Helvetica-Bold AF
17337 XM
(\051)SH
/Helvetica SF
17948 XM
(are ignored.)SH
12 /Helvetica-Bold AF
6120 23487 MT
(7.2.3. \050NODE\051)
334 W( realloc\050 \050NODE\051 node, \050int\051 new_size \051)SH
10 /Helvetica AF
7232 24913 MT
(A pointer to a block of memory at least \050)31 W
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
27627 XM
(new_size)SH
/Helvetica SF
32327 XM
(bytes long is returned, and the data pointed)
31 W( to)30 W
6120 26339 MT
(by \050)SH
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
10798 XM
(node)SH
/Helvetica SF
13465 XM
(is copied into the newly allocated block.  Finally,)SH
/Helvetica-Bold SF
34974 XM
(node)SH
/Helvetica SF
37641 XM
(is freed.)SH
7232 28906 MT
(If there was insufficient memory available,)137 W
/Helvetica-Bold SF
26894 XM
(realloc\050\051)SH
/Helvetica SF
31199 XM
(will return)137 W
8 SS 
36029 XM
(NULL)SH
10 SS 
(. Also,)552 W
8 SS 
41821 XM
(NULL)SH
10 SS 
44282 XM
(will be)
137 W( returned for)138 W
/Helvetica-Bold SF
6120 30332 MT
(realloc\050 0 \051)SH
/Helvetica SF
(.)SH
/Helvetica-Bold SF
7232 32899 MT
(realloc\050)SH
8 /Helvetica AF
11194 XM
(NULL)SH
10 SS 
(, new_size)127 W
/Helvetica-Bold SF
18496 XM
(\051)SH
/Helvetica SF
19234 XM
(is the same as)127 W
/Helvetica-Bold SF
26467 XM
(malloc\050)SH
/Helvetica SF
30373 XM
(new_size)SH
/Helvetica-Bold SF
34946 XM
(\051)SH
/Helvetica SF
(.)SH
/Helvetica-Bold SF
36366 XM
(realloc\050 pointer, 0 \051)126 W
/Helvetica SF
46095 XM
(is the same as)126 W
/Helvetica-Bold SF
6120 34325 MT
(free\050 pointer \051)SH
/Helvetica SF
(.)SH
12 /Helvetica-Bold AF
6120 38080 MT
(7.2.4. \050NODE\051)
334 W( calloc\050 \050int\051 number, \050int\051 size \051)SH
10 /Helvetica AF
7232 39506 MT
(This function returns)
189 W( a pointer to a block of memory big enough to hold \050)190 W
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
44395 XM
(number)SH
/Helvetica SF
48530 XM
(structures)SH
6120 40932 MT
(contiguously, each of which is \050)210 W
/Courier SF
(int)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
23630 XM
(size)SH
/Helvetica SF
26008 XM
(bytes long.  The)
210 W( memory will be cleared to)209 W
8 SS 
46899 XM
(NUL)SH
10 SS 
48987 XM
(bytes by)209 W
/Helvetica-Bold SF
6120 42358 MT
(calloc\050\051)SH
/Helvetica SF
(.)SH
12 /Helvetica-Bold AF
6120 46113 MT
(7.2.5. \050NODE\051)
334 W( copy_alloc\050 \050NODE\051 node \051)SH
10 /Helvetica AF
7232 47539 MT
(Returns a pointer to a block of)
5 W( memory which contains a byte-for-byte copy of that pointed to by \050)6 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
6120 48965 MT
(node)SH
/Helvetica SF
(. Of)
278 W( course, the)SH
/Courier SF
15902 XM
(NODE)SH
/Helvetica SF
18580 XM
(being copied must have been allocated originally through)SH
/Helvetica-Oblique SF
44093 XM
(mallocPack)SH
/Helvetica SF
(.)SH
7232 51532 MT
(If there was insufficient memory available,)SH
/Helvetica-Bold SF
26072 XM
(copy_alloc\050\051)SH
/Helvetica SF
32185 XM
(will return)SH
8 SS 
36741 XM
(NULL)SH
10 SS 
(.)SH
12 /Helvetica-Bold AF
6120 55287 MT
(7.2.6. \050NODE\051)
334 W( dup_alloc\050 \050NODE\051 node \051)SH
10 /Helvetica AF
7232 56713 MT
(Increments the reference count of \050)99 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
26400 XM
(node)SH
/Helvetica SF
(, thus preventing)99 W
/Helvetica-Bold SF
36757 XM
(free\050\051)SH
/Helvetica SF
39634 XM
(from returning)
99 W( the memory to)98 W
6120 58139 MT
(the system.  When)34 W
/Helvetica-Bold SF
14815 XM
(free\050\051)SH
/Helvetica SF
17627 XM
(is called on a)35 W
/Courier SF
23881 XM
(NODE)SH
/Helvetica SF
26594 XM
(with a reference count greater than 1, it simply decrements)35 W
6120 59565 MT
(the reference count.)SH
7232 62132 MT
(This feature is useful when several pieces of software share data structures, and neither wishes)
115 W( the)114 W
6120 63558 MT
(responsibility for freeing them when they are no longer in use.  Each module)
198 W( simply increments the)199 W
6120 64984 MT
(reference counter when it first accesses the data.  Then, the call to)85 W
/Helvetica-Bold SF
36962 XM
(free\050\051)SH
/Helvetica SF
39825 XM
(that structure)
85 W( can be used to)84 W
6120 66410 MT
(defer action to the other modules.)SH
7232 68977 MT
(When the reference count hits some arbitrarily large number \050currently 254\051, the)194 W
/Courier SF
45130 XM
(NODE)SH
/Helvetica SF
48003 XM
(will remain)195 W
6120 70403 MT
(permanently in use.)SH
ES
%%Page: 55 56 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
18259 XM
(Memory Management with mallocPack and memoryPack)SH
53968 XM
(55)SH
12 SS 
8280 8075 MT
(7.2.7. \050int\051)
334 W( alloc_refcount\050 \050NODE\051 node \051)SH
10 /Helvetica AF
9392 9501 MT
(Returns the current reference)
69 W( count on \050)68 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
30668 XM
(node)SH
/Helvetica SF
(. This)
414 W( is useful if the data structure accessed by)68 W
/Helvetica-Bold SF
8280 10927 MT
(node)SH
/Helvetica SF
10947 XM
(contains other pointers which must be freed before freeing the)SH
/Courier SF
38683 XM
(NODE)SH
/Helvetica SF
41361 XM
(itself.)SH
12 /Helvetica-Bold AF
8280 14682 MT
(7.2.8. \050int\051)
334 W( alloc_size\050 \050NODE\051 node \051)SH
10 /Helvetica AF
9392 16108 MT
(This function returns the number of bytes in \050)80 W
/Courier SF
(NODE)SH
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
32965 XM
(node)SH
/Helvetica SF
(. This)
438 W( is at least as large)
80 W( as the number of)81 W
8280 17534 MT
(bytes specified when the block was created.)SH
12 /Helvetica-Bold AF
8280 21289 MT
(7.2.9. mstats\050)
334 W( \050FILE *\051 fp, \050char *\051 title \051)SH
10 /Helvetica AF
9392 22715 MT
(A useful function which will write a table)
71 W( of statistics to \050)70 W
/Courier SF
(FILE *)70 W
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
39029 XM
(fp)SH
/Helvetica SF
(. \050)418 W
/Courier SF
(char *)70 W
/Helvetica SF
(\051)SH
/Helvetica-Bold SF
45631 XM
(title)SH
/Helvetica SF
47757 XM
(is a string which)70 W
8280 24141 MT
(will be printed atop the table so that multiple snapshots of memory use may be labeled.)SH
/Courier-Bold SF
10680 25946 MT
(Memory allocation statistics for 'Before program shutdown')SH
10680 27077 MT
(Sizes up to:)
SH( in)
1800 W( use: free:)
SH( malloc'd:)
1200 W( Avg)
3600 W( Bytes wasted:)SH
15480 28208 MT
(16 9)
3000 W( 55)
3600 W( 49)
3000 W( 5)7800 W
15480 29339 MT
(20 2)
3000 W( 202)
3600 W( 1059)
2400 W( 0)6600 W
15480 30470 MT
(32 3)
3000 W( 29)
3600 W( 70)
3000 W( 3)7800 W
15480 31601 MT
(64 4)
3000 W( 236)
3600 W( 361)
2400 W( 6)7200 W
15480 32732 MT
(128 3)
2400 W( 21)
3600 W( 27)
3000 W( 8)7800 W
15480 33863 MT
(256 0)
2400 W( 4 4)
3600 W( 58)8400 W
15480 34994 MT
(512 0)
2400 W( 2 3)
3600 W( 87)8400 W
15480 36125 MT
(1024 0)
1800 W( 4 5)
3600 W( 93)8400 W
10680 37256 MT
(<big nodes>)
SH( 2)
2400 W( 1 11)3600 W
15480 38387 MT
(0x3c000, refcount\0500\051, size\0502K\051)SH
15480 39518 MT
(0x3e000, refcount\0501\051, size\0502K\051)SH
15480 40649 MT
(0x37000, refcount\0503\051, size\0501K\051)SH
10680 42911 MT
(Total Allocated = 35Kbytes)SH
/Helvetica SF
9392 45478 MT
(Each row in the table describes the activity done on)8 W
/Courier SF
32539 XM
(NODE)SH
/Helvetica SF
(s of up to that many bytes)
8 W( in length \050including)9 W
8280 46904 MT
(the header information\051.  That activity relates:)SH
8280 48776 MT
(in use)SH
17176 XM
(The number of)SH
/Courier SF
23957 XM
(NODE)SH
/Helvetica SF
(s of this size that have not been freed by the user.)SH
2668 50 8280 48976 UL
8280 50402 MT
(free)SH
17176 XM
(The number of)127 W
/Courier SF
24338 XM
(NODE)SH
/Helvetica SF
(s of this size that are on the free list,)
127 W( and will be used before)126 W
1723 50 8280 50602 UL
17176 51545 MT
(requesting more memory from the system.)SH
8280 53171 MT
(malloc'd)SH
17176 XM
(The number of times)29 W
/Helvetica-Bold SF
26740 XM
(malloc\050\051)SH
/Helvetica SF
(, was called to obtain)29 W
/Courier SF
40335 XM
(NODE)SH
/Helvetica SF
(s of this size.  This includes)29 W
3667 50 8280 53371 UL
17176 54314 MT
(calls to)SH
/Helvetica-Bold SF
20566 XM
(calloc\050\051)SH
/Helvetica SF
(, and)SH
/Helvetica-Bold SF
26569 XM
(realloc\050\051)SH
/Helvetica SF
(.)SH
8280 55940 MT
(Avg Bytes wasted)SH
17176 XM
(The average difference between the number of bytes requested and the size)
98 W( of the)97 W
7948 50 8280 56140 UL
/Courier SF
17176 57083 MT
(NODE)SH
/Helvetica SF
19854 XM
(returned.)SH
17176 58709 MT
(This field may be used)
154 W( for fine-tuning)155 W
/Helvetica-Oblique SF
34931 XM
(mallocPack)SH
/Helvetica SF
(. If)
588 W( the number of bytes wasted)155 W
17176 59852 MT
(becomes high relative to the size of the)207 W
/Courier SF
36452 XM
(NODE)SH
/Helvetica SF
(s involved, or)
207 W( if a large number of)206 W
/Courier SF
17176 60995 MT
(NODE)SH
/Helvetica SF
(s of a certain size are expected, additional)157 W
/Courier SF
39786 XM
(NODE)SH
/Helvetica SF
42621 XM
(sizes may be added to)
157 W( the)158 W
17176 62138 MT
(table. For)
278 W( instance, the 20 bytes)SH
/Courier SF
31962 XM
(NODE)SH
/Helvetica SF
(s are specially provided for the use of)SH
/Helvetica-Oblique SF
51203 XM
(listPack)SH
/Helvetica SF
(.)SH
/Helvetica-Oblique SF
9392 63564 MT
(mallocPack)SH
/Helvetica SF
15011 XM
(treats)SH
/Courier SF
18019 XM
(NODE)SH
/Helvetica SF
(s larger than 1024 \0501K\051 bytes specially, in that the)
229 W( header is placed in a)228 W
8280 64990 MT
(separate, smaller)3 W
/Courier SF
16233 XM
(NODE)SH
/Helvetica SF
(. This)
284 W( greatly reduces)
3 W( memory size for programs which allocate blocks of memory)4 W
8280 66416 MT
(in kilo-byte chunks.  These blocks are refered to as)SH
/Helvetica-Bold SF
31123 XM
(bignodes)SH
/Helvetica SF
(, and are listed after the table.)SH
9392 68983 MT
(Note that there will be one 16 byte)46 W
/Courier SF
25213 XM
(NODE)SH
/Helvetica SF
27937 XM
(in use for each)46 W
/Helvetica-Bold SF
34958 XM
(bignode)SH
/Helvetica SF
(, regardless of)
46 W( whether the)45 W
/Helvetica-Bold SF
51191 XM
(bignode)SH
/Helvetica SF
8280 70409 MT
(is in use.)SH
ES
%%Page: 56 57 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(56)SH
16099 XM
(Memory Management with mallocPack and memoryPack)SH
46694 XM
(28 June 1988)SH
14 SS 
6120 8221 MT
(7.3. memoryPack)
389 W( Functions)SH
10 /Helvetica-Oblique AF
7232 9647 MT
(memoryPack)SH
/Helvetica SF
13613 XM
(functions are normally redefined by)
269 W( the)270 W
/Helvetica-Oblique SF
32737 XM
(C)SH
/Helvetica SF
34007 XM
(pre-processor through macros to be the)270 W
6120 11073 MT
(corresponding functions in)219 W
/Helvetica-Oblique SF
18727 XM
(mallocPack)SH
/Helvetica SF
(. In)
715 W( order to use the)218 W
/Helvetica-Oblique SF
34594 XM
(memoryPack)SH
/Helvetica SF
40924 XM
(functions, a pre-processor)218 W
6120 12499 MT
(directive must be placed in your code before you include the toolbox libraries.)SH
/Courier-Bold SF
8520 14304 MT
(#define memoryPack)
1200 W( /*)
6600 W( use memoryPack rather than mallocPa)SH
8520 15435 MT
(#include "listPack.h")
SH( /*)
6000 W( and use the listPack routines */)SH
/Helvetica SF
7232 18002 MT
(Removing the)30 W
/Courier SF
13739 XM
(memoryPack)SH
/Helvetica SF
20047 XM
(definition, and recompiling will cause your)
30 W( software to use the)31 W
/Helvetica-Oblique SF
47808 XM
(mallocPack)SH
/Helvetica SF
6120 19428 MT
(functions directly.  Thus, the)49 W
/Helvetica-Oblique SF
19093 XM
(memoryPack)SH
/Helvetica SF
25254 XM
(functions can be used to insulate code from)48 W
/Helvetica-Oblique SF
45204 XM
(mallocPack)SH
/Helvetica SF
50642 XM
(while)SH
6120 20854 MT
(allowing full functionality with no overhead if)SH
/Helvetica-Oblique SF
25795 XM
(mallocPack)SH
/Helvetica SF
31185 XM
(is used.)SH
7232 23421 MT
(The other toolbox packages use this strategy \050see page 69\051.)3 W
/Helvetica-Oblique SF
34446 XM
(mallocPack)SH
/Helvetica SF
39839 XM
(can be much more efficient in)4 W
6120 24847 MT
(its use of memory than the standard functions, because of its close interface with the toolbox.)SH
6120 26530 MT
(mallocPack Function)SH
20520 XM
(memoryPack Equivalent)SH
38520 XM
(Standard/Extended Function)SH
9225 50 6120 26730 UL
10781 50 20520 26730 UL
12674 50 38520 26730 UL
6120 27673 MT
(malloc\050 node \051)SH
20520 XM
(make_node\050 size \051)SH
38520 XM
(Standard)SH
6120 28816 MT
(realloc\050 node, new_size \051)SH
20520 XM
(change_node_size\050node,new_size\051)SH
38520 XM
(Standard)SH
6120 29959 MT
(calloc\050 number, size \051)SH
20520 XM
(make_clear_node\050 size \051)SH
38520 XM
(Standard)SH
6120 31102 MT
(free\050 node \051)SH
20520 XM
(free_node\050 node \051)SH
38520 XM
(Standard)SH
6120 32245 MT
(copy_alloc\050 node \051)SH
20520 XM
(copy_node\050 node \051)SH
38520 XM
(Extended)SH
6120 33388 MT
(dup_alloc\050 node \051)SH
20520 XM
(dup_node\050 node \051)SH
38520 XM
(Extended)SH
6120 34531 MT
(alloc_refcount\050 node \051)SH
20520 XM
(node_refcount\050 node \051)SH
38520 XM
(Extended)SH
6120 35674 MT
(alloc_size\050 node \051)SH
20520 XM
(node_size\050 node \051)SH
38520 XM
(Extended)SH
6120 36817 MT
(mstats\050 fp, title \051)SH
20520 XM
(memory_stats\050 fp, title \051)SH
38520 XM
(Extended)SH
ES
%%Page: 57 58 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
26373 XM
(Installing The Toolbox)SH
53968 XM
(57)SH
16 SS 
8280 8366 MT
(8. Installing)
445 W( The Toolbox)SH
10 /Helvetica AF
9392 9792 MT
(The simplest way to install the toolbox is to use the associated)SH
/Courier SF
37238 XM
(makefile)SH
/Helvetica SF
(. The)
278 W( command)SH
/Courier-Bold SF
10680 11597 MT
(prompt> make)
600 W( toolbox)SH
/Helvetica SF
8280 13178 MT
(Will create a new version of all software, using the default options.  For historic reasons, the toolbox)
99 W( is)98 W
8280 14604 MT
(called)SH
/Courier SF
11170 XM
(liblist.a)SH
/Helvetica SF
(.)SH
9392 17171 MT
(In the event that a new version of the library must be created manually, or a version with)
35 W( options other)36 W
8280 18597 MT
(than the defaults is needed, the following commands are necessary:)SH
/Courier-Bold SF
10680 20402 MT
(prompt> cc)
600 W( <options> -c listPack.c)SH
10680 21533 MT
(prompt> cc)
600 W( <options> -c alistPack.c)SH
10680 22664 MT
(prompt> cc)
600 W( <options> -c hashPack.c)SH
10680 23795 MT
(prompt> cc)
600 W( <options> -c memoryPack.c)SH
10680 24926 MT
(prompt> cc)
600 W( <options> -c mallocPack.c)SH
10680 26057 MT
(prompt> ar)
600 W( cuv liblist.a listPack.o alistPack.o memoryPack.o mallocPa)SH
10680 27188 MT
(prompt> ranlib)
600 W( liblist.a)SH
/Helvetica SF
9392 29755 MT
(All of the toolbox modules use the same compile-time options.  That is to say, the modules need to be)38 W
8280 31181 MT
(re-compiled to change their behavior, and user software must be)
59 W( re-linked after the library has changed.)60 W
8 SS 
54469 32256 MT
(7)SH
10 SS 
8280 32607 MT
(Several options may be used at the same time, and different options may be used with different modules)SH
14 /Helvetica-Bold AF
8280 36508 MT
(8.1. The)
389 W( DEBUG Option)SH
10 /Helvetica AF
9392 37934 MT
(This option will cause the compiler to generate a)180 W
/Helvetica-Bold SF
32688 XM
(main\050\051)SH
/Helvetica SF
36146 XM
(routine for the module in question.)
180 W( That)636 W
8 SS 
32261 39009 MT
(8)SH
10 SS 
8280 39360 MT
(module may not be archived into the toolbox library)170 W
32706 XM
(, but)
170 W( the program resulting from the compile will)171 W
8280 40786 MT
(exercise the module's functions.  Unless error messages get printed, the user can assume everything)
67 W( is)66 W
8280 42212 MT
(working correctly.)SH
9392 44779 MT
(The)SH
/Helvetica-Bold SF
11556 XM
(main\050\051)SH
/Helvetica SF
14997 XM
(function at the end)
163 W( of the each module's code is also a good way to see how various)164 W
8280 46205 MT
(functions are used.)SH
9392 48772 MT
(In order to use the)SH
/Helvetica-Bold SF
17786 XM
(DEBUG)SH
/Helvetica SF
21675 XM
(option it is necessary to compile with the switch)SH
/Helvetica-Bold SF
42905 XM
(-DDEBUG)SH
/Helvetica SF
(.)SH
14 /Helvetica-Bold AF
8280 52673 MT
(8.2. The)
389 W( DO_CHECK Option)SH
10 /Helvetica AF
9392 54099 MT
(When modules are compiled with this option, run-time)
227 W( checking on the internal data structures is)226 W
8280 55525 MT
(performed whenever a function is called.  The level of)
97 W( checking must be specified at compile-time, and)98 W
8280 56951 MT
(varies from 0 through 3.)SH
9392 59518 MT
(The option)332 W
/Helvetica-Bold SF
15059 XM
(-DDO_CHECK=0)SH
/Helvetica SF
23475 XM
(is the default, and disables run-time)
332 W( checking which can be very)331 W
8280 60944 MT
(expensive. Minimal)
278 W( error checking will still be performed, of course.)SH
9392 63511 MT
(The option)213 W
/Helvetica-Bold SF
14821 XM
(-DDO_CHECK=1)SH
/Helvetica SF
23119 XM
(will cause the module to to test for)214 W
8 SS 
40227 XM
(NULL)SH
10 SS 
42765 XM
(pointers passed instead of)214 W
8280 64937 MT
(pointers to valid objects.)SH
10800 50 8280 68384 UL
6 SS 
9170 69779 MT
(7)SH
8 SS 
9504 70092 MT
(The)SH
/Helvetica-Bold SF
11105 XM
(memoryPack)SH
/Helvetica SF
16308 XM
(option, however,)SH
/Helvetica-Bold SF
22400 XM
(must)SH
/Helvetica SF
24533 XM
(be consistant across modules.)SH
1911 50 22400 70292 UL
6 SS 
9170 71687 MT
(8)SH
8 SS 
9504 72000 MT
(Note that it may be necessary to link against the toolbox to resolve function references.)SH
ES
%%Page: 58 59 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(58)SH
24213 XM
(Installing The Toolbox)SH
46694 XM
(28 June 1988)SH
/Helvetica SF
7232 7929 MT
(The option)190 W
/Helvetica-Bold SF
12615 XM
(-DDO_CHECK=2)SH
/Helvetica SF
20889 XM
(will additionally check to see it)
190 W( the object was in fact created by the)189 W
6120 9355 MT
(module using it.  This is the default level of checking for)SH
/Helvetica-Oblique SF
30909 XM
(mallocPack)SH
/Helvetica SF
36299 XM
(only.)SH
7232 11922 MT
(The option)27 W
/Helvetica-Bold SF
12289 XM
(-DDO_CHECK=3)SH
/Helvetica SF
20401 XM
(causes full checking to be done on each object including verifying that all)28 W
6120 13348 MT
(internal pointers have not been corrupted, sizes are correct, etc.)SH
14 /Helvetica-Bold AF
6120 17249 MT
(8.3. The)
389 W( memoryPack Option)SH
10 /Helvetica AF
7232 18675 MT
(When compiled with this option, the toolbox modules will use)15 W
/Helvetica-Oblique SF
34504 XM
(memoryPack)SH
/Helvetica SF
40631 XM
(functions as opposed to)
15 W( the)14 W
6120 20101 MT
(ones in)52 W
/Helvetica-Oblique SF
9726 XM
(mallocPack)SH
/Helvetica SF
(. Note)
382 W( that)52 W
/Helvetica-Oblique SF
20216 XM
(memoryPack)SH
/Helvetica SF
26380 XM
(and)SH
/Helvetica-Oblique SF
28378 XM
(mallocPack)SH
/Helvetica SF
33821 XM
(will ignore this option, and that either all or)53 W
1000 50 50700 20301 UL
6120 21527 MT
(none of the other)
67 W( modules must be compiled this way.  Otherwise, inconsistant use of memory modules)66 W
2224 50 6120 21727 UL
6120 22953 MT
(may result.)SH
7232 25520 MT
(To use this option, compile the toolbox modules)SH
/Helvetica-Bold SF
28631 XM
(-DmemoryPack)SH
/Helvetica SF
(.)SH
14 /Helvetica-Bold AF
6120 29421 MT
(8.4. Allowing)
389 W( for the standard debugger)SH
10 /Helvetica AF
7232 30847 MT
(In order to be able to)
55 W( use the system debugger \050)56 W
/Helvetica-Bold SF
(dbx\0501\051)SH
/Helvetica SF
(, etc.\051, simply compile with the)56 W
/Helvetica-Bold SF
46083 XM
(-g)SH
/Helvetica SF
47361 XM
(option. This)390 W
6120 32273 MT
(will cause the code size to increase to allow for the inclusion of a)
11 W( symbol table, but will not affect the code)10 W
6120 33699 MT
(in any other way.  Most debugging will find the internals of the toolbox not worth)
143 W( the effort, so debug)144 W
6120 35125 MT
(support is usually disabled in the toolbox.)SH
7232 37692 MT
(However,)SH
/Helvetica-Oblique SF
11747 XM
(mallocPack)SH
/Helvetica SF
17151 XM
(is generally compiled for debugging to allow knowledgable wizards to get access)13 W
6120 39118 MT
(to the current state of memory management.)
55 W( The)
390 W( first normal place to look when debugging is the error)56 W
6120 40544 MT
(reporting code in)223 W
/Helvetica-Bold SF
14515 XM
(free\050\051)SH
/Helvetica SF
(. Setting)
724 W( a breakpoint there)
223 W( is the simplest way to find where bad memory)222 W
6120 41970 MT
(references are generated.)SH
7232 44537 MT
(The other handy place to look is the variable)42 W
/Helvetica-Bold SF
27510 XM
(node_table)SH
/Helvetica SF
33110 XM
(which is the basis of the statistics generated)43 W
6120 45963 MT
(by)SH
/Helvetica-Bold SF
7454 XM
(mstats\050\051)SH
/Helvetica SF
11621 XM
(\050see page 55\051.)SH
ES
%%Page: 59 60 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
30374 XM
(Index)SH
53968 XM
(59)SH
16 SS 
8280 8366 MT
(Index)SH
8 /Helvetica AF
12730 9320 MT
(\050int\051 node_refcount\050 node \051)
SH( 56)666 W
12730 10274 MT
(\050int\051 node_size\050 node \051)
SH( 56)666 W
12730 11228 MT
(\050NODE\051 change_node_size\050 old_node, new_size \051)
SH( 56)666 W
12730 12182 MT
(\050NODE\051 copy_node\050 node \051)
SH( 56)666 W
12730 13136 MT
(\050NODE\051 make_clear_node\050 size \051)
SH( 56)666 W
12730 14090 MT
(\050NODE\051 make_node\050 size \051)
SH( 56)666 W
12730 15044 MT
(\050void\051 free_node\050 node \051)
SH( 56)666 W
12730 16952 MT
(add_to_ahead\050 alist, element \051)
SH( 27)666 W
12730 17906 MT
(add_to_ahead_val\050 alist, element, value \051)
SH( 30)666 W
12730 18860 MT
(add_to_atail\050 alist, element \051)
SH( 27)666 W
12730 19814 MT
(add_to_atail_val\050 alist, element, value \051)
SH( 30)666 W
12730 20768 MT
(add_to_bintree\050 tree, ident, node \051)
SH( 40)666 W
12730 21722 MT
(add_to_hashtable\050 table, node, ident \051)
SH( 49)666 W
12730 22676 MT
(add_to_head\050 list, element \051)
SH( 9)666 W
12730 23630 MT
(add_to_head_val\050 list, element, value \051)
SH( 13)666 W
12730 24584 MT
(add_to_tail\050 list, element \051)
SH( 10)666 W
12730 25538 MT
(add_to_tail_val\050 list, element, value \051)
SH( 13)666 W
12730 26492 MT
(add_unique_to_bintree\050 tree, ident, node \051)
SH( 40)666 W
12730 27446 MT
(add_unique_to_hashtable\050 table, node, ident \051)
SH( 49)666 W
12730 28400 MT
(alist_empty\050 alist \051)
SH( 29)666 W
12730 29354 MT
(alist_equal\050 alist1, alist2, func \051)
SH( 31)666 W
12730 30308 MT
(alist_length\050 alist \051)
SH( 29)666 W
12730 31262 MT
(alloc_refcount\050 node \051)
SH( 55)666 W
12730 32216 MT
(alloc_size\050 node \051)
SH( 55)666 W
12730 33170 MT
(append_alist\050 first, second \051)
SH( 28)666 W
12730 34124 MT
(append_list\050 first, second \051)
SH( 10)666 W
12730 35078 MT
(aqueue_empty\050 aqueue \051)
SH( 34)666 W
12730 36032 MT
(astack_empty\050 astack \051)
SH( 33)666 W
12730 37940 MT
(bintree_empty\050 tree \051)
SH( 41)666 W
12730 39848 MT
(calloc\050 number, size \051)
SH( 54)666 W
12730 40802 MT
(change_alist_val\050 alist, element, new_val \051)
SH( 31)666 W
12730 41756 MT
(change_list_val\050 list, element, new_val \051)
SH( 14)666 W
12730 42710 MT
(copy_alist\050 alist, flag \051)
SH( 26)444 W
12730 43664 MT
(copy_alloc\050 node \051)
SH( 54)666 W
12730 44618 MT
(copy_bintree\050 tree, flag \051)
SH( 39)666 W
12730 45572 MT
(copy_list\050 list, flag \051)
SH( 8)444 W
12730 47480 MT
(deaqueue\050 aqueue \051)
SH( 34)666 W
12730 48434 MT
(delete_alist_node\050 alist, element \051)
SH( 29)666 W
12730 49388 MT
(delete_alist_pos\050 alist, pos \051)
SH( 29)666 W
12730 50342 MT
(delete_alist_val\050 alist, value \051)
SH( 30)666 W
12730 51296 MT
(delete_from_bintree\050 tree, ident \051)
SH( 40)666 W
12730 52250 MT
(delete_from_hashtable\050 table, ident \051)
SH( 49)666 W
12730 53204 MT
(delete_list_node\050 list, element \051)
SH( 12)666 W
12730 54158 MT
(delete_list_pos\050 list, pos \051)
SH( 12)666 W
12730 55112 MT
(delete_list_val\050 list, value \051)
SH( 13)666 W
12730 56066 MT
(dequeue\050 queue \051)
SH( 19)666 W
12730 57020 MT
(dup_alloc\050 node \051)
SH( 54)666 W
12730 57974 MT
(dup_node\050 node \051)
SH( 56)666 W
12730 59882 MT
(enaqueue\050 aqueue, element \051)
SH( 33)666 W
12730 60836 MT
(enqueue\050 queue, element \051)
SH( 19)666 W
12730 61790 MT
(eval_alist\050 alist, func \051)
SH( 31)666 W
12730 62744 MT
(eval_list\050 list, func \051)
SH( 15)666 W
12730 64652 MT
(first_in_alist\050 alist, element \051)
SH( 30)666 W
12730 65606 MT
(first_in_list\050 list, element \051)
SH( 12)666 W
12730 66560 MT
(flush_alist\050 alist, flag \051)
SH( 27)666 W
12730 67514 MT
(flush_list\050 list, flag \051)
SH( 9)666 W
12730 68468 MT
(for_all_alist\050 alist, ptr, func \051)
SH( 31)666 W
12730 69422 MT
(for_all_bintree\050 tree, node, func \051)
SH( 40)666 W
12730 70376 MT
(for_all_hashtable\050 table, node, func \051)
SH( 50)666 W
12730 71330 MT
(for_all_list\050 list, ptr, func \051)
SH( 14)666 W
ES
%%Page: 60 61 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(60)SH
28214 XM
(Index)SH
46694 XM
(28 June 1988)SH
8 /Helvetica AF
10570 7783 MT
(free\050 node \051)
SH( 54)666 W
10570 8737 MT
(free_alist\050 alist, flag \051)
SH( 27)666 W
10570 9691 MT
(free_aqueue\050 aqueue, flag \051)
SH( 33)666 W
10570 10645 MT
(free_astack\050 astack, flag \051)
SH( 33)666 W
10570 11599 MT
(free_bintree\050 tree, flag \051)
SH( 40)666 W
10570 12553 MT
(free_hashtable\050 table, flag \051)
SH( 49)666 W
10570 13507 MT
(free_list\050 list, flag \051)
SH( 9)666 W
10570 14461 MT
(free_queue\050 queue, flag \051)
SH( 19)666 W
10570 15415 MT
(free_stack\050 stack, flag \051)
SH( 18)666 W
10570 17323 MT
(get_ahead_val\050 alist \051)
SH( 30)666 W
10570 18277 MT
(get_alist_head\050 alist \051)
SH( 28)666 W
10570 19231 MT
(get_alist_next\050 alist, current \051)
SH( 32)666 W
10570 20185 MT
(get_alist_next_func\050 alist, current, ptr, func \051)
SH( 32)666 W
10570 21139 MT
(get_alist_pos\050 alist, pos \051)
SH( 29)666 W
10570 22093 MT
(get_alist_pos_val\050 alist, pos \051)
SH( 31)666 W
10570 23047 MT
(get_alist_prev\050 alist, current \051)
SH( 32)666 W
10570 24001 MT
(get_alist_tail\050 alist \051)
SH( 28)666 W
10570 24955 MT
(get_alist_val\050 alist, value \051)
SH( 30)666 W
10570 25909 MT
(get_anode_val\050 alist, element \051)
SH( 30)666 W
10570 26863 MT
(get_atail_val\050 alist \051)
SH( 30)666 W
10570 27817 MT
(get_from_bintree\050 tree, ident \051)
SH( 40)666 W
10570 28771 MT
(get_from_hashtable\050 table, ident \051)
SH( 49)666 W
10570 29725 MT
(get_from_head\050 alist \051)
SH( 29)666 W
10570 30679 MT
(get_from_head\050 list \051)
SH( 12)666 W
10570 31633 MT
(get_from_tail\050 alist \051)
SH( 29)666 W
10570 32587 MT
(get_from_tail\050 list \051)
SH( 12)666 W
10570 33541 MT
(get_head_val\050 list \051)
SH( 13)666 W
10570 34495 MT
(get_list_head\050 list \051)
SH( 11)666 W
10570 35449 MT
(get_list_next\050 list, current \051)
SH( 16)666 W
10570 36403 MT
(get_list_next_func\050 list, current, ptr, func \051)
SH( 17)666 W
10570 37357 MT
(get_list_pos\050 list, pos \051)
SH( 11)666 W
10570 38311 MT
(get_list_pos_val\050 list, pos \051)
SH( 14)666 W
10570 39265 MT
(get_list_prev\050 list, current \051)
SH( 17)666 W
10570 40219 MT
(get_list_tail\050 list \051)
SH( 11)666 W
10570 41173 MT
(get_list_val\050 list, value \051)
SH( 13)666 W
10570 42127 MT
(get_node_val\050 list, element \051)
SH( 14)666 W
10570 43081 MT
(get_tail_val\050 list \051)
SH( 13)666 W
10570 44989 MT
(hashtable_empty\050 table \051)
SH( 50)666 W
10570 45943 MT
(head_of_aqueue\050 aqueue \051)
SH( 34)666 W
10570 46897 MT
(head_of_queue\050 queue \051)
SH( 19)666 W
10570 47851 MT
(height_of_astack\050 astack \051)
SH( 33)666 W
10570 48805 MT
(height_of_stack\050 stack \051)
SH( 19)666 W
10570 50713 MT
(in_alist\050 alist, element \051)
SH( 29)666 W
10570 51667 MT
(in_list\050 list, element \051)
SH( 12)666 W
10570 52621 MT
(insert_alist_node\050 alist, element, node \051)
SH( 27)666 W
10570 53575 MT
(insert_alist_pos\050 alist, element, pos \051)
SH( 28)666 W
10570 54529 MT
(insert_alist_val\050 alist, element, value \051)
SH( 30)666 W
10570 55483 MT
(insert_list_node\050 list, element, node \051)
SH( 10)666 W
10570 56437 MT
(insert_list_pos\050 list, element, pos \051)
SH( 10)666 W
10570 57391 MT
(insert_list_val\050 list, element, value \051)
SH( 13)666 W
10570 58345 MT
(insert_subalist_node\050 alist1, alist2, node \051)
SH( 28)666 W
10570 59299 MT
(insert_subalist_pos\050 alist1, alist2, pos \051)
SH( 28)666 W
10570 60253 MT
(insert_sublist_node\050 list1, list2, node \051)
SH( 11)666 W
10570 61207 MT
(insert_sublist_pos\050 list1, list2, pos \051)
SH( 11)666 W
10570 63115 MT
(last_in_alist\050 alist, element \051)
SH( 30)666 W
10570 64069 MT
(last_in_list\050 list, element \051)
SH( 13)666 W
10570 65023 MT
(length_of_aqueue\050 aqueue \051)
SH( 34)666 W
10570 65977 MT
(length_of_queue\050 queue \051)
SH( 20)666 W
10570 66931 MT
(list_empty\050 list \051)
SH( 12)666 W
10570 67885 MT
(list_equal\050 list1, list2, func \051)
SH( 15)666 W
10570 68839 MT
(list_length\050 list \051)
SH( 12)666 W
10570 69793 MT
(loop_through_alist\050 alist, pointer, type \051)
SH( 32)666 W
10570 70747 MT
(loop_through_list\050 list, pointer, type \051)
SH( 17)666 W
ES
%%Page: 61 62 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
30374 XM
(Index)SH
53968 XM
(61)SH
8 /Helvetica AF
12730 7783 MT
(make_alist\050\051 26)666 W
12730 8737 MT
(make_aqueue\050\051 33)666 W
12730 9691 MT
(make_astack\050\051 33)666 W
12730 10645 MT
(make_bintree\050 func \051)
SH( 39)666 W
12730 11599 MT
(make_hashtable\050 size, hashfunc, matchfunc \051)
SH( 48)666 W
12730 12553 MT
(make_list\050\051 8)666 W
12730 13507 MT
(make_queue\050\051 19)666 W
12730 14461 MT
(make_stack\050\051 18)666 W
12730 15415 MT
(malloc\050 size \051)
SH( 53)666 W
12730 16369 MT
(memory_stats\050 fp, title \051)
SH( 56)666 W
12730 17323 MT
(mstats\050 fp, title \051)
SH( 55)666 W
12730 19231 MT
(pop_astack\050 astack \051)
SH( 33)666 W
12730 20185 MT
(pop_stack\050 stack \051)
SH( 18)666 W
12730 21139 MT
(push_astack\050 astack, element \051)
SH( 33)666 W
12730 22093 MT
(push_stack\050 stack, element \051)
SH( 18)666 W
12730 24001 MT
(queue_empty\050 queue \051)
SH( 20)666 W
12730 25909 MT
(realloc\050 node, new_size \051)
SH( 54)666 W
12730 26863 MT
(replace_alist\050 alist, old, new \051)
SH( 28)666 W
12730 27817 MT
(replace_list\050 list, old, new \051)
SH( 10)666 W
12730 28771 MT
(reverse_alist\050 alist \051)
SH( 31)666 W
12730 29725 MT
(reverse_list\050 list \051)
SH( 15)666 W
12730 31633 MT
(search_alist\050 alist, ptr, func \051)
SH( 31)666 W
12730 32587 MT
(search_list\050 list, ptr, func \051)
SH( 15)666 W
12730 33541 MT
(size_of_bintree\050 tree \051)
SH( 41)666 W
12730 34495 MT
(size_of_hashtable\050 table \051)
SH( 50)666 W
12730 35449 MT
(sort_alist\050 alist \051)
SH( 32)666 W
12730 36403 MT
(sort_alist_func\050 alist, func \051)
SH( 32)666 W
12730 37357 MT
(sort_list\050 list \051)
SH( 16)666 W
12730 38311 MT
(sort_list_func\050 list, func \051)
SH( 16)666 W
12730 39265 MT
(stack_empty\050 stack \051)
SH( 19)666 W
12730 41173 MT
(top_of_astack\050 astack \051)
SH( 33)666 W
12730 42127 MT
(top_of_stack\050 stack \051)
SH( 19)666 W
ES
%%Page: 62 63 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(62)SH
25297 XM
(Table of Contents)SH
46694 XM
(28 June 1988)SH
ES
%%Page: i 64 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
27457 XM
(Table of Contents)SH
54802 XM
(i)SH
16 SS 
24921 8366 MT
(Table of Contents)SH
12 SS 
8280 9961 MT
(1. Introduction)334 W
54413 XM
(1)SH
10 SS 
9948 11410 MT
(1.1. Document)
278 W( Style)SH
54524 XM
(2)SH
9948 12559 MT
(1.2. Acknowledgements)278 W
54524 XM
(2)SH
12 SS 
8280 14154 MT
(2. Why)
334 W( Use a Generic Package?)SH
54413 XM
(3)SH
10 SS 
9948 15603 MT
(2.1. Creating)
278 W( A Generic Data Structure)SH
54524 XM
(3)SH
9948 16752 MT
(2.2. Generic)
278 W( Functions for Generic Structures)SH
54524 XM
(4)SH
9948 17901 MT
(2.3. Advantages)
278 W( of Generic Functions)SH
54524 XM
(4)SH
12 SS 
8280 19496 MT
(3. The listPack List Manipulation Package)SH
54413 XM
(7)SH
10 SS 
9948 20945 MT
(3.1. The)
278 W( LIST data type)SH
54524 XM
(7)SH
9948 22094 MT
(3.2. Creating)
278 W( Lists)SH
54524 XM
(8)SH
12172 23243 MT
(3.2.1. \050LIST\051)
278 W( make_list\050\051)SH
54524 XM
(8)SH
12172 24392 MT
(3.2.2. \050LIST\051)
278 W( copy_list\050 \050LIST\051 list, \050int\051 flag \051)SH
54524 XM
(8)SH
9948 25541 MT
(3.3. Destroying)
278 W( Lists)SH
54524 XM
(9)SH
12172 26690 MT
(3.3.1. free_list\050)
278 W( \050LIST\051 list, \050int\051 flag \051)SH
54524 XM
(9)SH
12172 27839 MT
(3.3.2. \050LIST\051)
278 W( flush_list\050 \050LIST\051 list, \050int\051 flag \051)SH
54524 XM
(9)SH
9948 28988 MT
(3.4. Placing)
278 W( Elements in a List)SH
54524 XM
(9)SH
12172 30137 MT
(3.4.1. \050NODE\051)
278 W( add_to_head\050 \050LIST\051 list, \050NODE\051 element \051)SH
54524 XM
(9)SH
12172 31286 MT
(3.4.2. \050NODE\051)
278 W( add_to_tail\050 \050LIST\051 list, \050NODE\051 element \051)SH
53968 XM
(10)SH
12172 32435 MT
(3.4.3. \050NODE\051)
278 W( insert_list_node\050 \050LIST\051 list, \050NODE\051 element, \050NODE\051 node \051)SH
53968 XM
(10)SH
12172 33584 MT
(3.4.4. \050NODE\051)
278 W( insert_list_pos\050 \050LIST\051 list, \050NODE\051 element, \050int\051 pos \051)SH
53968 XM
(10)SH
12172 34733 MT
(3.4.5. \050int\051)
278 W( replace_list\050 \050LIST\051 list, \050NODE\051 old, \050NODE\051 new \051)SH
53968 XM
(10)SH
12172 35882 MT
(3.4.6. \050LIST\051)
278 W( append_list\050 \050LIST\051 first, \050LIST\051 second \051)SH
53968 XM
(10)SH
12172 37031 MT
(3.4.7. \050LIST\051)
278 W( insert_sublist_node\050 \050LIST\051 list1, \050LIST\051 list2, \050NODE\051 node \051)SH
53968 XM
(11)SH
12172 38180 MT
(3.4.8. \050LIST\051)
278 W( insert_sublist_pos\050 \050LIST\051 list1, \050LIST\051 list2, \050int\051 pos \051)SH
53968 XM
(11)SH
9948 39329 MT
(3.5. Examining)
278 W( the Elements of a List)SH
53968 XM
(11)SH
12172 40478 MT
(3.5.1. \050NODE\051)
278 W( get_list_head\050 \050LIST\051 list \051)SH
53968 XM
(11)SH
12172 41627 MT
(3.5.2. \050NODE\051)
278 W( get_list_tail\050 \050LIST\051 list \051)SH
53968 XM
(11)SH
12172 42776 MT
(3.5.3. \050NODE\051)
278 W( get_list_pos\050 \050LIST\051 list, \050int\051 pos \051)SH
53968 XM
(11)SH
9948 43925 MT
(3.6. Removing)
278 W( Elements from Lists)SH
53968 XM
(11)SH
12172 45074 MT
(3.6.1. \050NODE\051)
278 W( get_from_head\050 \050LIST\051 list \051)SH
53968 XM
(12)SH
12172 46223 MT
(3.6.2. \050NODE\051)
278 W( get_from_tail\050 \050LIST\051 list \051)SH
53968 XM
(12)SH
12172 47372 MT
(3.6.3. \050NODE\051)
278 W( delete_list_pos\050 \050LIST\051 list, \050int\051 pos \051)SH
53968 XM
(12)SH
12172 48521 MT
(3.6.4. \050NODE\051)
278 W( delete_list_node\050 \050LIST\051 list, \050NODE\051 element \051)SH
53968 XM
(12)SH
9948 49670 MT
(3.7. Examining)
278 W( the Lists)SH
53968 XM
(12)SH
12172 50819 MT
(3.7.1. \050int\051)
278 W( list_length\050 \050LIST\051 list \051)SH
53968 XM
(12)SH
12172 51968 MT
(3.7.2. \050int\051)
278 W( in_list\050 \050LIST\051 list, \050NODE\051 element \051)SH
53968 XM
(12)SH
12172 53117 MT
(3.7.3. \050int\051)
278 W( list_empty\050 \050LIST\051 list \051)SH
53968 XM
(12)SH
12172 54266 MT
(3.7.4. \050int\051)
278 W( first_in_list\050 \050LIST\051 list, \050NODE\051 element \051)SH
53968 XM
(12)SH
12172 55415 MT
(3.7.5. \050int\051)
278 W( last_in_list\050 \050LIST\051 list, \050NODE\051 element \051)SH
53968 XM
(13)SH
9948 56564 MT
(3.8. Tagging)
278 W( Elements in Lists)SH
53968 XM
(13)SH
12172 57713 MT
(3.8.1. \050NODE\051)
278 W( add_to_head_val\050 \050LIST\051 list, \050NODE\051 element, \050int\051 value \051)SH
53968 XM
(13)SH
12172 58862 MT
(3.8.2. \050NODE\051)
278 W( add_to_tail_val\050 \050LIST\051 list, \050NODE\051 element, \050int\051 value \051)SH
53968 XM
(13)SH
12172 60011 MT
(3.8.3. \050NODE\051)
278 W( insert_list_val\050 \050LIST\051 list, \050NODE\051 element, \050int\051 value \051)SH
53968 XM
(13)SH
12172 61160 MT
(3.8.4. \050NODE\051)
278 W( get_list_val\050 \050LIST\051 list, \050int\051 value \051)SH
53968 XM
(13)SH
12172 62309 MT
(3.8.5. \050NODE\051)
278 W( delete_list_val\050 \050LIST\051 list, \050int\051 value \051)SH
53968 XM
(13)SH
12172 63458 MT
(3.8.6. \050int\051)
278 W( get_head_val\050 \050LIST\051 list \051)SH
53968 XM
(13)SH
12172 64607 MT
(3.8.7. \050int\051)
278 W( get_tail_val\050 \050LIST\051 list \051)SH
53968 XM
(13)SH
12172 65756 MT
(3.8.8. \050int\051)
278 W( get_node_val\050 \050LIST\051 list, \050NODE\051 element \051)SH
53968 XM
(14)SH
12172 66905 MT
(3.8.9. \050int\051)
278 W( get_list_pos_val\050 \050LIST\051 list, \050int\051 pos \051)SH
53968 XM
(14)SH
12172 68054 MT
(3.8.10. \050int\051)
278 W( change_list_val\050 \050LIST\051 list, \050NODE\051 element, \050int\051 new_val \051)SH
53968 XM
(14)SH
ES
%%Page: ii 65 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(ii)SH
25297 XM
(Table of Contents)SH
46694 XM
(28 June 1988)SH
7788 7929 MT
(3.9. Applying)
278 W( Functions to Lists)SH
51808 XM
(14)SH
10012 9078 MT
(3.9.1. \050int\051)
278 W( for_all_list\050 \050LIST\051 list, \050NODE\051 ptr, \050PFI\051 func \051)SH
51808 XM
(14)SH
10012 10227 MT
(3.9.2. \050NODE\051)
278 W( search_list\050 \050LIST\051 list, \050NODE\051 ptr, \050PFI\051 func \051)SH
51808 XM
(15)SH
10012 11376 MT
(3.9.3. \050LIST\051)
278 W( list_equal\050 \050LIST\051 list1, \050LIST\051 list2, \050PFI\051 func \051)SH
51808 XM
(15)SH
10012 12525 MT
(3.9.4. \050LIST\051)
278 W( eval_list\050 \050LIST\051 list, \050PFI\051 func \051)SH
51808 XM
(15)SH
7788 13674 MT
(3.10. Changing)
278 W( the Order of the Elements)SH
51808 XM
(15)SH
10012 14823 MT
(3.10.1. \050LIST\051)
278 W( reverse_list\050 \050LIST\051 list \051)SH
51808 XM
(15)SH
10012 15972 MT
(3.10.2. \050LIST\051)
278 W( sort_list\050 \050LIST\051 list \051)SH
51808 XM
(16)SH
10012 17121 MT
(3.10.3. \050LIST\051)
278 W( sort_list_func\050 \050LIST\051 list, \050PFI\051 func \051)SH
51808 XM
(16)SH
7788 18270 MT
(3.11. Marking)
278 W( Current Position in a LIST)SH
51808 XM
(16)SH
10012 19419 MT
(3.11.1. \050NODE\051)
278 W( get_list_next\050 \050LIST\051 list, \050NODE\051 current \051)SH
51808 XM
(16)SH
10012 20568 MT
(3.11.2. \050NODE\051)
278 W( get_list_prev\050 \050LIST\051 list, \050NODE\051 current \051)SH
51808 XM
(17)SH
10012 21717 MT
(3.11.3. \050NODE\051)
278 W( get_list_next_func\050 \050LIST\051 list, \050NODE\051 current, \050NODE\051 ptr, \050PFI\051 func)SH
51808 XM
(17)SH
13348 22866 MT
(\051)SH
10012 24015 MT
(3.11.4. loop_through_list\050)
278 W( \050LIST\051 list, \050type\051 pointer, type \051)SH
51808 XM
(17)SH
7788 25164 MT
(3.12. Stacks)
278 W( and Queues)SH
51808 XM
(18)SH
10012 26313 MT
(3.12.1. \050STACK\051)
278 W( make_stack\050\051)SH
51808 XM
(18)SH
10012 27462 MT
(3.12.2. free_stack\050)
278 W( \050STACK\051 stack, \050int\051 flag \051)SH
51808 XM
(18)SH
10012 28611 MT
(3.12.3. \050NODE\051)
278 W( push_stack\050 \050STACK\051 stack, \050NODE\051 element \051)SH
51808 XM
(18)SH
10012 29760 MT
(3.12.4. \050NODE\051)
278 W( pop_stack\050 \050STACK\051 stack \051)SH
51808 XM
(18)SH
10012 30909 MT
(3.12.5. \050NODE\051)
278 W( top_of_stack\050 \050STACK\051 stack \051)SH
51808 XM
(19)SH
10012 32058 MT
(3.12.6. \050int\051)
278 W( height_of_stack\050 \050STACK\051 stack \051)SH
51808 XM
(19)SH
10012 33207 MT
(3.12.7. \050int\051)
278 W( stack_empty\050 \050STACK\051 stack \051)SH
51808 XM
(19)SH
7788 34356 MT
(3.13. Queue)
278 W( Functions)SH
51808 XM
(19)SH
10012 35505 MT
(3.13.1. \050QUEUE\051)
278 W( make_queue\050\051)SH
51808 XM
(19)SH
10012 36654 MT
(3.13.2. free_queue\050)
278 W( \050QUEUE\051 queue, \050int\051 flag \051)SH
51808 XM
(19)SH
10012 37803 MT
(3.13.3. \050NODE\051)
278 W( enqueue\050 \050QUEUE\051 queue, \050NODE\051 element \051)SH
51808 XM
(19)SH
10012 38952 MT
(3.13.4. \050NODE\051)
278 W( dequeue\050 \050QUEUE\051 queue \051)SH
51808 XM
(19)SH
10012 40101 MT
(3.13.5. \050NODE\051)
278 W( head_of_queue\050 \050QUEUE\051 queue \051)SH
51808 XM
(19)SH
10012 41250 MT
(3.13.6. \050int\051)
278 W( length_of_queue\050 \050QUEUE\051 queue \051)SH
51808 XM
(20)SH
10012 42399 MT
(3.13.7. \050int\051)
278 W( queue_empty\050 \050QUEUE\051 queue \051)SH
51808 XM
(20)SH
7788 43548 MT
(3.14. Use)
278 W( and Examples of listPack)SH
51808 XM
(20)SH
12 SS 
6120 45143 MT
(4. The)
334 W( alistPack Variant)SH
51586 XM
(25)SH
10 SS 
7788 46592 MT
(4.1. The)
278 W( ALIST data type)SH
51808 XM
(25)SH
7788 47741 MT
(4.2. Creating)
278 W( ALISTs)SH
51808 XM
(26)SH
10012 48890 MT
(4.2.1. \050ALIST\051)
278 W( make_alist\050\051)SH
51808 XM
(26)SH
10012 50039 MT
(4.2.2. \050ALIST\051)
278 W( copy_alist\050 \050ALIST\051 alist, \050int\051 flag \051)SH
51808 XM
(26)SH
7788 51188 MT
(4.3. Destroying)
278 W( ALISTs)SH
51808 XM
(27)SH
10012 52337 MT
(4.3.1. free_alist\050)
278 W( \050ALIST\051 alist, \050int\051 flag \051)SH
51808 XM
(27)SH
10012 53486 MT
(4.3.2. \050ALIST\051)
278 W( flush_alist\050 \050ALIST\051 alist, \050int\051 flag \051)SH
51808 XM
(27)SH
7788 54635 MT
(4.4. Placing)
278 W( Elements in a ALIST)SH
51808 XM
(27)SH
10012 55784 MT
(4.4.1. \050NODE\051)
278 W( add_to_ahead\050 \050ALIST\051 alist, \050NODE\051 element \051)SH
51808 XM
(27)SH
10012 56933 MT
(4.4.2. \050NODE\051)
278 W( add_to_atail\050 \050ALIST\051 alist, \050NODE\051 element \051)SH
51808 XM
(27)SH
10012 58082 MT
(4.4.3. \050NODE\051)
278 W( insert_alist_node\050 \050ALIST\051 alist, \050NODE\051 element, \050NODE\051 node \051)SH
51808 XM
(27)SH
10012 59231 MT
(4.4.4. \050NODE\051)
278 W( insert_alist_pos\050 \050ALIST\051 alist, \050NODE\051 element, \050int\051 pos \051)SH
51808 XM
(28)SH
10012 60380 MT
(4.4.5. \050int\051)
278 W( replace_alist\050 \050ALIST\051 alist, \050NODE\051 old, \050NODE\051 new \051)SH
51808 XM
(28)SH
10012 61529 MT
(4.4.6. \050ALIST\051)
278 W( append_alist\050 \050ALIST\051 first, \050ALIST\051 second \051)SH
51808 XM
(28)SH
10012 62678 MT
(4.4.7. \050ALIST\051)
278 W( insert_subalist_node\050 \050ALIST\051 alist1, \050ALIST\051 alist2, \050NODE\051 node \051)SH
51808 XM
(28)SH
10012 63827 MT
(4.4.8. \050ALIST\051)
278 W( insert_subalist_pos\050 \050ALIST\051 alist1, \050ALIST\051 alist2, \050int\051 pos \051)SH
51808 XM
(28)SH
7788 64976 MT
(4.5. Examining)
278 W( the Elements of a ALIST)SH
51808 XM
(28)SH
10012 66125 MT
(4.5.1. \050NODE\051)
278 W( get_alist_head\050 \050ALIST\051 alist \051)SH
51808 XM
(28)SH
10012 67274 MT
(4.5.2. \050NODE\051)
278 W( get_alist_tail\050 \050ALIST\051 alist \051)SH
51808 XM
(28)SH
ES
%%Page: iii 66 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
27457 XM
(Table of Contents)SH
54246 XM
(iii)SH
12172 7929 MT
(4.5.3. \050NODE\051)
278 W( get_alist_pos\050 \050ALIST\051 alist, \050int\051 pos \051)SH
53968 XM
(29)SH
9948 9078 MT
(4.6. Removing)
278 W( Elements from ALISTs)SH
53968 XM
(29)SH
12172 10227 MT
(4.6.1. \050NODE\051)
278 W( get_from_head\050 \050ALIST\051 alist \051)SH
53968 XM
(29)SH
12172 11376 MT
(4.6.2. \050NODE\051)
278 W( get_from_tail\050 \050ALIST\051 alist \051)SH
53968 XM
(29)SH
12172 12525 MT
(4.6.3. \050NODE\051)
278 W( delete_alist_pos\050 \050ALIST\051 alist, \050int\051 pos \051)SH
53968 XM
(29)SH
12172 13674 MT
(4.6.4. \050NODE\051)
278 W( delete_alist_node\050 \050ALIST\051 alist, \050NODE\051 element \051)SH
53968 XM
(29)SH
9948 14823 MT
(4.7. Examining)
278 W( the ALISTs)SH
53968 XM
(29)SH
12172 15972 MT
(4.7.1. \050int\051)
278 W( alist_length\050 \050ALIST\051 alist \051)SH
53968 XM
(29)SH
12172 17121 MT
(4.7.2. \050int\051)
278 W( in_alist\050 \050ALIST\051 alist, \050NODE\051 element \051)SH
53968 XM
(29)SH
12172 18270 MT
(4.7.3. \050int\051)
278 W( alist_empty\050 \050ALIST\051 alist \051)SH
53968 XM
(29)SH
12172 19419 MT
(4.7.4. \050int\051)
278 W( first_in_alist\050 \050ALIST\051 alist, \050NODE\051 element \051)SH
53968 XM
(30)SH
12172 20568 MT
(4.7.5. \050int\051)
278 W( last_in_alist\050 \050ALIST\051 alist, \050NODE\051 element \051)SH
53968 XM
(30)SH
9948 21717 MT
(4.8. Tagging)
278 W( Elements in ALISTs)SH
53968 XM
(30)SH
12172 22866 MT
(4.8.1. \050NODE\051)
278 W( add_to_ahead_val\050 \050ALIST\051 alist, \050NODE\051 element, \050int\051 value \051)SH
53968 XM
(30)SH
12172 24015 MT
(4.8.2. \050NODE\051)
278 W( add_to_atail_val\050 \050ALIST\051 alist, \050NODE\051 element, \050int\051 value \051)SH
53968 XM
(30)SH
12172 25164 MT
(4.8.3. \050NODE\051)
278 W( insert_alist_val\050 \050ALIST\051 alist, \050NODE\051 element, \050int\051 value \051)SH
53968 XM
(30)SH
12172 26313 MT
(4.8.4. \050NODE\051)
278 W( get_alist_val\050 \050ALIST\051 alist, \050int\051 value \051)SH
53968 XM
(30)SH
12172 27462 MT
(4.8.5. \050NODE\051)
278 W( delete_alist_val\050 \050ALIST\051 alist, \050int\051 value \051)SH
53968 XM
(30)SH
12172 28611 MT
(4.8.6. \050int\051)
278 W( get_ahead_val\050 \050ALIST\051 alist \051)SH
53968 XM
(30)SH
12172 29760 MT
(4.8.7. \050int\051)
278 W( get_atail_val\050 \050ALIST\051 alist \051)SH
53968 XM
(30)SH
12172 30909 MT
(4.8.8. \050int\051)
278 W( get_anode_val\050 \050ALIST\051 alist, \050NODE\051 element \051)SH
53968 XM
(30)SH
12172 32058 MT
(4.8.9. \050int\051)
278 W( get_alist_pos_val\050 \050ALIST\051 alist, \050int\051 pos \051)SH
53968 XM
(31)SH
12172 33207 MT
(4.8.10. \050int\051)
278 W( change_alist_val\050 \050ALIST\051 alist, \050NODE\051 element, \050int\051 new_val \051)SH
53968 XM
(31)SH
9948 34356 MT
(4.9. Applying)
278 W( Functions to ALISTs)SH
53968 XM
(31)SH
12172 35505 MT
(4.9.1. \050int\051)
278 W( for_all_alist\050 \050ALIST\051 alist, \050NODE\051 ptr, \050PFI\051 func \051)SH
53968 XM
(31)SH
12172 36654 MT
(4.9.2. \050NODE\051)
278 W( search_alist\050 \050ALIST\051 alist, \050NODE\051 ptr, \050PFI\051 func \051)SH
53968 XM
(31)SH
12172 37803 MT
(4.9.3. \050ALIST\051)
278 W( eval_alist\050 \050ALIST\051 alist, \050PFI\051 func \051)SH
53968 XM
(31)SH
12172 38952 MT
(4.9.4. \050ALIST\051)
278 W( alist_equal\050 \050ALIST\051 alist1, \050ALIST\051 alist2, \050PFI\051 func \051)SH
53968 XM
(31)SH
9948 40101 MT
(4.10. Changing)
278 W( the Order of the Elements)SH
53968 XM
(31)SH
12172 41250 MT
(4.10.1. \050ALIST\051)
278 W( reverse_alist\050 \050ALIST\051 alist \051)SH
53968 XM
(31)SH
12172 42399 MT
(4.10.2. \050ALIST\051)
278 W( sort_alist\050 \050ALIST\051 alist \051)SH
53968 XM
(32)SH
12172 43548 MT
(4.10.3. \050ALIST\051)
278 W( sort_alist_func\050 \050ALIST\051 alist, \050PFI\051 func \051)SH
53968 XM
(32)SH
9948 44697 MT
(4.11. Marking)
278 W( Current Position in an ALIST)SH
53968 XM
(32)SH
12172 45846 MT
(4.11.1. \050NODE\051)
278 W( get_alist_next\050 \050ALIST\051 alist, \050NODE\051 current \051)SH
53968 XM
(32)SH
12172 46995 MT
(4.11.2. \050NODE\051)
278 W( get_alist_prev\050 \050ALIST\051 alist, \050NODE\051 current \051)SH
53968 XM
(32)SH
12172 48144 MT
(4.11.3. \050NODE\051)
278 W( get_alist_next_func\050 \050ALIST\051 alist, \050NODE\051 current, \050NODE\051 ptr, \050PFI\051)SH
53968 XM
(32)SH
15508 49293 MT
(func \051)SH
12172 50442 MT
(4.11.4. loop_through_alist\050)
278 W( \050ALIST\051 alist, \050type\051 pointer, type \051)SH
53968 XM
(32)SH
9948 51591 MT
(4.12. Stacks)
278 W( and Queues)SH
53968 XM
(32)SH
9948 52740 MT
(4.13. ASTACK)
278 W( Functions)SH
53968 XM
(33)SH
12172 53889 MT
(4.13.1. \050ASTACK\051)
278 W( make_astack\050\051)SH
53968 XM
(33)SH
12172 55038 MT
(4.13.2. free_astack\050)
278 W( \050ASTACK\051 astack, \050int\051 flag \051)SH
53968 XM
(33)SH
12172 56187 MT
(4.13.3. \050NODE\051)
278 W( push_astack\050 \050ASTACK\051 astack, \050NODE\051 element \051)SH
53968 XM
(33)SH
12172 57336 MT
(4.13.4. \050NODE\051)
278 W( pop_astack\050 \050ASTACK\051 astack \051)SH
53968 XM
(33)SH
12172 58485 MT
(4.13.5. \050NODE\051)
278 W( top_of_astack\050 \050ASTACK\051 astack \051)SH
53968 XM
(33)SH
12172 59634 MT
(4.13.6. \050int\051)
278 W( height_of_astack\050 \050ASTACK\051 astack \051)SH
53968 XM
(33)SH
12172 60783 MT
(4.13.7. \050int\051)
278 W( astack_empty\050 \050ASTACK\051 astack \051)SH
53968 XM
(33)SH
9948 61932 MT
(4.14. AQUEUE)
278 W( Functions)SH
53968 XM
(33)SH
12172 63081 MT
(4.14.1. \050AQUEUE\051)
278 W( make_aqueue\050\051)SH
53968 XM
(33)SH
12172 64230 MT
(4.14.2. free_aqueue\050)
278 W( \050AQUEUE\051 aqueue, \050int\051 flag \051)SH
53968 XM
(33)SH
12172 65379 MT
(4.14.3. \050NODE\051)
278 W( enaqueue\050 \050AQUEUE\051 aqueue, \050NODE\051 element \051)SH
53968 XM
(33)SH
12172 66528 MT
(4.14.4. \050NODE\051)
278 W( deaqueue\050 \050AQUEUE\051 aqueue \051)SH
53968 XM
(34)SH
12172 67677 MT
(4.14.5. \050NODE\051)
278 W( head_of_aqueue\050 \050AQUEUE\051 aqueue \051)SH
53968 XM
(34)SH
ES
%%Page: iv 67 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(iv)SH
25297 XM
(Table of Contents)SH
46694 XM
(28 June 1988)SH
10012 7929 MT
(4.14.6. \050int\051)
278 W( length_of_aqueue\050 \050AQUEUE\051 aqueue \051)SH
51808 XM
(34)SH
10012 9078 MT
(4.14.7. \050int\051)
278 W( aqueue_empty\050 \050AQUEUE\051 aqueue \051)SH
51808 XM
(34)SH
7788 10227 MT
(4.15. Using)
278 W( alistPack)SH
51808 XM
(34)SH
7788 11376 MT
(4.16. Switching)
278 W( Between LISTs and ALISTs)SH
51808 XM
(34)SH
12 SS 
6120 12971 MT
(5. The)
334 W( Binary Tree Package:  treePack)SH
51586 XM
(37)SH
10 SS 
7788 14420 MT
(5.1. The)
278 W( TREE Data Structure)SH
51808 XM
(37)SH
7788 15569 MT
(5.2. The)
278 W( Ordering Function)SH
51808 XM
(38)SH
7788 16718 MT
(5.3. treePack)
278 W( Functions)SH
51808 XM
(39)SH
10012 17867 MT
(5.3.1. \050TREE\051)
278 W( make_bintree\050 \050PFI\051 func \051)SH
51808 XM
(39)SH
10012 19016 MT
(5.3.2. \050TREE\051)
278 W( copy_bintree\050 \050TREE\051 tree, \050int\051 flag \051)SH
51808 XM
(39)SH
10012 20165 MT
(5.3.3. free_bintree\050)
278 W( \050TREE\051 tree, \050int\051 flag \051)SH
51808 XM
(40)SH
10012 21314 MT
(5.3.4. \050NODE\051)
278 W( add_to_bintree\050 \050TREE\051 tree, \050NODE\051 ident, \050NODE\051 node \051)SH
51808 XM
(40)SH
10012 22463 MT
(5.3.5. \050NODE\051)
278 W( add_unique_to_bintree\050 \050TREE\051 tree, \050NODE\051 ident, \050NODE\051 node \051)SH
51808 XM
(40)SH
10012 23612 MT
(5.3.6. \050NODE\051)
278 W( get_from_bintree\050 \050TREE\051 tree, \050NODE\051 ident \051)SH
51808 XM
(40)SH
10012 24761 MT
(5.3.7. \050NODE\051)
278 W( delete_from_bintree\050 \050TREE\051 tree, \050NODE\051 ident \051)SH
51808 XM
(40)SH
10012 25910 MT
(5.3.8. \050int\051)
278 W( for_all_bintree\050 \050TREE\051 tree, \050NODE\051 node, \050PFI\051 func \051)SH
51808 XM
(40)SH
10012 27059 MT
(5.3.9. \050int\051)
278 W( size_of_bintree\050 \050TREE\051 tree \051)SH
51808 XM
(41)SH
10012 28208 MT
(5.3.10. \050int\051)
278 W( bintree_empty\050 \050TREE\051 tree \051)SH
51808 XM
(41)SH
7788 29357 MT
(5.4. Examples)
278 W( of the Use of treePack)SH
51808 XM
(41)SH
12 SS 
6120 30952 MT
(6. The)
334 W( Hash Table Module - hashPack)SH
51586 XM
(47)SH
10 SS 
7788 32401 MT
(6.1. The)
278 W( HASH Data Type)SH
51808 XM
(47)SH
7788 33550 MT
(6.2. The)
278 W( Hashing and Matching Functions)SH
51808 XM
(47)SH
7788 34699 MT
(6.3. hashPack)
278 W( Functions)SH
51808 XM
(48)SH
10012 35848 MT
(6.3.1. \050HASH\051)
278 W( make_hashtable\050 \050int\051 size, \050PFI\051 hashfunc, \050PFI\051 matchfunc \051)SH
51808 XM
(48)SH
10012 36997 MT
(6.3.2. free_hashtable\050)
278 W( \050HASH\051 table, \050int\051 flag \051)SH
51808 XM
(49)SH
10012 38146 MT
(6.3.3. \050NODE\051)
278 W( add_to_hashtable\050 \050HASH\051 table, \050NODE\051 node, \050NODE\051 ident \051)SH
51808 XM
(49)SH
10012 39295 MT
(6.3.4. \050NODE\051)
278 W( add_unique_to_hashtable\050 \050HASH\051 table, \050NODE\051 node, \050NODE\051 ident \051)SH
51808 XM
(49)SH
10012 40444 MT
(6.3.5. \050NODE\051)
278 W( get_from_hashtable\050 \050HASH\051 table, \050NODE\051 ident \051)SH
51808 XM
(49)SH
10012 41593 MT
(6.3.6. \050NODE\051)
278 W( delete_from_hashtable\050 \050HASH\051 table, \050NODE\051 ident \051)SH
51808 XM
(49)SH
10012 42742 MT
(6.3.7. \050int\051)
278 W( for_all_hashtable\050 \050HASH\051 table, \050NODE\051 node, \050PFI\051 func \051)SH
51808 XM
(50)SH
10012 43891 MT
(6.3.8. \050int\051)
278 W( size_of_hashtable\050 \050HASH\051 table \051)SH
51808 XM
(50)SH
10012 45040 MT
(6.3.9. \050int\051)
278 W( hashtable_empty\050 \050HASH\051 table \051)SH
51808 XM
(50)SH
7788 46189 MT
(6.4. Hash)
278 W( Table Example)SH
51808 XM
(50)SH
12 SS 
6120 47784 MT
(7. Memory)
334 W( Management with mallocPack and memoryPack)SH
51586 XM
(53)SH
10 SS 
7788 49233 MT
(7.1. The)
278 W( NODE Data Type)SH
51808 XM
(53)SH
7788 50382 MT
(7.2. mallocPack)
278 W( Function)SH
51808 XM
(53)SH
10012 51531 MT
(7.2.1. \050NODE\051)
278 W( malloc\050 \050int\051 size \051)SH
51808 XM
(53)SH
10012 52680 MT
(7.2.2. free\050)
278 W( \050NODE\051 node \051)SH
51808 XM
(54)SH
10012 53829 MT
(7.2.3. \050NODE\051)
278 W( realloc\050 \050NODE\051 node, \050int\051 new_size \051)SH
51808 XM
(54)SH
10012 54978 MT
(7.2.4. \050NODE\051)
278 W( calloc\050 \050int\051 number, \050int\051 size \051)SH
51808 XM
(54)SH
10012 56127 MT
(7.2.5. \050NODE\051)
278 W( copy_alloc\050 \050NODE\051 node \051)SH
51808 XM
(54)SH
10012 57276 MT
(7.2.6. \050NODE\051)
278 W( dup_alloc\050 \050NODE\051 node \051)SH
51808 XM
(54)SH
10012 58425 MT
(7.2.7. \050int\051)
278 W( alloc_refcount\050 \050NODE\051 node \051)SH
51808 XM
(55)SH
10012 59574 MT
(7.2.8. \050int\051)
278 W( alloc_size\050 \050NODE\051 node \051)SH
51808 XM
(55)SH
10012 60723 MT
(7.2.9. mstats\050)
278 W( \050FILE *\051 fp, \050char *\051 title \051)SH
51808 XM
(55)SH
7788 61872 MT
(7.3. memoryPack)
278 W( Functions)SH
51808 XM
(56)SH
12 SS 
6120 63467 MT
(8. Installing)
334 W( The Toolbox)SH
51586 XM
(57)SH
10 SS 
7788 64916 MT
(8.1. The)
278 W( DEBUG Option)SH
51808 XM
(57)SH
7788 66065 MT
(8.2. The)
278 W( DO_CHECK Option)SH
51808 XM
(57)SH
7788 67214 MT
(8.3. The)
278 W( memoryPack Option)SH
51808 XM
(58)SH
ES
%%Page: v 68 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
27457 XM
(Table of Contents)SH
54524 XM
(v)SH
9948 7929 MT
(8.4. Allowing)
278 W( for the standard debugger)SH
53968 XM
(58)SH
12 SS 
8280 9524 MT
(Index)SH
53746 XM
(59)SH
ES
%%Page: vi 69 
BS
0 SI
10 /Helvetica-Bold AF
6120 4329 MT
(vi)SH
26075 XM
(List of Figures)SH
46694 XM
(28 June 1988)SH
ES
%%Page: vii 70 
BS
0 SI
10 /Helvetica-Bold AF
8280 4329 MT
(28 June 1988)SH
28235 XM
(List of Figures)SH
53968 XM
(vii)SH
16 SS 
26166 8366 MT
(List of Figures)SH
10 SS 
9948 9515 MT
(Figure 3-1:)
SH( Structure)
834 W( of a LIST)SH
54524 XM
(7)SH
9948 10664 MT
(Figure 4-1:)
SH( Structure)
834 W( of an ALIST)SH
53968 XM
(26)SH
9948 11813 MT
(Figure 5-1:)
SH( Structure)
834 W( of an TREE)SH
53968 XM
(38)SH
9948 12962 MT
(Figure 6-1:)
SH( Structure)
834 W( of a HASH table)SH
53968 XM
(48)SH
ES
%%Trailer
%%Pages: 70 
%%DocumentFonts: Helvetica Helvetica-Bold Helvetica-Oblique Symbol Courier Courier-Bold
